{
  "root": {
    "id": {
      "id": "uno/object",
      "parentId": "uno",
      "type": "Class",
      "modifiers": [
        "public",
        "intrinsic"
      ]
    },
    "uri": {
      "idUri": "uno/object",
      "href": "uno/object"
    },
    "titles": {
      "indexTitle": "object",
      "fullyQualifiedIndexTitle": "object"
    }
  },
  "descendants": [
    {
      "id": {
        "id": "alive/actionbutton",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/actionbutton",
        "href": "alive/actionbutton"
      },
      "titles": {
        "indexTitle": "ActionButton",
        "fullyQualifiedIndexTitle": "Alive.ActionButton"
      }
    },
    {
      "id": {
        "id": "alive/backbutton",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/backbutton",
        "href": "alive/backbutton"
      },
      "titles": {
        "indexTitle": "BackButton",
        "fullyQualifiedIndexTitle": "Alive.BackButton"
      }
    },
    {
      "id": {
        "id": "alive/body",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/body",
        "href": "alive/body"
      },
      "titles": {
        "indexTitle": "Body",
        "fullyQualifiedIndexTitle": "Alive.Body"
      }
    },
    {
      "id": {
        "id": "alive/bodybold",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/bodybold",
        "href": "alive/bodybold"
      },
      "titles": {
        "indexTitle": "BodyBold",
        "fullyQualifiedIndexTitle": "Alive.BodyBold"
      }
    },
    {
      "id": {
        "id": "alive/bubble",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/bubble",
        "href": "alive/bubble"
      },
      "titles": {
        "indexTitle": "Bubble",
        "fullyQualifiedIndexTitle": "Alive.Bubble"
      }
    },
    {
      "id": {
        "id": "alive/bubbles",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/bubbles",
        "href": "alive/bubbles"
      },
      "titles": {
        "indexTitle": "Bubbles",
        "fullyQualifiedIndexTitle": "Alive.Bubbles"
      }
    },
    {
      "id": {
        "id": "alive/buttontext",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/buttontext",
        "href": "alive/buttontext"
      },
      "titles": {
        "indexTitle": "ButtonText",
        "fullyQualifiedIndexTitle": "Alive.ButtonText"
      }
    },
    {
      "id": {
        "id": "alive/calltoactionbutton",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/calltoactionbutton",
        "href": "alive/calltoactionbutton"
      },
      "titles": {
        "indexTitle": "CallToActionButton",
        "fullyQualifiedIndexTitle": "Alive.CallToActionButton"
      }
    },
    {
      "id": {
        "id": "alive/card",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/card",
        "href": "alive/card"
      },
      "titles": {
        "indexTitle": "Card",
        "fullyQualifiedIndexTitle": "Alive.Card"
      }
    },
    {
      "id": {
        "id": "alive/cardbody",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/cardbody",
        "href": "alive/cardbody"
      },
      "titles": {
        "indexTitle": "CardBody",
        "fullyQualifiedIndexTitle": "Alive.CardBody"
      }
    },
    {
      "id": {
        "id": "alive/cardmedia",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/cardmedia",
        "href": "alive/cardmedia"
      },
      "titles": {
        "indexTitle": "CardMedia",
        "fullyQualifiedIndexTitle": "Alive.CardMedia"
      }
    },
    {
      "id": {
        "id": "alive/carousel",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/carousel",
        "href": "alive/carousel"
      },
      "titles": {
        "indexTitle": "Carousel",
        "fullyQualifiedIndexTitle": "Alive.Carousel"
      }
    },
    {
      "id": {
        "id": "alive/carouselpage",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/carouselpage",
        "href": "alive/carouselpage"
      },
      "titles": {
        "indexTitle": "CarouselPage",
        "fullyQualifiedIndexTitle": "Alive.CarouselPage"
      }
    },
    {
      "id": {
        "id": "alive/colorbadge",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/colorbadge",
        "href": "alive/colorbadge"
      },
      "titles": {
        "indexTitle": "ColorBadge",
        "fullyQualifiedIndexTitle": "Alive.ColorBadge"
      }
    },
    {
      "id": {
        "id": "alive/contentgradient",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/contentgradient",
        "href": "alive/contentgradient"
      },
      "titles": {
        "indexTitle": "ContentGradient",
        "fullyQualifiedIndexTitle": "Alive.ContentGradient"
      }
    },
    {
      "id": {
        "id": "alive/darktheme",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/darktheme",
        "href": "alive/darktheme"
      },
      "titles": {
        "indexTitle": "DarkTheme",
        "fullyQualifiedIndexTitle": "Alive.DarkTheme"
      }
    },
    {
      "id": {
        "id": "alive/donut",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/donut",
        "href": "alive/donut"
      },
      "titles": {
        "indexTitle": "Donut",
        "fullyQualifiedIndexTitle": "Alive.Donut"
      }
    },
    {
      "id": {
        "id": "alive/drawer",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/drawer",
        "href": "alive/drawer"
      },
      "titles": {
        "indexTitle": "Drawer",
        "fullyQualifiedIndexTitle": "Alive.Drawer"
      }
    },
    {
      "id": {
        "id": "alive/drawerbuttonbackground",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/drawerbuttonbackground",
        "href": "alive/drawerbuttonbackground"
      },
      "titles": {
        "indexTitle": "DrawerButtonBackground",
        "fullyQualifiedIndexTitle": "Alive.DrawerButtonBackground"
      }
    },
    {
      "id": {
        "id": "alive/fallbacktheme",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/fallbacktheme",
        "href": "alive/fallbacktheme"
      },
      "titles": {
        "indexTitle": "FallbackTheme",
        "fullyQualifiedIndexTitle": "Alive.FallbackTheme"
      }
    },
    {
      "id": {
        "id": "alive/flatcarousel",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/flatcarousel",
        "href": "alive/flatcarousel"
      },
      "titles": {
        "indexTitle": "FlatCarousel",
        "fullyQualifiedIndexTitle": "Alive.FlatCarousel"
      }
    },
    {
      "id": {
        "id": "alive/flatcarouselpage",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/flatcarouselpage",
        "href": "alive/flatcarouselpage"
      },
      "titles": {
        "indexTitle": "FlatCarouselPage",
        "fullyQualifiedIndexTitle": "Alive.FlatCarouselPage"
      }
    },
    {
      "id": {
        "id": "alive/icon",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/icon",
        "href": "alive/icon"
      },
      "titles": {
        "indexTitle": "Icon",
        "fullyQualifiedIndexTitle": "Alive.Icon"
      }
    },
    {
      "id": {
        "id": "alive/iconlabel",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/iconlabel",
        "href": "alive/iconlabel"
      },
      "titles": {
        "indexTitle": "IconLabel",
        "fullyQualifiedIndexTitle": "Alive.IconLabel"
      }
    },
    {
      "id": {
        "id": "alive/imagefill",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/imagefill",
        "href": "alive/imagefill"
      },
      "titles": {
        "indexTitle": "ImageFill",
        "fullyQualifiedIndexTitle": "Alive.ImageFill"
      }
    },
    {
      "id": {
        "id": "alive/switch/innerswitch",
        "parentId": "alive/switch",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/switch/innerswitch",
        "href": "alive/switch/innerswitch"
      },
      "titles": {
        "indexTitle": "InnerSwitch",
        "fullyQualifiedIndexTitle": "Alive.InnerSwitch"
      }
    },
    {
      "id": {
        "id": "alive/lighttheme",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/lighttheme",
        "href": "alive/lighttheme"
      },
      "titles": {
        "indexTitle": "LightTheme",
        "fullyQualifiedIndexTitle": "Alive.LightTheme"
      }
    },
    {
      "id": {
        "id": "alive/listview",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/listview",
        "href": "alive/listview"
      },
      "titles": {
        "indexTitle": "ListView",
        "fullyQualifiedIndexTitle": "Alive.ListView"
      }
    },
    {
      "id": {
        "id": "alive/listviewheader",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/listviewheader",
        "href": "alive/listviewheader"
      },
      "titles": {
        "indexTitle": "ListViewHeader",
        "fullyQualifiedIndexTitle": "Alive.ListViewHeader"
      }
    },
    {
      "id": {
        "id": "alive/mediascroller",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/mediascroller",
        "href": "alive/mediascroller"
      },
      "titles": {
        "indexTitle": "MediaScroller",
        "fullyQualifiedIndexTitle": "Alive.MediaScroller"
      }
    },
    {
      "id": {
        "id": "alive/mixfunction",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "alive/mixfunction",
        "href": "alive/mixfunction"
      },
      "titles": {
        "indexTitle": "MixFunction",
        "fullyQualifiedIndexTitle": "Alive.MixFunction"
      }
    },
    {
      "id": {
        "id": "alive/navbar",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/navbar",
        "href": "alive/navbar"
      },
      "titles": {
        "indexTitle": "NavBar",
        "fullyQualifiedIndexTitle": "Alive.NavBar"
      }
    },
    {
      "id": {
        "id": "alive/navbartitle",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/navbartitle",
        "href": "alive/navbartitle"
      },
      "titles": {
        "indexTitle": "NavBarTitle",
        "fullyQualifiedIndexTitle": "Alive.NavBarTitle"
      }
    },
    {
      "id": {
        "id": "alive/page",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/page",
        "href": "alive/page"
      },
      "titles": {
        "indexTitle": "Page",
        "fullyQualifiedIndexTitle": "Alive.Page"
      }
    },
    {
      "id": {
        "id": "alive/partialtabpage",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/partialtabpage",
        "href": "alive/partialtabpage"
      },
      "titles": {
        "indexTitle": "PartialTabPage",
        "fullyQualifiedIndexTitle": "Alive.PartialTabPage"
      }
    },
    {
      "id": {
        "id": "alive/radarplot",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/radarplot",
        "href": "alive/radarplot"
      },
      "titles": {
        "indexTitle": "RadarPlot",
        "fullyQualifiedIndexTitle": "Alive.RadarPlot"
      }
    },
    {
      "id": {
        "id": "alive/slider",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/slider",
        "href": "alive/slider"
      },
      "titles": {
        "indexTitle": "Slider",
        "fullyQualifiedIndexTitle": "Alive.Slider"
      }
    },
    {
      "id": {
        "id": "alive/stickinganimation",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/stickinganimation",
        "href": "alive/stickinganimation"
      },
      "titles": {
        "indexTitle": "StickingAnimation",
        "fullyQualifiedIndexTitle": "Alive.StickingAnimation"
      }
    },
    {
      "id": {
        "id": "alive/stickyheader",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/stickyheader",
        "href": "alive/stickyheader"
      },
      "titles": {
        "indexTitle": "StickyHeader",
        "fullyQualifiedIndexTitle": "Alive.StickyHeader"
      }
    },
    {
      "id": {
        "id": "alive/stickyheaderanimation",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/stickyheaderanimation",
        "href": "alive/stickyheaderanimation"
      },
      "titles": {
        "indexTitle": "StickyHeaderAnimation",
        "fullyQualifiedIndexTitle": "Alive.StickyHeaderAnimation"
      }
    },
    {
      "id": {
        "id": "alive/subtitle",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/subtitle",
        "href": "alive/subtitle"
      },
      "titles": {
        "indexTitle": "Subtitle",
        "fullyQualifiedIndexTitle": "Alive.Subtitle"
      }
    },
    {
      "id": {
        "id": "alive/swipeactionconfirmed",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/swipeactionconfirmed",
        "href": "alive/swipeactionconfirmed"
      },
      "titles": {
        "indexTitle": "SwipeActionConfirmed",
        "fullyQualifiedIndexTitle": "Alive.SwipeActionConfirmed"
      }
    },
    {
      "id": {
        "id": "alive/swipeactionpanel",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/swipeactionpanel",
        "href": "alive/swipeactionpanel"
      },
      "titles": {
        "indexTitle": "SwipeActionPanel",
        "fullyQualifiedIndexTitle": "Alive.SwipeActionPanel"
      }
    },
    {
      "id": {
        "id": "alive/switch",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/switch",
        "href": "alive/switch"
      },
      "titles": {
        "indexTitle": "Switch",
        "fullyQualifiedIndexTitle": "Alive.Switch"
      }
    },
    {
      "id": {
        "id": "alive/tabbar",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/tabbar",
        "href": "alive/tabbar"
      },
      "titles": {
        "indexTitle": "TabBar",
        "fullyQualifiedIndexTitle": "Alive.TabBar"
      }
    },
    {
      "id": {
        "id": "alive/tabpage",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/tabpage",
        "href": "alive/tabpage"
      },
      "titles": {
        "indexTitle": "TabPage",
        "fullyQualifiedIndexTitle": "Alive.TabPage"
      }
    },
    {
      "id": {
        "id": "alive/tabpagecontrol",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/tabpagecontrol",
        "href": "alive/tabpagecontrol"
      },
      "titles": {
        "indexTitle": "TabPageControl",
        "fullyQualifiedIndexTitle": "Alive.TabPageControl"
      }
    },
    {
      "id": {
        "id": "alive/carousel/template",
        "parentId": "alive/carousel",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/carousel/template",
        "href": "alive/carousel/template"
      },
      "titles": {
        "indexTitle": "Template",
        "fullyQualifiedIndexTitle": "Alive.Template"
      }
    },
    {
      "id": {
        "id": "alive/flatcarousel/template",
        "parentId": "alive/flatcarousel",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/flatcarousel/template",
        "href": "alive/flatcarousel/template"
      },
      "titles": {
        "indexTitle": "Template",
        "fullyQualifiedIndexTitle": "Alive.Template"
      }
    },
    {
      "id": {
        "id": "alive/flatcarouselpage/template",
        "parentId": "alive/flatcarouselpage",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/flatcarouselpage/template",
        "href": "alive/flatcarouselpage/template"
      },
      "titles": {
        "indexTitle": "Template",
        "fullyQualifiedIndexTitle": "Alive.Template"
      }
    },
    {
      "id": {
        "id": "alive/listview/template",
        "parentId": "alive/listview",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/listview/template",
        "href": "alive/listview/template"
      },
      "titles": {
        "indexTitle": "Template",
        "fullyQualifiedIndexTitle": "Alive.Template"
      }
    },
    {
      "id": {
        "id": "alive/mediascroller/template",
        "parentId": "alive/mediascroller",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/mediascroller/template",
        "href": "alive/mediascroller/template"
      },
      "titles": {
        "indexTitle": "Template",
        "fullyQualifiedIndexTitle": "Alive.Template"
      }
    },
    {
      "id": {
        "id": "alive/radarplot/template",
        "parentId": "alive/radarplot",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/radarplot/template",
        "href": "alive/radarplot/template"
      },
      "titles": {
        "indexTitle": "Template",
        "fullyQualifiedIndexTitle": "Alive.Template"
      }
    },
    {
      "id": {
        "id": "alive/tabbar/template",
        "parentId": "alive/tabbar",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/tabbar/template",
        "href": "alive/tabbar/template"
      },
      "titles": {
        "indexTitle": "Template",
        "fullyQualifiedIndexTitle": "Alive.Template"
      }
    },
    {
      "id": {
        "id": "alive/radarplot/template1",
        "parentId": "alive/radarplot",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/radarplot/template1",
        "href": "alive/radarplot/template1"
      },
      "titles": {
        "indexTitle": "Template1",
        "fullyQualifiedIndexTitle": "Alive.Template1"
      }
    },
    {
      "id": {
        "id": "alive/radarplot/template2",
        "parentId": "alive/radarplot",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/radarplot/template2",
        "href": "alive/radarplot/template2"
      },
      "titles": {
        "indexTitle": "Template2",
        "fullyQualifiedIndexTitle": "Alive.Template2"
      }
    },
    {
      "id": {
        "id": "alive/textstyles",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/textstyles",
        "href": "alive/textstyles"
      },
      "titles": {
        "indexTitle": "TextStyles",
        "fullyQualifiedIndexTitle": "Alive.TextStyles"
      }
    },
    {
      "id": {
        "id": "alive/themebase",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/themebase",
        "href": "alive/themebase"
      },
      "titles": {
        "indexTitle": "ThemeBase",
        "fullyQualifiedIndexTitle": "Alive.ThemeBase"
      }
    },
    {
      "id": {
        "id": "alive/themedcard",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/themedcard",
        "href": "alive/themedcard"
      },
      "titles": {
        "indexTitle": "ThemedCard",
        "fullyQualifiedIndexTitle": "Alive.ThemedCard"
      }
    },
    {
      "id": {
        "id": "alive/title",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/title",
        "href": "alive/title"
      },
      "titles": {
        "indexTitle": "Title",
        "fullyQualifiedIndexTitle": "Alive.Title"
      }
    },
    {
      "id": {
        "id": "alive/titlepanel",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/titlepanel",
        "href": "alive/titlepanel"
      },
      "titles": {
        "indexTitle": "TitlePanel",
        "fullyQualifiedIndexTitle": "Alive.TitlePanel"
      }
    },
    {
      "id": {
        "id": "alive/transparentizefunction",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "alive/transparentizefunction",
        "href": "alive/transparentizefunction"
      },
      "titles": {
        "indexTitle": "TransparentizeFunction",
        "fullyQualifiedIndexTitle": "Alive.TransparentizeFunction"
      }
    },
    {
      "id": {
        "id": "alive/underlinetitle",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "alive/underlinetitle",
        "href": "alive/underlinetitle"
      },
      "titles": {
        "indexTitle": "UnderlineTitle",
        "fullyQualifiedIndexTitle": "Alive.UnderlineTitle"
      }
    },
    {
      "id": {
        "id": "alive/withopacityfunction",
        "parentId": "alive",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "alive/withopacityfunction",
        "href": "alive/withopacityfunction"
      },
      "titles": {
        "indexTitle": "WithOpacityFunction",
        "fullyQualifiedIndexTitle": "Alive.WithOpacityFunction"
      }
    },
    {
      "id": {
        "id": "android/base/types/directbuffer",
        "parentId": "android/base/types",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "android/base/types/directbuffer",
        "href": "android/base/types/directbuffer"
      },
      "titles": {
        "indexTitle": "DirectBuffer",
        "fullyQualifiedIndexTitle": "Android.Base.Types.DirectBuffer"
      }
    },
    {
      "id": {
        "id": "basic/backbutton",
        "parentId": "basic",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "basic/backbutton",
        "href": "basic/backbutton"
      },
      "titles": {
        "indexTitle": "BackButton",
        "fullyQualifiedIndexTitle": "Basic.BackButton"
      }
    },
    {
      "id": {
        "id": "basic/button",
        "parentId": "basic",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "basic/button",
        "href": "basic/button"
      },
      "titles": {
        "indexTitle": "Button",
        "fullyQualifiedIndexTitle": "Basic.Button"
      }
    },
    {
      "id": {
        "id": "basic/navigationbar",
        "parentId": "basic",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "basic/navigationbar",
        "href": "basic/navigationbar"
      },
      "titles": {
        "indexTitle": "NavigationBar",
        "fullyQualifiedIndexTitle": "Basic.NavigationBar"
      }
    },
    {
      "id": {
        "id": "basic/resources",
        "parentId": "basic",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "basic/resources",
        "href": "basic/resources"
      },
      "titles": {
        "indexTitle": "Resources",
        "fullyQualifiedIndexTitle": "Basic.Resources"
      }
    },
    {
      "id": {
        "id": "basic/slider",
        "parentId": "basic",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "basic/slider",
        "href": "basic/slider"
      },
      "titles": {
        "indexTitle": "Slider",
        "fullyQualifiedIndexTitle": "Basic.Slider"
      }
    },
    {
      "id": {
        "id": "basic/switch",
        "parentId": "basic",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "basic/switch",
        "href": "basic/switch"
      },
      "titles": {
        "indexTitle": "Switch",
        "fullyQualifiedIndexTitle": "Basic.Switch"
      }
    },
    {
      "id": {
        "id": "basic/text",
        "parentId": "basic",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "basic/text",
        "href": "basic/text"
      },
      "titles": {
        "indexTitle": "Text",
        "fullyQualifiedIndexTitle": "Basic.Text"
      }
    },
    {
      "id": {
        "id": "basic/textinput",
        "parentId": "basic",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "basic/textinput",
        "href": "basic/textinput"
      },
      "titles": {
        "indexTitle": "TextInput",
        "fullyQualifiedIndexTitle": "Basic.TextInput"
      }
    },
    {
      "id": {
        "id": "experimental/http/httpresponseheader",
        "parentId": "experimental/http",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "experimental/http/httpresponseheader",
        "href": "experimental/http/httpresponseheader"
      },
      "titles": {
        "indexTitle": "HttpResponseHeader",
        "fullyQualifiedIndexTitle": "Experimental.Http.HttpResponseHeader"
      }
    },
    {
      "id": {
        "id": "uno/graphics/framebuffer",
        "parentId": "uno/graphics",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/graphics/framebuffer",
        "href": "uno/graphics/framebuffer"
      },
      "titles": {
        "indexTitle": "framebuffer",
        "fullyQualifiedIndexTitle": "framebuffer"
      }
    },
    {
      "comment": {
        "brief": "Allows placing a node in a different place in the UX tree than the location of this\nbehavior, while keeping the data context from this behavior.",
        "full": "Allows placing a node in a different place in the UX tree than the location of this\nbehavior, while keeping the data context from this behavior.\n\n## Example\n    <Panel ux:Class=\"MyPage\">\n        <Visual ux:Dependency=\"navBar\" />\n        <string ux:Property=\"Content\" />\n        <float4 ux:Property=\"Highlight\" />\n        <Text Alignment=\"Center\" Value=\"{ReadProperty Content}\" />\n        <WhileActive>\n            <AlternateRoot ParentNode=\"navBar\">\n                <Rectangle Color=\"{ReadProperty Highlight}\" />\n            </AlternateRoot>\n        </WhileActive>\n    </Panel>\n\n    <ClientPanel>\n        <Panel ux:Name=\"navBar\" Dock=\"Top\" Height=\"56\" />\n        <PageControl>\n            <MyPage Content=\"Page 1\" Highlight=\"#18f\" navBar=\"navBar\" />\n            <MyPage Content=\"Page 2\" Highlight=\"#1f8\" navBar=\"navBar\" />\n        </PageControl>\n    </ClientPanel>"
      },
      "id": {
        "id": "fuse/alternateroot",
        "parentId": "fuse",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/alternateroot",
        "href": "fuse/alternateroot"
      },
      "titles": {
        "indexTitle": "AlternateRoot",
        "fullyQualifiedIndexTitle": "Fuse.AlternateRoot"
      }
    },
    {
      "id": {
        "id": "fuse/android/rootgraphicsview",
        "parentId": "fuse/android",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/android/rootgraphicsview",
        "href": "fuse/android/rootgraphicsview"
      },
      "titles": {
        "indexTitle": "RootGraphicsView",
        "fullyQualifiedIndexTitle": "Fuse.Android.RootGraphicsView"
      }
    },
    {
      "comment": {
        "brief": "Configures the appearance of the status bar on *Android*.",
        "full": "Configures the appearance of the status bar on *Android*.\n\nTo configure the status bar on *iOS*, see [iOS.StatusBarConfig](api:fuse/ios/statusbarconfig).\n\n> *Note*: This has no effect on Android versions prior to 5.0 (API level 21).\n\n## Example\n\nTo configure the status bar on Android, place an `Android.StatusBarConfig` somewhere in your UX tree.\n\n    <App>\n        <Android.StatusBarConfig Color=\"#0003\" IsVisible=\"True\" />\n\n        <!-- The rest of our app -->\n    </App>\n\nHowever, we usually want to configure the status bar for iOS as well.\nWe'll add an additional [iOS.StatusBarConfig](api:fuse/ios/statusbarconfig).\n\n    <Android.StatusBarConfig Color=\"#0003\" IsVisible=\"True\" />\n    <iOS.StatusBarConfig Style=\"Light\" Animation=\"Slide\" IsVisible=\"True\" />"
      },
      "id": {
        "id": "fuse/android/statusbarconfig",
        "parentId": "fuse/android",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/android/statusbarconfig",
        "href": "fuse/android/statusbarconfig"
      },
      "titles": {
        "indexTitle": "StatusBarConfig",
        "fullyQualifiedIndexTitle": "Fuse.Android.StatusBarConfig"
      }
    },
    {
      "id": {
        "id": "fuse/android/rootgraphicsview/template",
        "parentId": "fuse/android/rootgraphicsview",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/android/rootgraphicsview/template",
        "href": "fuse/android/rootgraphicsview/template"
      },
      "titles": {
        "indexTitle": "Template",
        "fullyQualifiedIndexTitle": "Fuse.Android.Template"
      }
    },
    {
      "comment": {
        "brief": "Animators are used to specify which and how @Elements are to be animated when a @Trigger is triggered.\nThere are three pairs of properties which are important for controlling the exact result of an animation.",
        "full": "Animators are used to specify which and how @Elements are to be animated when a @Trigger is triggered.\nThere are three pairs of properties which are important for controlling the exact result of an animation.\n\n## Example\n\nExamples of animator types are @Change and @Move, as used in this example:\n\n    <Panel ux:Name=\"panel1\" Color=\"Blue\">\n        <WhilePressed>\n            <Change panel1.Color=\"#0f0\" Duration=\"1\" />\n            <Move X=\"100\" Delay=\"1\" Duration=\"1\" />\n        </WhilePressed>\n    </Panel>\n\nWhen the @WhilePressed trigger above is activated when a pointer is pressed on the panel,\nthe animators are played according to their `Delays` and other properties.\n\n## Duration/DurationBack\n\nAnimators are used to animate elements and properties in response to triggers being activated. There are many animators to choose from, all with different purposes. Common animators include @Move, @Rotate, @Scale and @Change. While these animators animate forward on activation and backward on deactivation, some animators, such as @Spin and @Cycle create a continuous looping animation while active.\n\n## Delay/DelayBack\n\nSetting the `Delay` property results in the actual animation being delayed by that amount of seconds. `DelayBack` is used to set a different delay on the backward animation. The total duration of the animation becomes the delay + the duration. The following @Change animator has a total duration of 7 seconds. It waits 5 seconds after being activated and then animates its target element over 2 seconds.\n\n```\n<Change Delay=\"5\" Duration=\"2\" someElement.Height=\"100\"/>\n```\n\n## Easing/EasingBack\n\nFuse comes with a standard set of predefined easing curves. Easing curves are used to control how an animation progresses over time. The default easing is set to `Linear`. With linear easing, the animation progresses at the same speed over its entire duration. This usually appears quite unnatural and fake. To gain a more natural feel, we can change the easing to `QuadraticInOut`, like so:\n\n```\n<Change Easing=\"QuadraticInOut\" Duration=\"2\" someElement.Property=\"SomeValue\"/>\n```\n\nThis animator will progress slowly in the beginning, faster in the middle, and then slow again in the end.\n\n## Track animators\n\n@TrackAnimator classes have a @Duration as well as a defined target\nvalue. Animation can be tweaked further using @Easing curves, or custom @Keyframes\n\n[subclass Fuse.Animations.TrackAnimator]\n\n## Open / looping animators\n\n@OpenAnimators classes have infinite duration, and typically loop or repeate forever while\nactive.\n[subclass Fuse.Animations.OpenAnimator]",
        "attributes": {
          "topic": "Animators"
        }
      },
      "id": {
        "id": "fuse/animations/animator",
        "parentId": "fuse/animations",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/animations/animator",
        "href": "fuse/animations/animator"
      },
      "titles": {
        "indexTitle": "Animator",
        "fullyQualifiedIndexTitle": "Fuse.Animations.Animator"
      }
    },
    {
      "comment": {
        "brief": "Animates the change in a value.",
        "full": "Animates the change in a value.\n\nThe syntax is `attract( value, config )`\n\nThis requires an @AttractorConfig that defines the style of the animation.\n\n# Example\n\n    <AttractorConfig Unit=\"Points\" Easing=\"SinusoidalInOut\" Duration=\"0.3\" ux:Global=\"asPoints\"/>\n\n    <Panel>\n        <Translation X=\"attract({xOffset}, asPoints)\"/>\n    </Panel>\n\nWhere `xOffset` is a context variable."
      },
      "id": {
        "id": "fuse/animations/attract",
        "parentId": "fuse/animations",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/animations/attract",
        "href": "fuse/animations/attract"
      },
      "titles": {
        "indexTitle": "Attract",
        "fullyQualifiedIndexTitle": "Fuse.Animations.Attract"
      }
    },
    {
      "comment": {
        "brief": "Animates a property to a target value using a physics-like attraction simulation.",
        "full": "Animates a property to a target value using a physics-like attraction simulation.\n\nInstead of animating a property directly, an attractors act as an intermediary between an animator\nand its target. It will continuously animate its target towards its `Value` using a simple form\nof physics simulation. We can combine this behavior with animation by animating the attractor's `Value` property.\n\n   <Panel ux:Name=\"somePanel\">\n       <Translation ux:Name=\"someTranslation\"/>\n       <Attractor ux:Name=\"someAttractor\" Target=\"someTranslation.X\"/>\n       <WhilePressed>\n           <Change someAttractor.Value=\"100\"/>\n       </WhilePressed>\n\n   </Panel>"
      },
      "id": {
        "id": "fuse/animations/attractor_1",
        "parentId": "fuse/animations",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/animations/attractor_1",
        "href": "fuse/animations/attractor_1"
      },
      "titles": {
        "indexTitle": "Attractor<T>",
        "fullyQualifiedIndexTitle": "Fuse.Animations.Attractor<T>"
      }
    },
    {
      "comment": {
        "brief": "A configuration for use with the `attract` expression or to an `Attractor` property.",
        "full": "A configuration for use with the `attract` expression or to an `Attractor` property.\n\nA single `AttractorConfig` can be used for multiple `attract` expressions."
      },
      "id": {
        "id": "fuse/animations/attractorconfig",
        "parentId": "fuse/animations",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/animations/attractorconfig",
        "href": "fuse/animations/attractorconfig"
      },
      "titles": {
        "indexTitle": "AttractorConfig",
        "fullyQualifiedIndexTitle": "Fuse.Animations.AttractorConfig"
      }
    },
    {
      "comment": {
        "brief": "Temporarily changes the value of a property while its containing trigger is active. To permanently change a value, use the @Set animator.",
        "full": "Temporarily changes the value of a property while its containing trigger is active. To permanently change a value, use the @Set animator.\n\n**Tip**: You can specify @(Units) with `Value` as long as the unit matches the original unit of the `Target`.\n\nBecause the task of setting a target property and value is so common, UX has a special syntax for this. Instead of\n\n    <Change Target=\"target.Property\" Value=\"Value\"/>\n\none can do the following:\n\n    <Change target.Property=\"Value\"/>\n\n# Example\n\nAs with other animators, you can also specify a `Duration`:\n\n    <Panel ux:Name=\"panel\" Color=\"#000\">\n        <WhilePressed>\n            <Change panel.Color=\"#fff\" Duration=\"0.5\" />\n        </WhilePressed>\n    </Panel>\n\nIf the value is continuous this will result in a continously interpolated change in value.\nIf the value cannot be continuously animated, the value will change discretely."
      },
      "id": {
        "id": "fuse/animations/change_1",
        "parentId": "fuse/animations",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/animations/change_1",
        "href": "fuse/animations/change_1"
      },
      "titles": {
        "indexTitle": "Change<T>",
        "fullyQualifiedIndexTitle": "Fuse.Animations.Change<T>"
      }
    },
    {
      "comment": {
        "brief": "Represents a cubic bezier easing curve.",
        "full": "Represents a cubic bezier easing curve.\n\nA cubic bezier curve is defined by four control points. In an Easing curve, the first control point is fixed at (0,0),\nwhile the last control point is fixed at (1,1) the two remaining control points are configurable.\n\n## Example\n\n    <Rectangle Width=\"100\" Height=\"100\" Color=\"#18f\" CornerRadius=\"10\">\n        <WhilePressed>\n            <Move X=\"100\" Duration=\"0.3\">\n                <CubicBezierEasing ControlPoints=\"0.4, 0.0, 1.0, 1.0\" />\n            </Move>\n        </WhilePressed>\n    </Rectangle>\n\nThe above `CubicBezierEasing` is equivalent to:\n\n    // In iOS\n    [CAMediaTimingFunction alloc] initWithControlPoints:0.4f:0.0f:1.0f:1.0f]\n\n    // In Android\n    FastOutLinearInInterpolator\n\n    // In CSS\n    cubic-bezier(0.4, 0.0, 1, 1);\n\n    // In After Effects\n    Outgoing Velocity: 40%\n    Incoming Velocity: 0%\n\n## Different `Easing` and `EasingBack`\n\nYou can use `ux:Binding` to specify two different easing curves for `Easing` and `EasingBack`:\n\n    <Move X=\"100\" Duration=\"0.3\">\n        <CubicBezierEasing ux:Binding=\"Easing\" ControlPoints=\"0.4, 0.0, 1.0, 1.0\" />\n        <CubicBezierEasing ux:Binding=\"EasingBack\" ControlPoints=\"0.3, 0.0, 0.3, 1.0\" />\n    </Move>\n\n## Creating new global easing functions\n\nYou can use `ux:Global to define a new global easing curve:\n\n    <CubicBezierEasing ux:Global=\"MyStandardEasing\" ControlPoints=\"0.4, 0.0, 1.0, 1.0\" />\n\nAnd then:\n\n    <Move X=\"100\" Duration=\"0.3\" Easing=\"MyStandardEasing\" />"
      },
      "id": {
        "id": "fuse/animations/cubicbeziereasing",
        "parentId": "fuse/animations",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/animations/cubicbeziereasing",
        "href": "fuse/animations/cubicbeziereasing"
      },
      "titles": {
        "indexTitle": "CubicBezierEasing",
        "fullyQualifiedIndexTitle": "Fuse.Animations.CubicBezierEasing"
      }
    },
    {
      "comment": {
        "brief": "Animates a repeating cycle between a high and low value using a given waveform.",
        "full": "Animates a repeating cycle between a high and low value using a given waveform.\n\nThe cycling of the animation continues even when the `Trigger.Progress` reaches 1. When a trigger is deactivated the cycling will play backwards, possibly beyond reaching Progress=1, until it finds a suitable rest state. This ensure that `Cycle` does not produce any jarring switches when the triggers are activated and deactivated.\n\n## Example\n\nThe below example creates a simple pulsing effect on the panel while it is pressed.\n\n    <Panel Color=\"Blue\" ux:Name=\"panel1\" Width=\"100\" Height=\"100\">\n        <WhilePressed>\n            <Cycle Target=\"panel1.Width\" Low=\"80\" High=\"120\" Frequency=\"0.5\"/>\n        </WhilePressed>\n    </Panel>\n\nBy adjusting the `Waveform` you can creates animations that wrap-around instead of bouncing back and forth.\n\n    <Cycle Target=\"panel.X\" Low=\"-100\" High=\"100\" Waveform=\"Triangle\"/>\n\nThe \"wrap-around\" here is simply the nature of the triangular waveform -- the default waveform is sinusoidal.\n\n## Formula\n\nThe properties are defined to be a simple interface, but it may be easier to understand see how they all relate in an expression. Given a current time offset the value of the `Target` is defined roughly as:\n\n    Target.Value = Lerp( Low, High, Easing( Waveform(Time) ) ) * Base + Offset\n\n`Low` and `High` can only be scalar values. `Cycle` checks whether these values cross zero, or one. If they do, it will start at that value, and return to that value when done (this is the default value for `ProgressOffset`). This allows a smooth return to rest state in animation.\n\nModifying `Base` and `Offset` allows you to use `Cycle` with non-scalar values. Though be aware not all combinations of value can provide for a smooth return to the rest state."
      },
      "id": {
        "id": "fuse/animations/cycle_1",
        "parentId": "fuse/animations",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/animations/cycle_1",
        "href": "fuse/animations/cycle_1"
      },
      "titles": {
        "indexTitle": "Cycle<T>",
        "fullyQualifiedIndexTitle": "Fuse.Animations.Cycle<T>"
      }
    },
    {
      "comment": {
        "brief": "Represents an easing function, and contains common easing functions.",
        "full": "Represents an easing function, and contains common easing functions.\n\nEasing functions map an otherwise linear motion into a different curve type,\ntypically desired to make animations look more natural or expressive.\nEasing is available as a property on most animators, such as @Change, @Move,\n@Rotate and @Scale."
      },
      "id": {
        "id": "fuse/animations/easing",
        "parentId": "fuse/animations",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/animations/easing",
        "href": "fuse/animations/easing"
      },
      "titles": {
        "indexTitle": "Easing",
        "fullyQualifiedIndexTitle": "Fuse.Animations.Easing"
      }
    },
    {
      "comment": {
        "brief": "Allows you to specify several steps for an animation.",
        "full": "Allows you to specify several steps for an animation.\n\n# Examples\n\nThe following @(Move) animator will first animate X to 10 over 0.5 second, then from 10 to 15 over 0.5 second. Finally, it will go from an X of 15 to 5 over 1 second.\n\n    <Move RelativeTo=\"ParentSize\">\n        <Keyframe X=\"10\" Time=\"0.5\"/>\n        <Keyframe X=\"15\" Time=\"1\"/>\n        <Keyframe X=\"5\" Time=\"2\"/>\n    </Move>\n\nHere is an example of using @Keyframes with a @(Change) animator:\n    <Page>\n        <SolidColor ux:Name=\"background\" Color=\"#f00\"/>\n        <ActivatingAnimation>\n            <Change Target=\"background.Color\">\n                <Keyframe Value=\"#0f0\" TimeDelta=\"0.25\"/>\n                <Keyframe Value=\"#f00\" TimeDelta=\"0.25\"/>\n                <Keyframe Value=\"#ff0\" TimeDelta=\"0.25\"/>\n                <Keyframe Value=\"#0ff\" TimeDelta=\"0.25\"/>\n            </Change>\n        </ActivatingAnimation>\n    </Page>\n\nThis time we use `TimeDelta` instead of time. With `TimeDelta` we can specify time as a relative term instead of absolute. This means that the order of the @Keyframes matter, but it lets us reason about the keyframes in terms of their duration instead of their absolute time on the timeline.\n\nNote: Despite being a `PropertyObject` the properties in this class are not reactive."
      },
      "id": {
        "id": "fuse/animations/keyframe",
        "parentId": "fuse/animations",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/animations/keyframe",
        "href": "fuse/animations/keyframe"
      },
      "titles": {
        "indexTitle": "Keyframe",
        "fullyQualifiedIndexTitle": "Fuse.Animations.Keyframe"
      }
    },
    {
      "comment": {
        "brief": "Animates the translation a visual element.",
        "full": "Animates the translation a visual element.\n\n`Move` does not affect layout, so the element will just get an offset from its actual location.\n\nExample:\n\n    <WhilePressed>\n        <Move X=\"50\" Duration=\"1\" Easing=\"BackOut\" />\n    </WhilePressed>\n\nWhen pressed, this will move the element by 50 points in the X direction over 1 second, with\na back-out easing curve.\n\n## Relative motion\n\nYou may want for an element to move relative to its own size or some other elements size.\nTo achieve this we can use the @RelativeTo property, for instance:\n\n    <Move X=\"0.5\" RelativeTo=\"Size\" />\n\nThe above line moves the element by 50% of its own size to the right."
      },
      "id": {
        "id": "fuse/animations/move",
        "parentId": "fuse/animations",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/animations/move",
        "href": "fuse/animations/move"
      },
      "titles": {
        "indexTitle": "Move",
        "fullyQualifiedIndexTitle": "Fuse.Animations.Move"
      }
    },
    {
      "comment": {
        "brief": "Allows you to artificially extend the timeline",
        "full": "Allows you to artificially extend the timeline\n\nAll animations for a `Trigger` share a common timeline, which ends when the last animation has completed. In some rare cases, you may want to artificially extend the timeline. This can be done using `Nothing`. Logically, it is a blank animation with a set length, forcing the length of the timeline to be at least the duration of the `Nothing`."
      },
      "id": {
        "id": "fuse/animations/nothing",
        "parentId": "fuse/animations",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/animations/nothing",
        "href": "fuse/animations/nothing"
      },
      "titles": {
        "indexTitle": "Nothing",
        "fullyQualifiedIndexTitle": "Fuse.Animations.Nothing"
      }
    },
    {
      "comment": {
        "brief": "Open animators animate repeatedly for as long as the trigger is active.",
        "full": "Open animators animate repeatedly for as long as the trigger is active.\n\nThe `Duration` and `Delay` specify when this animator is \"on\". This is the time when the animator will be actively applying its effect. Outside of this period the animator is \"off\".  When off the animator will continue playing until it reaches a suitable resting value. This prevents the animation from jerking between values.\n\n## Available open animators\n[subclass Fuse.Animation.OpenAnimator]",
        "attributes": {
          "topic": "Open animators"
        }
      },
      "id": {
        "id": "fuse/animations/openanimator",
        "parentId": "fuse/animations",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/animations/openanimator",
        "href": "fuse/animations/openanimator"
      },
      "titles": {
        "indexTitle": "OpenAnimator",
        "fullyQualifiedIndexTitle": "Fuse.Animations.OpenAnimator"
      }
    },
    {
      "comment": {
        "brief": "Changes the range of an animation.",
        "full": "Changes the range of an animation.\n\nThis allows finer control over animations such as `Timeline` and `..Animation`triggers.\n\n# Example\nIn the following example, a rotation of 90 degrees will be adapted into a rotation of 45 degrees by using a `RangeAdapter` to change the range our `WhilePressed` trigger:\n\n    <Panel Alignment=\"Center\" Width=\"200\" Height=\"200\">\n        <Rectangle Color=\"#2196F3\" CornerRadius=\"5\" />\n        <Timeline ux:Name=\"rotationTimeline\">\n            <Rotate DegreesZ=\"90\" Duration=\"1\"/>\n        </Timeline>\n        <RangeAdapter ux:Name=\"range\" Source=\"rotationTimeline.Progress\" SourceRangeMax=\".5\" SourceRangeMin=\"0\" />\n        <WhilePressed>\n            <Change range.Value=\"1\" Duration=\"1\"/>\n        </WhilePressed>\n    </Panel>"
      },
      "id": {
        "id": "fuse/animations/rangeadapter_1",
        "parentId": "fuse/animations",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/animations/rangeadapter_1",
        "href": "fuse/animations/rangeadapter_1"
      },
      "titles": {
        "indexTitle": "RangeAdapter<T>",
        "fullyQualifiedIndexTitle": "Fuse.Animations.RangeAdapter<T>"
      }
    },
    {
      "comment": {
        "brief": "An @Animator that changes the size of an @Element.",
        "full": "An @Animator that changes the size of an @Element.\n\nThis is typically used as part of a @LayoutAnimation.\n\nThe size is considered a temporary size for the element, not it's true intended size. When the animator is disabled the natural size will be restored.\n\n# Example\n\n    <Panel>\n        <LayoutAnimation>\n            <Resize RelativeTo=\"SizeChange\" Duration=\"1\" Vector=\"1\"/>\n            <Move RelativeTo=\"PositionChange\" Duration=\"1\" Vector=\"1\"/>\n        </LayoutAnimation>\n    </Panel>"
      },
      "id": {
        "id": "fuse/animations/resize",
        "parentId": "fuse/animations",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/animations/resize",
        "href": "fuse/animations/resize"
      },
      "titles": {
        "indexTitle": "Resize",
        "fullyQualifiedIndexTitle": "Fuse.Animations.Resize"
      }
    },
    {
      "comment": {
        "brief": "Rotates the Visual. This does the same transform as @Rotation.",
        "full": "Rotates the Visual. This does the same transform as @Rotation.\n\nThe standard units for angle are radians. Use the `Degrees...` properties to specify in degrees.\n\n# Example\nThis example rotates a panel while the mouse pointer hovers over it\n\n    <Panel>\n        <WhileHovering>\n            <Rotate Degrees=\"90\" Duration=\"0.5\"/>\n        </WhileHovering>\n    </Panel>"
      },
      "id": {
        "id": "fuse/animations/rotate",
        "parentId": "fuse/animations",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/animations/rotate",
        "href": "fuse/animations/rotate"
      },
      "titles": {
        "indexTitle": "Rotate",
        "fullyQualifiedIndexTitle": "Fuse.Animations.Rotate"
      }
    },
    {
      "comment": {
        "brief": "Scales the element. Note that scale doesn't actually change the elements size. This means that the rest of the UI layout wont be affected and the animation is guaranteed to be fast.",
        "full": "Scales the element. Note that scale doesn't actually change the elements size. This means that the rest of the UI layout wont be affected and the animation is guaranteed to be fast.\n\nYou can scale an element uniformly along all axes by using the `Factor` property. Alternatively, you can also scale on a per-axis basis using `Vector` or `X`, `Y`, and `Z`.\n\n**Tip**: You can use `Scale` relative to something using the `RelativeTo` property. The two choices are:\n\n* `SizeChange` - scales relative to the change in size of the element specified by the `RelativeNode` property.\n* `SizeFactor` - scales with a factor relative to another element, specified by `RelativeNode`. A factor of `1` would make it the same size as the `RelativeNode`, while a factor of `0.5` would make it half the size, and so on.\n\n# Example\nThe following example scales a rectangle when it is being pressed\n\n    <Rectangle>\n        <WhilePressed>\n            <Scale Factor=\"2\" Duration=\"0.4\"/>\n        </WhilePressed>\n    </Rectangle>"
      },
      "id": {
        "id": "fuse/animations/scale",
        "parentId": "fuse/animations",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/animations/scale",
        "href": "fuse/animations/scale"
      },
      "titles": {
        "indexTitle": "Scale",
        "fullyQualifiedIndexTitle": "Fuse.Animations.Scale"
      }
    },
    {
      "comment": {
        "brief": "Allows you to animate a skew transform on an element.",
        "full": "Allows you to animate a skew transform on an element.\n\n# Example\nThis example animates a skew on a panel as it is being pressed\n\n    <Panel Background=\"#F00\">\n        <WhilePressed>\n            <Skew DegreesX=\"30\" Duration=\"0.4\"/>\n        </WhilePressed>\n    </Panel>"
      },
      "id": {
        "id": "fuse/animations/skew",
        "parentId": "fuse/animations",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/animations/skew",
        "href": "fuse/animations/skew"
      },
      "titles": {
        "indexTitle": "Skew",
        "fullyQualifiedIndexTitle": "Fuse.Animations.Skew"
      }
    },
    {
      "comment": {
        "brief": "Continuously rotates an element, given a `Frequency` measured in full rotations per second.",
        "full": "Continuously rotates an element, given a `Frequency` measured in full rotations per second.\n\n    <Panel>\n    <WhilePressed>\n        <Spin Frequency=\"2\" />\n    </WhilePressed>\n    </Panel>\n\nAs with @(Cycle), you may also specify a `Duration` to control the length of the animation."
      },
      "id": {
        "id": "fuse/animations/spin",
        "parentId": "fuse/animations",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/animations/spin",
        "href": "fuse/animations/spin"
      },
      "titles": {
        "indexTitle": "Spin",
        "fullyQualifiedIndexTitle": "Fuse.Animations.Spin"
      }
    },
    {
      "comment": {
        "brief": "Track animators animate to a specific target value over a fixed duration.",
        "full": "Track animators animate to a specific target value over a fixed duration.\n\nThe `...Back` parameters implicitly create a backwards timeline. The second timeline has it's own duration, and all properties and then specified in that timeline. This backwards timeline is for all of the animators, not just the ones with a `...Back` property specified. This is important for understanding how the timing works in complex scenarios.\n\nTracks can be a continuous (like a floating point value), discrete (like an enum value), or a spline track. This is specified implicitly based on the properties used. Note that some properties only have effects with certain track types.\n\n[subclass Fuse.Animation.TrackAnimator]",
        "attributes": {
          "topic": "Track animators"
        }
      },
      "id": {
        "id": "fuse/animations/trackanimator",
        "parentId": "fuse/animations",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/animations/trackanimator",
        "href": "fuse/animations/trackanimator"
      },
      "titles": {
        "indexTitle": "TrackAnimator",
        "fullyQualifiedIndexTitle": "Fuse.Animations.TrackAnimator"
      }
    },
    {
      "comment": {
        "brief": "Transform animators animate the translation, rotation or scaling of a visual.",
        "full": "Transform animators animate the translation, rotation or scaling of a visual.\n\nTransform animators do not affect the layout of an @Element, instead it animates relative to\nthe result of layout. This means transform animators are very fast and are appropriate for\nreal-time transitions.\n\n## Available transform animators\n\n[subclass Fuse.Animations.TransformAnimator]",
        "attributes": {
          "topic": "Transform animators"
        }
      },
      "id": {
        "id": "fuse/animations/transformanimator_1",
        "parentId": "fuse/animations",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/animations/transformanimator_1",
        "href": "fuse/animations/transformanimator_1"
      },
      "titles": {
        "indexTitle": "TransformAnimator<TransformType>",
        "fullyQualifiedIndexTitle": "Fuse.Animations.TransformAnimator<TransformType>"
      }
    },
    {
      "comment": {
        "brief": "Defines the animation used by a @Trigger.",
        "full": "Defines the animation used by a @Trigger.\n\nA @Trigger has an implicit `TriggerAnimation`; you can add animators directly to the trigger. Using a `TriggerAnimation` is typically only used if a different backwards animation is required that cannot be achieved using the various `...Back` properties of the @Animator."
      },
      "id": {
        "id": "fuse/animations/triggeranimation",
        "parentId": "fuse/animations",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/animations/triggeranimation",
        "href": "fuse/animations/triggeranimation"
      },
      "titles": {
        "indexTitle": "TriggerAnimation",
        "fullyQualifiedIndexTitle": "Fuse.Animations.TriggerAnimation"
      }
    },
    {
      "comment": {
        "brief": "Base class for apps.\nA Fuse project should contain exactly one `App` tag, which is the root\nnode for the entire application.",
        "full": "Base class for apps.\nA Fuse project should contain exactly one `App` tag, which is the root\nnode for the entire application."
      },
      "id": {
        "id": "fuse/app",
        "parentId": "fuse",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/app",
        "href": "fuse/app"
      },
      "titles": {
        "indexTitle": "App",
        "fullyQualifiedIndexTitle": "Fuse.App"
      }
    },
    {
      "comment": {
        "brief": "Base class for Fuse @Apps.\nThis class contains implementation and interface that is common between all platforms. You\nonly need to derive from this class when adding support for a new platform.\nFuse already provides derived classes for each supported platform, all of them named @App, that you\nshould use as base class when creating an app for an already supported platform.",
        "full": "Base class for Fuse @Apps.\nThis class contains implementation and interface that is common between all platforms. You\nonly need to derive from this class when adding support for a new platform.\nFuse already provides derived classes for each supported platform, all of them named @App, that you\nshould use as base class when creating an app for an already supported platform."
      },
      "id": {
        "id": "fuse/appbase",
        "parentId": "fuse",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/appbase",
        "href": "fuse/appbase"
      },
      "titles": {
        "indexTitle": "AppBase",
        "fullyQualifiedIndexTitle": "Fuse.AppBase"
      }
    },
    {
      "comment": {
        "brief": "Base class for UX nodes without visual appearance.",
        "full": "Base class for UX nodes without visual appearance."
      },
      "id": {
        "id": "fuse/behavior",
        "parentId": "fuse",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/behavior",
        "href": "fuse/behavior"
      },
      "titles": {
        "indexTitle": "Behavior",
        "fullyQualifiedIndexTitle": "Fuse.Behavior"
      }
    },
    {
      "comment": {
        "brief": "Base class for binding classes that provide data for a @Node properties.",
        "full": "Base class for binding classes that provide data for a @Node properties."
      },
      "id": {
        "id": "fuse/binding",
        "parentId": "fuse",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/binding",
        "href": "fuse/binding"
      },
      "titles": {
        "indexTitle": "Binding",
        "fullyQualifiedIndexTitle": "Fuse.Binding"
      }
    },
    {
      "comment": {
        "brief": "Provides a source of data for plotting.",
        "full": "Provides a source of data for plotting."
      },
      "id": {
        "id": "fuse/charting/dataseries",
        "parentId": "fuse/charting",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/charting/dataseries",
        "href": "fuse/charting/dataseries"
      },
      "titles": {
        "indexTitle": "DataSeries",
        "fullyQualifiedIndexTitle": "Fuse.Charting.DataSeries"
      }
    },
    {
      "comment": {
        "brief": "A panel that contains a chart.",
        "full": "A panel that contains a chart."
      },
      "id": {
        "id": "fuse/charting/plot",
        "parentId": "fuse/charting",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/charting/plot",
        "href": "fuse/charting/plot"
      },
      "titles": {
        "indexTitle": "Plot",
        "fullyQualifiedIndexTitle": "Fuse.Charting.Plot"
      }
    },
    {
      "comment": {
        "brief": "Controls the size-related aspects of the Plot to create a responsive layout.",
        "full": "Controls the size-related aspects of the Plot to create a responsive layout.\n\nThis is placed within the element where the primary plot data will actually be drawn. It adjusts the properties of the plot based on the available size."
      },
      "id": {
        "id": "fuse/charting/plotarea",
        "parentId": "fuse/charting",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/charting/plotarea",
        "href": "fuse/charting/plotarea"
      },
      "titles": {
        "indexTitle": "PlotArea",
        "fullyQualifiedIndexTitle": "Fuse.Charting.PlotArea"
      }
    },
    {
      "comment": {
        "brief": "A layout and enumeration for the axis steps of a @Plot, which is used to place labels on axes. Often used together with a @(GridLayout) for positioning.",
        "full": "A layout and enumeration for the axis steps of a @Plot, which is used to place labels on axes. Often used together with a @(GridLayout) for positioning.\n\n# Example\n\nThe following example places labels on the y-axis of a bar chart.\n\n    <Panel xmlns:c=\"Fuse.Charting\" >\n        <JavaScript>\n            var Observable = require(\"FuseJS/Observable\");\n\n            function Item(val) {\n                this.value = val;\n            }\n            var data = Observable(new Item(3), new Item(4), new Item(6), new Item(3), new Item(4));\n\n            module.exports = {\n                data: data\n            }\n        </JavaScript>\n        <Panel BoxSizing=\"FillAspect\" Aspect=\"1\">\n            <c:Plot Margin=\"40\">\n                <GridLayout Rows=\"1*,40\" Columns=\"40,1*\"/>\n                <c:DataSeries Data=\"{data}\" />\n                <c:PlotAxis Row=\"0\" Column=\"0\" Axis=\"Y\">\n                    <Text ux:Template=\"Label\" Alignment=\"Center\" FontSize=\"14\" Color=\"#666\"\n                        Value=\"{Plot axis.value}\"/>\n                </c:PlotAxis>\n                <c:PlotData>\n                    <c:PlotBar Row=\"0\" Column=\"1\">\n                        <Rectangle Color=\"#F00\" Height=\"100%\" Margin=\"2\" Alignment=\"Bottom\"/>\n                    </c:PlotBar>\n                </c:PlotData>\n            </c:Plot>\n        </Panel>\n    </Panel>"
      },
      "id": {
        "id": "fuse/charting/plotaxis",
        "parentId": "fuse/charting",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/charting/plotaxis",
        "href": "fuse/charting/plotaxis"
      },
      "titles": {
        "indexTitle": "PlotAxis",
        "fullyQualifiedIndexTitle": "Fuse.Charting.PlotAxis"
      }
    },
    {
      "comment": {
        "brief": "Iterates over the axis steps/data.",
        "full": "Iterates over the axis steps/data.\n\nThis example places rotated labels at each tick. Though note this simple layout can be achieved easier just using `PlotAxis` instead.\n\n    <c:PlotAxisData Axis=\"X\">\n        <Text X=\"{Plot axis.position} * 100%\" Y=\"0\" FontSize=\"18\" Color=\"#000\"\n            Value=\"{Plot axis.label}\" Anchor=\"105%,45%\" TransformOrigin=\"Anchor\" ux:Name=\"t\">\n            <Rotation Degrees=\"-60\"/>\n        </Text>\n    </c:PlotAxisData>"
      },
      "id": {
        "id": "fuse/charting/plotaxisdata",
        "parentId": "fuse/charting",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/charting/plotaxisdata",
        "href": "fuse/charting/plotaxisdata"
      },
      "titles": {
        "indexTitle": "PlotAxisData",
        "fullyQualifiedIndexTitle": "Fuse.Charting.PlotAxisData"
      }
    },
    {
      "comment": {
        "brief": "Positions elements along an axis' tick locations.",
        "full": "Positions elements along an axis' tick locations.\n\nConsider using @PlotAxis instead to provide labels for the plot. It will use this layout.",
        "attributes": {
          "advanced": true
        }
      },
      "id": {
        "id": "fuse/charting/plotaxislayout",
        "parentId": "fuse/charting",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/charting/plotaxislayout",
        "href": "fuse/charting/plotaxislayout"
      },
      "titles": {
        "indexTitle": "PlotAxisLayout",
        "fullyQualifiedIndexTitle": "Fuse.Charting.PlotAxisLayout"
      }
    },
    {
      "comment": {
        "brief": "Positions a plot bar.",
        "full": "Positions a plot bar.\n\nThis automatically sets the `X`,`Y`,`Width`,`Heigth` and `Anchor` properties on the element. The result is undefined if you override one of these values. Use a child element if you wish to make an element relative to the PlotBar placement.\n\n# Example\n\nThe following example draws a red bar chart using the `PlotBar` element and @Rectangle\n\n    <Panel xmlns:c=\"Fuse.Charting\" >\n        <JavaScript>\n            var Observable = require(\"FuseJS/Observable\");\n\n            function Item(val) {\n                this.value = val;\n            }\n            var data = Observable(new Item(3), new Item(4), new Item(6), new Item(3), new Item(4));\n\n            module.exports = {\n                data: data\n            }\n        </JavaScript>\n        <Panel BoxSizing=\"FillAspect\" Aspect=\"1\">\n            <c:Plot Margin=\"40\">\n                <c:DataSeries Data=\"{data}\" />\n                <c:PlotData>\n                    <c:PlotBar>\n                        <Rectangle Color=\"#F00\" Height=\"100%\" Margin=\"2\" Alignment=\"Bottom\"/>\n                    </c:PlotBar>\n                </c:PlotData>\n            </c:Plot>\n        </Panel>\n    </Panel>"
      },
      "id": {
        "id": "fuse/charting/plotbar",
        "parentId": "fuse/charting",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/charting/plotbar",
        "href": "fuse/charting/plotbar"
      },
      "titles": {
        "indexTitle": "PlotBar",
        "fullyQualifiedIndexTitle": "Fuse.Charting.PlotBar"
      }
    },
    {
      "comment": {
        "brief": "Convenience wrapper for platting CurvePoint's in a plot.",
        "full": "Convenience wrapper for platting CurvePoint's in a plot.\n\nThis shares most of the functionality of `PlotPoint` except creates a `CurvePoint` suitable for a `Curve.\n\n# Example\n\nThis example demonstrates a simple line graph built using `PlotCurvePoint`\n\n    <Panel xmlns:c=\"Fuse.Charting\" >\n        <JavaScript>\n            var Observable = require(\"FuseJS/Observable\");\n\n            function Item(val) {\n                this.value = val;\n            }\n            var data = Observable(new Item(3), new Item(4), new Item(6), new Item(0), new Item(4));\n\n            module.exports = {\n                data: data\n            }\n        </JavaScript>\n        <Panel BoxSizing=\"FillAspect\" Aspect=\"1\" >\n            <c:Plot >\n                <c:DataSeries Data=\"{data}\" />\n                <Curve StrokeWidth=\"5\" StrokeColor=\"#008\" >\n                    <c:PlotData>\n                        <c:PlotCurvePoint/>\n                    </c:PlotData>\n                </Curve>\n            </c:Plot>\n        </Panel>\n    </Panel>"
      },
      "id": {
        "id": "fuse/charting/plotcurvepoint",
        "parentId": "fuse/charting",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/charting/plotcurvepoint",
        "href": "fuse/charting/plotcurvepoint"
      },
      "titles": {
        "indexTitle": "PlotCurvePoint",
        "fullyQualifiedIndexTitle": "Fuse.Charting.PlotCurvePoint"
      }
    },
    {
      "comment": {
        "brief": "Iterator for visual plot data.",
        "full": "Iterator for visual plot data.\n\nThis works like an @Each for the visible data points. Use a @PlotBar or  @PlotCurvePoint to add elements matching this data. Or use a `{Plot data.*}` to get at the variables for the data point.\n\n    <Panel>\n        <c:PlotData>\n            <c:PlotBar/>\n        </c:PlotData>\n    </Panel>\n\n    <Curve>\n        <c:PlotData>\n            <c:PlotCurvePoint/>\n        </c:PlotData>\n    </Curve>"
      },
      "id": {
        "id": "fuse/charting/plotdata",
        "parentId": "fuse/charting",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/charting/plotdata",
        "href": "fuse/charting/plotdata"
      },
      "titles": {
        "indexTitle": "PlotData",
        "fullyQualifiedIndexTitle": "Fuse.Charting.PlotData"
      }
    },
    {
      "comment": {
        "brief": "Common base for plot positioned elements.",
        "full": "Common base for plot positioned elements."
      },
      "id": {
        "id": "fuse/charting/plotelement",
        "parentId": "fuse/charting",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/charting/plotelement",
        "href": "fuse/charting/plotelement"
      },
      "titles": {
        "indexTitle": "PlotElement",
        "fullyQualifiedIndexTitle": "Fuse.Charting.PlotElement"
      }
    },
    {
      "comment": {
        "brief": "Used to access information about the plot.",
        "full": "Used to access information about the plot.\n\nThe prefix `data.` is used within a @PlotData to access the values of the individual points on the plot.\n\nThe prefix `axis.` is used within a @PlotAxis to access the values of axis.\n\nUnprefixed values access values in the @Plot"
      },
      "id": {
        "id": "fuse/charting/plotexpression",
        "parentId": "fuse/charting",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/charting/plotexpression",
        "href": "fuse/charting/plotexpression"
      },
      "titles": {
        "indexTitle": "PlotExpression",
        "fullyQualifiedIndexTitle": "Fuse.Charting.PlotExpression"
      }
    },
    {
      "comment": {
        "brief": "A `Panel` positioned on the data point for a chart. This is an easy way to position an object at the correct position for the current plot data.",
        "full": "A `Panel` positioned on the data point for a chart. This is an easy way to position an object at the correct position for the current plot data.\n\nThis panel has a default of `Anchor=\"50%,50%\"`.  This can be changed with `PointAnchor`\n\nThis panel does not have any default size."
      },
      "id": {
        "id": "fuse/charting/plotpoint",
        "parentId": "fuse/charting",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/charting/plotpoint",
        "href": "fuse/charting/plotpoint"
      },
      "titles": {
        "indexTitle": "PlotPoint",
        "fullyQualifiedIndexTitle": "Fuse.Charting.PlotPoint"
      }
    },
    {
      "comment": {
        "brief": "Creates tick marks, usually for an axis. This is a @Shape, allowing `Stroke...` properties to be used for drawing the ticks.  The ticks that are drawn will line up with the labels of @PlotAxis provided they are the same element size (either `Width` or `Height` depending on the axis).",
        "full": "Creates tick marks, usually for an axis. This is a @Shape, allowing `Stroke...` properties to be used for drawing the ticks.  The ticks that are drawn will line up with the labels of @PlotAxis provided they are the same element size (either `Width` or `Height` depending on the axis).\n\n# Example\n\nThe following example shows `PlotTicks` being used to draw lines on the x-axis of a bar chart.\n\n    <Panel xmlns:c=\"Fuse.Charting\" >\n        <JavaScript>\n            var Observable = require(\"FuseJS/Observable\");\n\n            function Item(val) {\n                this.value = val;\n            }\n            var data = Observable(new Item(3), new Item(4), new Item(6), new Item(3), new Item(4));\n\n            module.exports = {\n                data: data\n            }\n        </JavaScript>\n        <Panel BoxSizing=\"FillAspect\" Aspect=\"1\">\n            <c:Plot Margin=\"40\">\n                <GridLayout Rows=\"1*,40\" Columns=\"40,1*\"/>\n                <c:DataSeries Data=\"{data}\" />\n                <c:PlotData>\n                    <c:PlotBar Row=\"0\" Column=\"1\">\n                        <Rectangle Color=\"#F00\" Height=\"100%\" Margin=\"2\" Alignment=\"Bottom\"/>\n                    </c:PlotBar>\n                </c:PlotData>\n                <c:PlotTicks Axis=\"Y\" StrokeWidth=\"1\" StrokeColor=\"#555\" Row=\"0\" Column=\"1\" />\n            </c:Plot>\n        </Panel>\n    </Panel>\n\n`AxisLine` indicates a line across the entire access should be drawn at this offset. In this example it's the top of the ticks, making this suitable for the bottom of a chart."
      },
      "id": {
        "id": "fuse/charting/plotticks",
        "parentId": "fuse/charting",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/charting/plotticks",
        "href": "fuse/charting/plotticks"
      },
      "titles": {
        "indexTitle": "PlotTicks",
        "fullyQualifiedIndexTitle": "Fuse.Charting.PlotTicks"
      }
    },
    {
      "comment": {
        "brief": "Creates a wedge shape for a pie chart.",
        "full": "Creates a wedge shape for a pie chart.\n\nThis sets the `StartAngle` and `EndAngle` of the base `Ellipse` class. You should not override this properties, though other `Ellipse` and `Shape` properties are okay.\n\n    <Panel BoxSizing=\"FillAspect\" Aspect=\"1\">\n        <c:PlotData>\n            <c:PlotWedge StrokeColor=\"#000\" StrokeWidth=\"2\">\n        </c:PlotData>\n    </Panel>"
      },
      "id": {
        "id": "fuse/charting/plotwedge",
        "parentId": "fuse/charting",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/charting/plotwedge",
        "href": "fuse/charting/plotwedge"
      },
      "titles": {
        "indexTitle": "PlotWedge",
        "fullyQualifiedIndexTitle": "Fuse.Charting.PlotWedge"
      }
    },
    {
      "id": {
        "id": "fuse/computeexception",
        "parentId": "fuse",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/computeexception",
        "href": "fuse/computeexception"
      },
      "titles": {
        "indexTitle": "ComputeException",
        "fullyQualifiedIndexTitle": "Fuse.ComputeException"
      }
    },
    {
      "comment": {
        "brief": "Displays an arc.",
        "full": "Displays an arc.\n\nArc is a @Shape that can have @Strokes. An Arc is equivalent to a stroke on the circumference of an @Ellipse (an Arc has no lines to/from the center as a stroke on the @Ellipse would have).\n\nIt is undefined what shape is filled if a `Fill` is used on an Arc. Use only a stroke."
      },
      "id": {
        "id": "fuse/controls/arc",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/arc",
        "href": "fuse/controls/arc"
      },
      "titles": {
        "indexTitle": "Arc",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Arc"
      }
    },
    {
      "comment": {
        "brief": "Displays a backbutton",
        "full": "Displays a backbutton\n\nOnly the semantic control for backbutton. Refer to @Navigation and @GoBack for how\nto use it in navigation.\n\n## Example:\n\n    <BackButton>\n        <Clicked>\n            <GoBack />\n        </Clicked>\n    </BackButton>"
      },
      "id": {
        "id": "fuse/controls/backbutton",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/backbutton",
        "href": "fuse/controls/backbutton"
      },
      "titles": {
        "indexTitle": "BackButton",
        "fullyQualifiedIndexTitle": "Fuse.Controls.BackButton"
      }
    },
    {
      "comment": {
        "brief": "Compensates for space taken up by the keyboard and other OS-specific elements at the bottom of the screen.",
        "full": "Compensates for space taken up by the keyboard and other OS-specific elements at the bottom of the screen.\n\nSimilar to the @StatusBarBackground in that it takes on the same size as certain OS-specific elements.\nThe `BottomBarBackground` will take on the same size as the keyboard (whenever it is visible).\nCertain Android devices have their home button on the screen instead of as a physical button.\nThe `BottomBarBackground` will also take this into account when sizing itself.\n\n## Example\n\nThe following example demonstrates how a `BottomBarBackground` can be docked inside a `DockPanel` to ensure the rest of the app's content (inside by the `Panel`) will be placed above the bottom bar.\n\n    <DockPanel>\n        <BottomBarBackground Dock=\"Bottom\" />\n        <Panel>\n            <Text>This text will be above the bottom bar</Text>\n        </Panel>\n    </DockPanel>\n\nYou also have the option to not take the size of the keyboard into account:\n\n    <BottomBarBackground IncludesKeyboard=\"false\" />"
      },
      "id": {
        "id": "fuse/controls/bottombarbackground",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/bottombarbackground",
        "href": "fuse/controls/bottombarbackground"
      },
      "titles": {
        "indexTitle": "BottomBarBackground",
        "fullyQualifiedIndexTitle": "Fuse.Controls.BottomBarBackground"
      }
    },
    {
      "id": {
        "id": "fuse/controls/bottomframebackground",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/bottomframebackground",
        "href": "fuse/controls/bottomframebackground"
      },
      "titles": {
        "indexTitle": "BottomFrameBackground",
        "fullyQualifiedIndexTitle": "Fuse.Controls.BottomFrameBackground"
      }
    },
    {
      "comment": {
        "brief": "Displays a button",
        "full": "Displays a button\n\nThe default button in Fuse. Its appearance is transparent with blue text.\nTo change the look or to create a semantically specific button, create a Subclass of this Class.\nPlease note that when used inside a @NativeViewHost, this button will have the platform native appearance\nwhich might need additional styling to make it visible. For example, on iOS the default native appearance of a\nbutton is blue text on white.\n\n## Examples\n\nBy default, `Button` is drawn as blue text over a transparent background.\n\n    <Button Text=\"Click me\" />\n\nHowever, Button can also be used to render the *platform native* button control whenever possible.\nThis is done by wrapping the Button in a @NativeViewHost, as shown below.\n\n    <NativeViewHost>\n        <Button Text=\"Native button\" />\n    </NativeViewHost>\n\nHowever, we usually want a button with our own look and feel.\nIn this case, it is recommended to subclass @Panel rather than Button.\nSince you can attach a `Clicked` handler to any element, using a @Panel as the base class offers a\ngreat deal of flexibility, while removing a lot of the unnecessary complexity of the actual Button class.\n\nBelow is an example of creating your own button control with @Panel:\n\n    <Panel ux:Class=\"MyButton\" HitTestMode=\"LocalBounds\" Margin=\"4\" Color=\"#25a\">\n        <string ux:Property=\"Text\" />\n        <Text Value=\"{ReadProperty Text}\" Color=\"#fff\" Alignment=\"Center\" Margin=\"30,15\" />\n\n        <WhilePressed>\n            <Change this.Color=\"#138\" Duration=\"0.05\" DurationBack=\".2\" />\n        </WhilePressed>\n    </Panel>\n\n    <MyButton Text=\"Click me\" />\n\nHowever, if you want a *platform native button* that falls back to a custom look on non-mobile devices,\nyou have to subclass `Button`.\n\n    <Button ux:Class=\"MyNativeButtonWithFallback\" Margin=\"2\">\n        <Panel ux:Template=\"GraphicsAppearance\" HitTestMode=\"LocalBounds\">\n            <Text Value=\"{ReadProperty Text}\" Color=\"#fff\" Alignment=\"Center\" TextAlignment=\"Center\" Margin=\"10\" />\n            <Rectangle CornerRadius=\"4\" Layer=\"Background\" Color=\"#25a\" />\n        </Panel>\n    </Button>\n\nWhen placed in a @NativeViewHost, the Button will attempt to initialize a *native* button control.\nIf this is not possible (e.g. if it's running on desktop), it will fall back to the template specified\nby `ux:Template=\"GraphicsAppearance\"`.`\n\n    <NativeViewHost>\n        <!-- Will be native if possible -->\n        <MyNativeButtonWithFallback Text=\"Some button\" />\n    </NativeViewHost>\n\nIf we *don't* place the Button inside a @NativeViewHost,\nthe `GraphicsAppearance` template will always be used to draw the button.\n\n    <MyNativeButtonWithFallback />"
      },
      "id": {
        "id": "fuse/controls/button",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/button",
        "href": "fuse/controls/button"
      },
      "titles": {
        "indexTitle": "Button",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Button"
      }
    },
    {
      "comment": {
        "brief": "Baseclass for buttons",
        "full": "Baseclass for buttons\n\nButtonBase is the undecorated baseclass for buttons in fuse. Can be used to make\nux classes for buttons that has text.\n\n## Example:\n\n    <ButtonBase ux:Class=\"GradientButton\" Margin=\"2\">\n        <Text ux:Name=\"Button_Text\" Value=\"{ReadProperty this.Text}\" Color=\"#000\" Alignment=\"Center\" TextAlignment=\"Center\" Margin=\"10\" />\n        <Rectangle CornerRadius=\"4\" Layer=\"Background\">\n            <LinearGradient>\n                <GradientStop Offset=\"0\" Color=\"#0fc\" />\n                <GradientStop Offset=\"1\" Color=\"#0cf\" />\n            </LinearGradient>\n        </Rectangle>\n    </ButtonBase>"
      },
      "id": {
        "id": "fuse/controls/buttonbase",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/buttonbase",
        "href": "fuse/controls/buttonbase"
      },
      "titles": {
        "indexTitle": "ButtonBase",
        "fullyQualifiedIndexTitle": "Fuse.Controls.ButtonBase"
      }
    },
    {
      "id": {
        "id": "fuse/controls/camerainfo",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/camerainfo",
        "href": "fuse/controls/camerainfo"
      },
      "titles": {
        "indexTitle": "CameraInfo",
        "fullyQualifiedIndexTitle": "Fuse.Controls.CameraInfo"
      }
    },
    {
      "id": {
        "id": "fuse/controls/cameraview",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/cameraview",
        "href": "fuse/controls/cameraview"
      },
      "titles": {
        "indexTitle": "CameraView",
        "fullyQualifiedIndexTitle": "Fuse.Controls.CameraView"
      }
    },
    {
      "comment": {
        "brief": "This package provides a cross-platform abstraction over the native camera APIs on Android and iOS. In order to use this package you must add a reference to `Fuse.Controls.CameraView` in your `unoproj`.",
        "full": "This package provides a cross-platform abstraction over the native camera APIs on Android and iOS. In order to use this package you must add a reference to `Fuse.Controls.CameraView` in your `unoproj`.\n\nThe `CameraView` API is mostly exposed as a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) based API in JavaScript. Lets have a look at how to get up and running:\n\n```\n<DockPanel>\n    <NativeViewHost Dock=\"Fill\">\n        <!-- The size and aspect of the camera live preview\n             does not always match they size your cameraview\n             is given by layout. Set stretchmode to either Uniform\n             or Fill to deal with this\n         -->\n        <CameraView ux:Name=\"_cameraView\" StretchMode=\"Fill\" />\n        <JavaScript>\n            var Observable = require(\"FuseJS/Observable\");\n            var Camera = _cameraView;\n\n            // Observables for dealing with\n            // the different states of the camera\n            var captureMode = Observable();\n            var cameraFacing = Observable();\n            var flashMode = Observable();\n            var cameraReady = Observable(false);\n\n            // getCamereInfo will resolve when the camera is fully loaded\n            Camera.getCameraInfo()\n                .then(function(info) {\n                    captureMode.value = info[Camera.INFO_CAPTURE_MOE];\n                    cameraFacing.value = info[Camera.INFO_CAMERA_FACING];\n                    flashMode.value = info[Camera.INFO_FLASH_MODE];\n                    cameraReady.value = true;\n                })\n                .catch(function(error) {\n                    console.log(\"Failed to get camera info: \" + error);\n                });\n        </JavaScript>\n    </NativeViewHost>\n</DockPanel>\n```\nThe `<CameraView />` tag is the UI element that will display a live preview from the camera. The camera is loading asynchronously and the `getCameraInfo` promise wont resolve until it is loaded. This can be used to reflect if the camera is ready and its initial state in your UI.\n\n### Capturing a photo\n\nTo capture a photo, make sure the camera is loaded as discussed above and set its capture mode to photo. If a photo capture was successful you will get an object representing the native photo result, you can call `save()` to store the photo on disk and get a filepath. A photo may require a lot of memory on your device, make sure to call `release()` on it when you are done using it. It is considered bad practice to keep many photo objects around as this can lead to out-of-memory crashes.\n\n```js\nCamera.setCaptureMode(Camera.CAPTURE_MODE_PHOTO)\n    .then(function(newCaptureMode) { /* ready to capture photo */ })\n    .catch(function(error) { /* failed */ });\n\nfunction capturePhoto() {\n    Camera.capturePhoto()\n        .then(function(photo) {\n            photo.save()\n                .then(function(filePath) {\n                    console.log(\"Photo saved to: \" + filePath);\n                    photo.release();\n                })\n                .catch(function(error) {\n                    console.log(\"Failed to save photo: \" + error);\n                    photo.release();\n                });\n        })\n        .catch(function(error) {\n            console.log(\"Failed to capture photo: \" + error);\n        });\n}\n```\n\n### Recording video\n\nMake sure the capture mode is set to video. When you start a recording you get a session object which you need to hold onto. When you call `stop()` on the recording session you will get a file path to the result.\n\n```js\nCamera.setCaptureMode(Camera.CAPTURE_MODE_VIDEO)\n    .then(function(newCaptureMode) { /* ready to record video */ })\n    .catch(function(error) { /* failed */ });\n\nvar recordingSession = null;\n\nfunction startRecording() {\n    Camera.startRecording()\n        .then(function(session) {\n            console.log(\"Video recording started!\");\n            recordingSession = session;\n        })\n        .catch(function(error) {\n            console.log(\"Failed to start recording: \" + error);\n        });\n}\n\nfunction stopRecording() {\n    if (session == null)\n        return;\n\n    session.stop()\n        .then(function(recording) {\n            console.log(\"Recording stopped, saved to: \" + recording.filePath());\n            session = null;\n        })\n        .catch(function(error) {\n            console.log(\"Failed to stop recording: \" + error);\n            session = null;\n        });\n}\n```\n\n### Change camera facing\n\nYou can change the camera facing when the camera is not busy. For example, you cannot change camera facing while recording video or capturing a photo.\n\n```js\nvar currentFacing = Camera.CAMERA_FACING_BACK;\n\nfunction flipFacing() {\n    var facing = currentFacing == Camera.CAMERA_FACING_BACK\n        ? Camera.CAMERA_FACING_FRONT\n        : Camera.CAMERA_FACING_BACK;\n\n    Camera.setCameraFacing(facing)\n        .then(function(newCameraFacing) {\n            console.log(\"Camera facing set to: \" + newCameraFacing);\n        })\n        .catch(function(error) {\n            console.log(\"Failed to set camera facing: \" + error);\n        });\n}\n```\n\n### Set photo resolution (Android only)\n\nOn iOS you cannot specify an output resoltuion for captured photos, however on Android you must specify what resolution you want your photos captured in. There is no sensible default value, so if not explicilty set this abstraction will chose a resolution based on the current aspect ratio of your `<CameraView />`. But you have the option to set this yourself, although that code will only work on Android.\n\n```js\nCamera.getCameraInfo()\n    .then(function(info) {\n        // If we are running on android, the info object should contain\n        // an array of available resolutions for the current camera facing\n        if (Camera.INFO_PHOTO_RESOLUTIONS in info) {\n\n            var supportedResolutions = info[Camera.INFO_PHOTO_RESOLUTIONS];\n\n            // Make a function that picks the resolution you want\n            var resolution = pickResolution(supportedResolutions);\n\n            // Put your resolution in an object with the photo resolution key\n            var options = {};\n            options[Camera.OPTION_PHOTO_RESOLUTION] = resolution;\n\n            Camera.setPhotoOptions(options)\n                .then(function() { /* success */ })\n                .catch(function(error) {\n                    console.log(\"Failed to set photo options: \" + error);\n                });\n        }\n    });\n```"
      },
      "id": {
        "id": "fuse/controls/cameraviewbase",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/cameraviewbase",
        "href": "fuse/controls/cameraviewbase"
      },
      "titles": {
        "indexTitle": "CameraViewBase",
        "fullyQualifiedIndexTitle": "Fuse.Controls.CameraViewBase"
      }
    },
    {
      "comment": {
        "brief": "Displays a circle",
        "full": "Displays a circle\n\nCircle is a @Shape that can have @Fills and @Strokes.\nBy default Circle does not have a size, fills or strokes. You must add some for it\nto become visible.\n\n### StartAngle / EndAngle\n\n`StartAngle` and `EndAngle` can be used to only draw a slice of a @Circle.\nThere are 6 different properties that can be used to control this in different ways.\n\n* `StartAngle` - The angle in radians where the slice begins\n* `StartAngleDegrees` - The angle in degrees where the slice begins\n* `EndAngle` - The angle in radians where the slice ends\n* `EndAngleDegrees` - The angle in degrees where the slice ends\n* `LengthAngle` - An offset in radians from `StartAngle`. This can be used instead of `EndAngle`\n* `LengthAngleDegrees` - An offset in degrees from `StartAngle`. This can be used instead of `EndAngleDegrees`.\n\nNote that using for example both @(StartAngle) and @(StartAngleDegrees) on the same @(Circle) will have an undefined behavior.\n\n## Examples\n\nDisplaying a red @Circle:\n\n```\n<Circle Width=\"100\" Height=\"100\" Color=\"#f00\" />\n```\n\nGetting fancy with a @Stroke and @LinearGradient:\n\n```\n<Circle Width=\"100\" Height=\"100\" >\n    <LinearGradient>\n        <GradientStop Offset=\"0\" Color=\"#cf0\" />\n        <GradientStop Offset=\"1\" Color=\"#f40\" />\n    </LinearGradient>\n    <Stroke Width=\"1\">\n        <SolidColor Color=\"#000\" />\n    </Stroke>\n</Circle>\n```\n\nDrawing a slice of a circle:\n\n```\n<Circle Width=\"150\" Height=\"150\" Color=\"#f00\" StartAngleDegrees=\"135\" LengthAngleDegrees=\"145\" />\n```"
      },
      "id": {
        "id": "fuse/controls/circle",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/circle",
        "href": "fuse/controls/circle"
      },
      "titles": {
        "indexTitle": "Circle",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Circle"
      }
    },
    {
      "comment": {
        "brief": "`ClientPanel` compensates for space taken up by the on-screen keyboard, status bar,\nand other OS-specific elements at the top and bottom edges of the screen.",
        "full": "`ClientPanel` compensates for space taken up by the on-screen keyboard, status bar,\nand other OS-specific elements at the top and bottom edges of the screen.\n\nThis is no longer suitable for some devices and you should consider using @SafeEdgePanel instead.\n\nSee the article on [Safe Layout](articles:layout/safe-layout.md) for more details."
      },
      "id": {
        "id": "fuse/controls/clientpanel",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/clientpanel",
        "href": "fuse/controls/clientpanel"
      },
      "titles": {
        "indexTitle": "ClientPanel",
        "fullyQualifiedIndexTitle": "Fuse.Controls.ClientPanel"
      }
    },
    {
      "comment": {
        "brief": "A panel that places children in a dedicated `Subtree` visual, allowing you to create custom container.",
        "full": "A panel that places children in a dedicated `Subtree` visual, allowing you to create custom container.\n\n## Usage example\n\nWe use the `Subtree` property to identify the inner visual that will receive the children.\n\n    <Container ux:Class=\"MyContainer\" Subtree=\"innerPanel\">\n        <Rectangle ux:Binding=\"Children\" CornerRadius=\"10\" Margin=\"10\">\n            <Stroke Color=\"Red\" Width=\"2\" />\n            <Panel Margin=\"10\" ux:Name=\"innerPanel\" />\n        </Rectangle>\n    </Container>\n\nNote that to add nodes that make up the container itself (e.g. decoration), we need to explicitly mark them\nwith `ux:Binding=\"Children\"`, otherwise these nodes will be added to `innerPanel`.\n\nTo use the container, we can simply do:\n\n    <MyContainer>\n        <Panel Color=\"Blue\" />\n    </MyContainer>\n\nHere, the blue panel will be placed as a child of `innerPanel`, instead of as a direct child of the\ncontainer."
      },
      "id": {
        "id": "fuse/controls/container",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/container",
        "href": "fuse/controls/container"
      },
      "titles": {
        "indexTitle": "Container",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Container"
      }
    },
    {
      "comment": {
        "brief": "Content controls display a single visual child.",
        "full": "Content controls display a single visual child.\n\n## Available content controls\n[subclass Fuse.Controls.ContentControl]",
        "attributes": {
          "topic": "Content controls"
        }
      },
      "id": {
        "id": "fuse/controls/contentcontrol",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/contentcontrol",
        "href": "fuse/controls/contentcontrol"
      },
      "titles": {
        "indexTitle": "ContentControl",
        "fullyQualifiedIndexTitle": "Fuse.Controls.ContentControl"
      }
    },
    {
      "comment": {
        "brief": "Controls display a native control or graphics-based control based on context.",
        "full": "Controls display a native control or graphics-based control based on context.\n\nIn Fuse, UI Controls refers to the common components for interaction and data entry typically found in most operating systems and UI kits.\n\nFuse gives you access to two different technologies for displaying UI Controls:\n\n* Fully portable custom controls drawn by OpenGL (default, see @GraphicsView)\n* The real native controls provided from the OS itself (see @NativeViewHost)\n\nIn a native context (inside of a @NativeViewHost ), controls will display a native control, if supported for\nthe given control an platform. In other context, the graphics-based appearance will be used.\n\n## Available UI controls\n\n[subclass Fuse.Controls.Control]\n\n## Adding more UI controls\n\nYou can create your own UI controls in two ways:\n\n* Extend an existing control in UX markup using @ux:Class\n* Creating [custom UX wrappers for native controls](https://fuseopen.com/docs/native-interop/native-ux-components)",
        "attributes": {
          "topic": "Controls"
        }
      },
      "id": {
        "id": "fuse/controls/control",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/control",
        "href": "fuse/controls/control"
      },
      "titles": {
        "indexTitle": "Control",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Control"
      }
    },
    {
      "id": {
        "id": "fuse/controls/navigationcontrol/controlpagedata",
        "parentId": "fuse/controls/navigationcontrol",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/navigationcontrol/controlpagedata",
        "href": "fuse/controls/navigationcontrol/controlpagedata"
      },
      "titles": {
        "indexTitle": "ControlPageData",
        "fullyQualifiedIndexTitle": "Fuse.Controls.ControlPageData"
      }
    },
    {
      "id": {
        "id": "fuse/controls/coordinate",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/coordinate",
        "href": "fuse/controls/coordinate"
      },
      "titles": {
        "indexTitle": "Coordinate",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Coordinate"
      }
    },
    {
      "comment": {
        "brief": "Draws a curve connecting several points, specified as @CurvePoint.",
        "full": "Draws a curve connecting several points, specified as @CurvePoint.\n\nThe points of the curve are relative to the size of the `Curve`; the values have the range `0..1`.\n\n## Example\n\n    Draws a simple line graph.\n\n    <Panel Alignment=\"Center\" Width=\"300\" Height=\"200\">\n        <Curve StrokeWidth=\"10\" StrokeColor=\"#ABC\">\n            <CurvePoint At=\"0.00,0.0\"/>\n            <CurvePoint At=\"0.25,0.4\"/>\n            <CurvePoint At=\"0.50,0.1\"/>\n            <CurvePoint At=\"0.75,0.9\"/>\n            <CurvePoint At=\"1.00,0.6\"/>\n        </Curve>\n    </Panel>"
      },
      "id": {
        "id": "fuse/controls/curve",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/curve",
        "href": "fuse/controls/curve"
      },
      "titles": {
        "indexTitle": "Curve",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Curve"
      }
    },
    {
      "comment": {
        "brief": "Defines a point inside a @Curve",
        "full": "Defines a point inside a @Curve\n\nOnly one of each pair `ControlIn`/`TangentIn` and `ControlOut/TangentOut` can be defined, as they both define the same tangent to a point. These tangent definitions override the default values: if not specfied the `Curve` will assign appropriate defaults depending on the `Style`.\n\nThe `ControlIn/Out` values define a bezier style control point before and after the point.\n\nThe `TangenIn/Out` values define the direction and strenght of the tangent at the point. These are defined according to the Cubic Hermite definition."
      },
      "id": {
        "id": "fuse/controls/curvepoint",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/curvepoint",
        "href": "fuse/controls/curvepoint"
      },
      "titles": {
        "indexTitle": "CurvePoint",
        "fullyQualifiedIndexTitle": "Fuse.Controls.CurvePoint"
      }
    },
    {
      "comment": {
        "brief": "Displays a component to select a date.",
        "full": "Displays a component to select a date.\n\nCurrently, the DatePicker only has native implementations, so it should be contained in a @NativeViewHost.\n\nA `DatePicker` can be used to select a specific date value. The type of its `Value`, `MinValue`, and `MaxValue`\nproperties are each of type `Uno.DateTime`, which is marshalled automatically to and from the JavaScript `Date` type.\nThis makes interaction between JavaScript and the `DatePicker` type seamless via databinding. If you plan to wrap\na `DatePicker` in a UX component and use a UX property to hook up to any of these values, the `Uno.DateTime` type\nshould be used.\n\nBoth `Uno.DateTime` and JS' `Date` type represent a specific timestamp. These types have both date and time\ncomponents, and their interpretation depends on a given time zone, which can cause a great deal of confusion. To\nsimplify all of this and ensure consistent behavior accross different time zones and locales, `DatePicker` will assume\nincoming values are relative to UTC, and truncate the time component to midnight, effectively ignoring the time\ncomponent altogether. Similarly, values read from `DatePicker` properties will only consist of a date component at\nmidnight UTC. This makes values going to/from the `DatePicker` control easy to create and interpret consistently, but\nalso means that if a value with a time component other than midnight at UTC is written to one of `DatePicker`'s `Value`\nproperties, subsequent values read from the property may not match the written value, as the time component will have\nbeen truncated.\n\nNote that this control should not be used to deal with historic dates, as calendar/date and timestamp translation is\ninconsistent between different locales due to when and where different calendar systems were adopted. However, the\nbehavior is consistent for all dates since at least 1900 including all representable future dates.\n\n## Example\n\nThe following example shows how to set up a `DatePicker` object with a specific minimum and maximum value, and set the\nvalue from JS using a `Date` object:\n\n    <StackPanel>\n        <JavaScript>\n            var Observable = require(\"FuseJS/Observable\");\n\n            var someDate = Observable(new Date(Date.parse(\"2007-02-14T00:00:00.000Z\")));\n\n            someDate.onValueChanged(module, function(date) {\n                console.log(\"someDate changed: \" + JSON.stringify(date));\n            });\n\n            module.exports = {\n                someDate: someDate,\n\n                minDate: new Date(Date.parse(\"1950-01-01T00:00:00.000Z\")),\n                maxDate: new Date(Date.parse(\"2050-01-01T00:00:00.000Z\")),\n\n                whoYouGonnaCall: function() {\n                    someDate.value = new Date(Date.parse(\"1984-06-08T00:00:00.000Z\"));\n                }\n            };\n        </JavaScript>\n\n        <NativeViewHost>\n            <DatePicker Value=\"{someDate}\" MinValue=\"{minDate}\" MaxValue=\"{maxDate}\" />\n        </NativeViewHost>\n\n        <Button Text=\"Who you gonna call?\" Clicked=\"{whoYouGonnaCall}\" Margin=\"5\" />\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/controls/datepicker",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/datepicker",
        "href": "fuse/controls/datepicker"
      },
      "titles": {
        "indexTitle": "DatePicker",
        "fullyQualifiedIndexTitle": "Fuse.Controls.DatePicker"
      }
    },
    {
      "id": {
        "id": "fuse/controls/datepickerbase",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/datepickerbase",
        "href": "fuse/controls/datepickerbase"
      },
      "titles": {
        "indexTitle": "DatePickerBase",
        "fullyQualifiedIndexTitle": "Fuse.Controls.DatePickerBase"
      }
    },
    {
      "id": {
        "id": "fuse/controls/scrollview/defaulttrigger",
        "parentId": "fuse/controls/scrollview",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/scrollview/defaulttrigger",
        "href": "fuse/controls/scrollview/defaulttrigger"
      },
      "titles": {
        "indexTitle": "DefaultTrigger",
        "fullyQualifiedIndexTitle": "Fuse.Controls.DefaultTrigger"
      }
    },
    {
      "comment": {
        "brief": "Lays out its children by docking them to the different sides, one after the other.",
        "full": "Lays out its children by docking them to the different sides, one after the other.\n\nOne can specify which side per element by using the @Dock property like this:\n\n    <DockPanel>\n        <Rectangle Dock=\"Left\"/>\n    </DockPanel>\n\nThe @Dock property can be assigned to be either Left, Right, Top, Bottom or Fill (which is the default).\n\n    <DockPanel>\n        <Rectangle ux:Class=\"MyRectangle\" MinWidth=\"100\" MinHeight=\"200\" />\n        <MyRectangle Color=\"Red\" Dock=\"Left\"/>\n        <MyRectangle Color=\"Green\" Dock=\"Top\"/>\n        <MyRectangle Color=\"Blue\" Dock=\"Right\"/>\n        <MyRectangle Color=\"Yellow\" Dock=\"Bottom\"/>\n        <MyRectangle Color=\"Teal\" />\n    </DockPanel>"
      },
      "id": {
        "id": "fuse/controls/dockpanel",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/dockpanel",
        "href": "fuse/controls/dockpanel"
      },
      "titles": {
        "indexTitle": "DockPanel",
        "fullyQualifiedIndexTitle": "Fuse.Controls.DockPanel"
      }
    },
    {
      "comment": {
        "brief": "A navigation control for panels that slide in from the sides of the display.",
        "full": "A navigation control for panels that slide in from the sides of the display.\n\nAdd an `Edge` property to the children to define on which edge they attach. The user can swipe from that side to reveal the panel.\n\nUse a `GoBack` inside this navigation to dismiss side-panels from UX, or use the `dismiss` method from JavaScript.\n\n## Model\n\nThe EdgeNavigator can be bound to a model with the `Pages` property. For example:\n\n   <EdgeNavigator Pages=\"{pages}\">\n       <Panel Edge=\"Left\" ux:Template=\"left\"/>\n       <Panel Edge=\"Right\" ux:Template=\"right\"/>\n       <Panel ux:Template=\"main\"/>\n   </EdgeNavigator>\n\nThen in your main model state you define `pages`\n\n   export default class MainState {\n       constructor() {\n           this.pages = [ new LeftPage(), new RightPage(), new MainPage() ]\n       }\n   }\n\n   class LeftPage {\n       constructor() {\n           this.$path = \"left\"\n       }\n   }\n\n   class RightPage {\n       constructor() {\n           this.$path = \"right\"\n       }\n   }\n\n   class MainPage {\n       constructor() {\n           this.$path = \"main\"\n       }\n   }"
      },
      "id": {
        "id": "fuse/controls/edgenavigator",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/edgenavigator",
        "href": "fuse/controls/edgenavigator"
      },
      "titles": {
        "indexTitle": "EdgeNavigator",
        "fullyQualifiedIndexTitle": "Fuse.Controls.EdgeNavigator"
      }
    },
    {
      "comment": {
        "brief": "Displays an ellipse",
        "full": "Displays an ellipse\n\nEllipse is a @Shape that can have @Fills and @Strokes.\nBy default Ellipse does not have a size, fills or strokes. You must add some for it\nto become visible.\n\n## Example:\n\n    <Ellipse Width=\"300\" Height=\"100\">\n        <LinearGradient>\n            <GradientStop Offset=\"0\" Color=\"#0cc\" />\n            <GradientStop Offset=\"1\" Color=\"#cc0\" />\n        </LinearGradient>\n        <Stroke Width=\"1\">\n            <SolidColor Color=\"#000\" />\n        </Stroke>\n    </Ellipse>"
      },
      "id": {
        "id": "fuse/controls/ellipse",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/ellipse",
        "href": "fuse/controls/ellipse"
      },
      "titles": {
        "indexTitle": "Ellipse",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Ellipse"
      }
    },
    {
      "id": {
        "id": "fuse/controls/ellipticalshape",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/ellipticalshape",
        "href": "fuse/controls/ellipticalshape"
      },
      "titles": {
        "indexTitle": "EllipticalShape",
        "fullyQualifiedIndexTitle": "Fuse.Controls.EllipticalShape"
      }
    },
    {
      "id": {
        "id": "fuse/controls/filevideosource",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/filevideosource",
        "href": "fuse/controls/filevideosource"
      },
      "titles": {
        "indexTitle": "FileVideoSource",
        "fullyQualifiedIndexTitle": "Fuse.Controls.FileVideoSource"
      }
    },
    {
      "id": {
        "id": "fuse/controls/graphics/controlvisual_1",
        "parentId": "fuse/controls/graphics",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/graphics/controlvisual_1",
        "href": "fuse/controls/graphics/controlvisual_1"
      },
      "titles": {
        "indexTitle": "ControlVisual<T>",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Graphics.ControlVisual<T>"
      }
    },
    {
      "id": {
        "id": "fuse/controls/graphics/visual",
        "parentId": "fuse/controls/graphics",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/graphics/visual",
        "href": "fuse/controls/graphics/visual"
      },
      "titles": {
        "indexTitle": "Visual",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Graphics.Visual"
      }
    },
    {
      "comment": {
        "brief": "A native view that hosts graphics-rendered UI controls.",
        "full": "A native view that hosts graphics-rendered UI controls.\n\nGraphicsView is the counterpart to @NativeViewHost and allows you to add Fuse views to a NativeViewHost-scope.\n\n    <App>\n        <NativeViewHost>\n            <StackPanel>\n                <Button Text=\"I'm a Native button!\" />\n                <GraphicsView>\n                    <Button Text=\"I'm a graphics-button!\" />\n                </GraphicsView>\n            </StackPanel>\n        </NativeViewHost>\n    </App>\n\nAs with the NativeViewHost note that depth ordering will behave differently when mixing Native and Fuse views."
      },
      "id": {
        "id": "fuse/controls/graphicsview",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/graphicsview",
        "href": "fuse/controls/graphicsview"
      },
      "titles": {
        "indexTitle": "GraphicsView",
        "fullyQualifiedIndexTitle": "Fuse.Controls.GraphicsView"
      }
    },
    {
      "comment": {
        "brief": "Lays out children in a grid formation.",
        "full": "Lays out children in a grid formation.\n\n## RowCount and ColumnCount properties\n\nIf what you need is a certain number of equally sized rows and/or columns,\nyou can use the @RowCount and @ColumnCount properties.\n\n    <Grid RowCount=\"4\" ColumnCount=\"2\"/>\n\nBy default, elements in the grid are placed in the order they appear in UX, from left to right,\ntop to bottom. However, you can explicitly specify per element which grid cell they should be placed\nin using the `Row` and `Column` properties.\n\n    <Grid RowCount=\"1\" ColumnCount=\"2\">\n        <Rectangle Row=\"0\" Column=\"1\" Color=\"Red\"/>\n        <Rectangle Row=\"0\" Column=\"0\" Color=\"Blue\"/>\n    </Grid>\n\nIf you want an element to occupy multiple rows or columns,\nyou can use the `RowSpan` and `ColumnSpan` properties.\n\n    <Grid RowCount=\"2\" ColumnCount=\"2\">\n        <Rectangle ColumnSpan=\"2\" RowSpan=\"2\" Color=\"Red\"/>\n    </Grid>\n\n## Rows and Columns properties\n\nMore fine grained control of how the rows and column sizes are calculated can be achieved with the\n@Rows and @Columns properties. These properties accept a comma separated list of *grid sizes* which\ncan take on a few different forms. The values can either be absolute, relative or automatic.\n\nExample of a Grid with 3 rows of size 10, 10 and 50 points, and 3 columns, the first each occupy 20%\nof the available space and the last one occupies 60%.\n\n    <Grid Rows=\"10,10,50\" Columns=\"1*,1*,3*\"/>\n\nThe proportional column sizes here are calculated by first summing all the values (1+1+3 = 5).\nThen we divide our value by the total (1/5 = 20%, 1/5 = 20%, 3/5 = 60%).\n\nNote that proportional sizes only make sense if the grid is expanding to fill the parent panel, or\nhas a fixed size. If it is shrinking to fit it's contents the proportional rows/columns will have zero\nsize.\n\nThe following Grid has 2 rows where the first row gets the height of the tallest element in that row,\nand the second row takes up any remaining space:\n\n    <Grid Rows=\"auto,1*\" />"
      },
      "id": {
        "id": "fuse/controls/grid",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/grid",
        "href": "fuse/controls/grid"
      },
      "titles": {
        "indexTitle": "Grid",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Grid"
      }
    },
    {
      "comment": {
        "brief": "`<HTML/>` is a semantic utility node used to feed a @WebView component or a @LoadHtml action with raw HTML:",
        "full": "`<HTML/>` is a semantic utility node used to feed a @WebView component or a @LoadHtml action with raw HTML:\n\n```XML\n<NativeViewHost>\n    <WebView>\n        <HTML>\n            <![CDATA[\n                <h1>Boom!</h1>\n            ]]>\n        </HTML>\n    </WebView>\n</NativeViewHost>\n\n<LoadHtml>\n    <HTML>\n        <![CDATA[\n            <h1>Bang!</h1>\n        ]]>\n    </HTML>\n</LoadHtml>\n```"
      },
      "id": {
        "id": "fuse/controls/html",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/html",
        "href": "fuse/controls/html"
      },
      "titles": {
        "indexTitle": "HTML",
        "fullyQualifiedIndexTitle": "Fuse.Controls.HTML"
      }
    },
    {
      "comment": {
        "brief": "Displays an Image",
        "full": "Displays an Image\n\nImage provides several features for working with images in fuse, we will go through them in some short examples.\n\nDisplaying an image from a file or an url:\n\n    <StackPanel>\n        <Image File=\"some_file.png\" />\n        <Image Url=\"some_url\" />\n    </StackPanel>\n\n## Displaying a multi-density image from files:\n\n    <StackPanel>\n        <Image Files=\"logo.png, logo@2x.png, logo@4x.png\" />\n        <Image>\n            <MultiDensityImageSource>\n                <FileImageSource Density=\"1\" File=\"logo.png\" />\n                <FileImageSource Density=\"2\" File=\"logo@2x.png\" />\n                <FileImageSource Density=\"3\" File=\"logo@4x.png\" />\n            </MultiDensityImageSource>\n        </Image>\n    </StackPanel/>\n\n## Displaying a multi-density image from urls:\n\n    <StackPanel>\n        <Image>\n            <MultiDensityImageSource>\n                <HttpImageSource Density=\"1\" Url=\"...\" />\n                <HttpImageSource Density=\"2\" Url=\"...@2x\" />\n                <HttpImageSource Density=\"3\" Url=\"...@4x\" />\n            </MultiDensityImageSource>\n        </Image>\n    </StackPanel>\n\n## Displaying an image from a file specified from JavaScript\nUno cannot automatically bundle images when their path is defined in JavaScript. Because of this, you have to manually bundle those by manually importing them in your unproj file. You can either bundle one file like this:\n\n    \"Includes\": [\n        \"*\",\n        \"image.jpg:Bundle\"\n    ]\n\nOr bundle an entire folder, or all files of a specific type, using wildcards:\n\n    \"Includes\": [\n        \"*.jpg:Bundle\"\n    ]\n\nYou can read more on bundling files with your project [here.](/docs/assets/bundle).\n\nWhen you have bundled your image files, you can refer to them from javascript like this:\n\n    <JavaScript>\n        module.exports = {\n            image: \"image.jpg\"\n        };\n    </JavaScript>\n    <Image File=\"{image}\" />"
      },
      "id": {
        "id": "fuse/controls/image",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/image",
        "href": "fuse/controls/image"
      },
      "titles": {
        "indexTitle": "Image",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Image"
      }
    },
    {
      "id": {
        "id": "fuse/controls/ios/photopreview",
        "parentId": "fuse/controls/ios",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/ios/photopreview",
        "href": "fuse/controls/ios/photopreview"
      },
      "titles": {
        "indexTitle": "PhotoPreview",
        "fullyQualifiedIndexTitle": "Fuse.Controls.iOS.PhotoPreview"
      }
    },
    {
      "comment": {
        "brief": "Layout controls perform layout of the children.",
        "full": "Layout controls perform layout of the children.\n\n## Available layout controls\n[subclass Fuse.Controls.LayoutControl]",
        "attributes": {
          "topic": "Layout controls"
        }
      },
      "id": {
        "id": "fuse/controls/layoutcontrol",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/layoutcontrol",
        "href": "fuse/controls/layoutcontrol"
      },
      "titles": {
        "indexTitle": "LayoutControl",
        "fullyQualifiedIndexTitle": "Fuse.Controls.LayoutControl"
      }
    },
    {
      "id": {
        "id": "fuse/controls/mapeventargs",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/mapeventargs",
        "href": "fuse/controls/mapeventargs"
      },
      "titles": {
        "indexTitle": "MapEventArgs",
        "fullyQualifiedIndexTitle": "Fuse.Controls.MapEventArgs"
      }
    },
    {
      "comment": {
        "brief": "Adds a map marker to a @MapView",
        "full": "Adds a map marker to a @MapView\n\nTo annotate the map, you must decorate it with `MapMarker` nodes. `MapMarker` nodes are simple value objects that contain a `Latitude`, a `Longitude` and a `Label`\n\n```HTML\n<NativeViewHost>\n    <MapView>\n        <MapMarker Label=\"Fuse HQ\" Latitude=\"59.9115573\" Longitude=\"10.73888\" />\n    </MapView>\n</NativeViewHost>\n```\n\nIf you need to generate MapMarkers dynamically from JS, data binding and @(Each) are your friends. While we're scripting we might as well hook into the MapMarker's `Tapped` event to detect when the user has selected a marker.\n\n```HTML\n<JavaScript>\n    var Observable = require(\"FuseJS/Observable\");\n    module.exports = {\n        markers : Observable({latitude:30.282786, longitude:-97.741736, label:\"Austin, Texas\", hometown:true}),\n        onMarkerTapped : function(args) {\n            console.log(\"Marker tapped: \"+args.data.hometown);\n        }\n    }\n</JavaScript>\n\n<NativeViewHost>\n    <MapView>\n        <Each Items={markers}>\n            <MapMarker Latitude=\"{latitude}\" Longitude=\"{longitude}\" Label=\"{label}\" Tapped={onMarkerTapped} />\n        </Each>\n    </MapView>\n</NativeViewHost>\n```"
      },
      "id": {
        "id": "fuse/controls/mapmarker",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/mapmarker",
        "href": "fuse/controls/mapmarker"
      },
      "titles": {
        "indexTitle": "MapMarker",
        "fullyQualifiedIndexTitle": "Fuse.Controls.MapMarker"
      }
    },
    {
      "comment": {
        "brief": "Adds a map overlay to a @MapView",
        "full": "Adds a map overlay to a @MapView\n\nTo overlay the map, you must decorate it with `MapOverlay` nodes. There are three type of overlay that supported Polyline, Polygon and Circle.\nIn order to draw Overlay, it needs to define position where overlay should be drawn on the map using `Coordinate` property. See the example below on how you can create map overlay\n\n```HTML\n<NativeViewHost>\n    <MapView Zoom=\"14\" Latitude=\"-6.914742\" Longitude=\"107.609820\">\n        <MapOverlay Type=\"Polyline\" StrokeColor=\"Blue\" LineWidth=\"5\">\n            <Coordinate Latitude=\"-6.914742\" Longitude=\"107.609820\" />\n            <Coordinate Latitude=\"-6.915850\" Longitude=\"107.609929\" />\n            <Coordinate Latitude=\"-6.916959\" Longitude=\"107.611009\" />\n        </MapOverlay>\n    </MapView>\n</NativeViewHost>\n```"
      },
      "id": {
        "id": "fuse/controls/mapoverlay",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/mapoverlay",
        "href": "fuse/controls/mapoverlay"
      },
      "titles": {
        "indexTitle": "MapOverlay",
        "fullyQualifiedIndexTitle": "Fuse.Controls.MapOverlay"
      }
    },
    {
      "comment": {
        "brief": "Displays a native map view.",
        "full": "Displays a native map view.\n\nThe `MapView` allows you to present annotated, interactive world-wide maps to the user using the mapping APIs native to the platform: Google Maps on Android and Apple Maps on iOS.\n\nThe `MapView` is a native control, and thus needs to be contained in a @NativeViewHost to be displayed. As with other native mobile controls, there currently isn't a `MapView` available for desktop targets.\n\n*Note:* You need to add a reference to `Fuse.Maps` in the `Packages` section of your `.unoproj`:\n\n```\n\"Packages\": [\n\t\"Fuse.Maps\",\n\t\"Fuse\",\n\t\"FuseJS\"\n]\n```\n\nGetting a `MapView` included in your app is straight forward: Simply include the node in your UX as you normally would with a native control:\n\n```XML\n<NativeViewHost>\n\t<MapView/>\n</NativeViewHost>\n```\n\nTo initialize and manipulate the map camera, use the [Latitude](api:fuse/controls/mapview/latitude), [Longitude](api:fuse/controls/mapview/longitude), [Zoom](api:fuse/controls/mapview/zoom), [Tilt](api:fuse/controls/mapview/tilt) and [Bearing](api:fuse/controls/mapview/bearing) properties, all of which are two-way bindable.\n`Zoom` follows Google's \"zoom levels\", which can be read about in detail [here](https://developers.google.com/maps/documentation/static-maps/intro#Zoomlevels).\n\nThe map can be further customized by setting the rendering style using the [Style](api:fuse/controls/mapview/style) property.\nOptions are `Normal`, `Satellite` and `Hybrid`.\n\nTo annotate the map with labelled markers, see @MapMarker\n\n## Maps on Android\n\nGoogle Maps requires a valid Google Maps API key. Follow [Google's documentation](https://developers.google.com/maps/documentation/android-api/signup) to get one set up. Once you have your key it must be added to your project file, as shown below\n\n```JSON\n\"Android\": {\n   \"Geo\": {\n        \"ApiKey\": \"your_key_here\"\n    }\n}\n```\n\r\nThis example displays a map with an average zoom level focused on Fuse's home in Oslo, Norway"
      },
      "id": {
        "id": "fuse/controls/mapview",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/mapview",
        "href": "fuse/controls/mapview"
      },
      "titles": {
        "indexTitle": "MapView",
        "fullyQualifiedIndexTitle": "Fuse.Controls.MapView"
      }
    },
    {
      "id": {
        "id": "fuse/controls/markereventargs",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/markereventargs",
        "href": "fuse/controls/markereventargs"
      },
      "titles": {
        "indexTitle": "MarkerEventArgs",
        "fullyQualifiedIndexTitle": "Fuse.Controls.MarkerEventArgs"
      }
    },
    {
      "id": {
        "id": "fuse/controls/multilayout",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/multilayout",
        "href": "fuse/controls/multilayout"
      },
      "titles": {
        "indexTitle": "MultiLayout",
        "fullyQualifiedIndexTitle": "Fuse.Controls.MultiLayout"
      }
    },
    {
      "comment": {
        "brief": "Allows you to move @Elements between different layouts using the `Placeholder` class.",
        "full": "Allows you to move @Elements between different layouts using the `Placeholder` class.\n\nThis allows us to @Move elements between different locations in the visual tree, and also switch between certain layouts on the fly.\n\n**Note:** `MultiLayoutPanel` is a good option for when you want to have different layouts based on on the value of certain data. In the cases where you are mostly interested in using different layouts as a means of creating animations, using the @Element.LayoutMaster property might be a better choice.\n\n# Example\nThis example shows a simple 3-choice Selection which uses a `MultiLayoutPanel` together with `LayoutAnimation` to animate an indicator for the selected option:\n\n    <Panel Alignment=\"Center\" Width=\"200\" Height=\"50\" >\n        <MultiLayoutPanel ux:Name=\"multiLayout\">\n            <Grid ColumnCount=\"3\">\n                <Panel ux:Name=\"offPanel\">\n                    <Placeholder>\n                        <Panel ux:Name=\"pointer\" Color=\"#2196F3\" Width=\"50\" Height=\"2\">\n                            <LayoutAnimation>\n                                <Move X=\"1\" Y=\"1\" RelativeTo=\"LayoutChange\" Duration=\".4\" Easing=\"QuadraticInOut\" />\n                            </LayoutAnimation>\n                        </Panel>\n                    </Placeholder>\n                    <Text TextAlignment=\"Center\">Off</Text>\n                    <Clicked>\n                    <Set multiLayout.LayoutElement=\"offPanel\" />\n                    </Clicked>\n                </Panel>\n                <Panel ux:Name=\"standbyPanel\">\n                    <Placeholder Target=\"pointer\" />\n                    <Text TextAlignment=\"Center\">Standby</Text>\n                    <Clicked>\n                        <Set multiLayout.LayoutElement=\"standbyPanel\" />\n                    </Clicked>\n                </Panel>\n                <Panel ux:Name=\"onPanel\">\n                    <Placeholder Target=\"pointer\" />\n                    <Text TextAlignment=\"Center\">On</Text>\n                    <Clicked>\n                        <Set multiLayout.LayoutElement=\"onPanel\" />\n                    </Clicked>\n                </Panel>\n            </Grid>\n        </MultiLayoutPanel>\n    </Panel>"
      },
      "id": {
        "id": "fuse/controls/multilayoutpanel",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/multilayoutpanel",
        "href": "fuse/controls/multilayoutpanel"
      },
      "titles": {
        "indexTitle": "MultiLayoutPanel",
        "fullyQualifiedIndexTitle": "Fuse.Controls.MultiLayoutPanel"
      }
    },
    {
      "id": {
        "id": "fuse/controls/native/android/button",
        "parentId": "fuse/controls/native/android",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/native/android/button",
        "href": "fuse/controls/native/android/button"
      },
      "titles": {
        "indexTitle": "Button",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Native.Android.Button"
      }
    },
    {
      "id": {
        "id": "fuse/controls/native/android/graphicsviewbase",
        "parentId": "fuse/controls/native/android",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/native/android/graphicsviewbase",
        "href": "fuse/controls/native/android/graphicsviewbase"
      },
      "titles": {
        "indexTitle": "GraphicsViewBase",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Native.Android.GraphicsViewBase"
      }
    },
    {
      "id": {
        "id": "fuse/controls/native/android/scrollview",
        "parentId": "fuse/controls/native/android",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/native/android/scrollview",
        "href": "fuse/controls/native/android/scrollview"
      },
      "titles": {
        "indexTitle": "ScrollView",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Native.Android.ScrollView"
      }
    },
    {
      "id": {
        "id": "fuse/controls/native/android/slider",
        "parentId": "fuse/controls/native/android",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/native/android/slider",
        "href": "fuse/controls/native/android/slider"
      },
      "titles": {
        "indexTitle": "Slider",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Native.Android.Slider"
      }
    },
    {
      "id": {
        "id": "fuse/controls/native/android/surfaceview",
        "parentId": "fuse/controls/native/android",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/native/android/surfaceview",
        "href": "fuse/controls/native/android/surfaceview"
      },
      "titles": {
        "indexTitle": "SurfaceView",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Native.Android.SurfaceView"
      }
    },
    {
      "id": {
        "id": "fuse/controls/native/android/switch",
        "parentId": "fuse/controls/native/android",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/native/android/switch",
        "href": "fuse/controls/native/android/switch"
      },
      "titles": {
        "indexTitle": "Switch",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Native.Android.Switch"
      }
    },
    {
      "id": {
        "id": "fuse/controls/native/android/textureview",
        "parentId": "fuse/controls/native/android",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/native/android/textureview",
        "href": "fuse/controls/native/android/textureview"
      },
      "titles": {
        "indexTitle": "TextureView",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Native.Android.TextureView"
      }
    },
    {
      "id": {
        "id": "fuse/controls/native/android/textview",
        "parentId": "fuse/controls/native/android",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/native/android/textview",
        "href": "fuse/controls/native/android/textview"
      },
      "titles": {
        "indexTitle": "TextView",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Native.Android.TextView"
      }
    },
    {
      "id": {
        "id": "fuse/controls/native/ios/button",
        "parentId": "fuse/controls/native/ios",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/native/ios/button",
        "href": "fuse/controls/native/ios/button"
      },
      "titles": {
        "indexTitle": "Button",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Native.iOS.Button"
      }
    },
    {
      "id": {
        "id": "fuse/controls/native/ios/graphicsview",
        "parentId": "fuse/controls/native/ios",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/native/ios/graphicsview",
        "href": "fuse/controls/native/ios/graphicsview"
      },
      "titles": {
        "indexTitle": "GraphicsView",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Native.iOS.GraphicsView"
      }
    },
    {
      "id": {
        "id": "fuse/controls/native/ios/scrollview",
        "parentId": "fuse/controls/native/ios",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/native/ios/scrollview",
        "href": "fuse/controls/native/ios/scrollview"
      },
      "titles": {
        "indexTitle": "ScrollView",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Native.iOS.ScrollView"
      }
    },
    {
      "id": {
        "id": "fuse/controls/native/ios/slider",
        "parentId": "fuse/controls/native/ios",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/native/ios/slider",
        "href": "fuse/controls/native/ios/slider"
      },
      "titles": {
        "indexTitle": "Slider",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Native.iOS.Slider"
      }
    },
    {
      "id": {
        "id": "fuse/controls/native/ios/switch",
        "parentId": "fuse/controls/native/ios",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/native/ios/switch",
        "href": "fuse/controls/native/ios/switch"
      },
      "titles": {
        "indexTitle": "Switch",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Native.iOS.Switch"
      }
    },
    {
      "id": {
        "id": "fuse/controls/native/ios/textview",
        "parentId": "fuse/controls/native/ios",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/native/ios/textview",
        "href": "fuse/controls/native/ios/textview"
      },
      "titles": {
        "indexTitle": "TextView",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Native.iOS.TextView"
      }
    },
    {
      "id": {
        "id": "fuse/controls/native/viewhandle",
        "parentId": "fuse/controls/native",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/native/viewhandle",
        "href": "fuse/controls/native/viewhandle"
      },
      "titles": {
        "indexTitle": "ViewHandle",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Native.ViewHandle"
      }
    },
    {
      "comment": {
        "brief": "Creates a layer of native @Controls on top of a @GraphicsView.\n@Controls in its subtree will be mapped to the native controls provided by the OS.",
        "full": "Creates a layer of native @Controls on top of a @GraphicsView.\n@Controls in its subtree will be mapped to the native controls provided by the OS.\n\nA Fuse @App contains an implicit @GraphicsView at the root level, which ensures that UI components are renderered using high performance OpenGL graphics by default.\n\nTo display native stock controls that are bundled with the platform's OS, you can use a @NativeViewHost.\nSome @Controls are only available as native @Controls (e.g. @WebView or @MapView), while others are available as both native and graphics @Controls (e.g. @ScrollView or @Rectangle).\n\n> **Note**: Native @Controls are *always* rendered in front of graphics controls.\n>\n> The only exception is when @Fuse.Controls.NativeViewHost.RenderToTexture is enabled, which comes with its own set of limitations.\n\n## Examples\n\n@WebView is only available as a native view. Here's how to display one:\n\n    <Panel>\n        <NativeViewHost>\n            <WebView Url=\"http://example.com\" />\n        </NativeViewHost>\n    </Panel>\n\nWe can also layer native @Controls over each other and form heirarchies within the `NativeViewHost`, just like with regular UX markup:\n\n    <Panel>\n        <NativeViewHost>\n            <Panel Alignment=\"Top\" Padding=\"15\" Color=\"#0006\">\n                <Text>This text is layered on top of the WebView</Text>\n            </Panel>\n            <WebView Url=\"http://example.com\" />\n        </NativeViewHost>\n    </Panel>\n\nYou can use the `RenderToTexture` property to render the native view to a texture to enable correct layer-compositing with\nother graphics-based @Visuals. Note that this comes at a performance cost, and *native views are not interactive while being\nrendered to texture*.\n\n    <Text Alignment=\"Center\">This text is layered on top of the NativeViewHost</Text>\n    <NativeViewHost RenderToTexture=\"true\">\n        <Rectangle Color=\"#324\" />\n    </NativeViewHost>\n\nTo make an app consisting solely of native components, place a `<NativeViewHost>` at the root level of your app:\n\n    <App>\n        <NativeViewHost>\n            <!-- entire app goes here -->\n        </NativeViewHost>\n    </App>"
      },
      "id": {
        "id": "fuse/controls/nativeviewhost",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/nativeviewhost",
        "href": "fuse/controls/nativeviewhost"
      },
      "titles": {
        "indexTitle": "NativeViewHost",
        "fullyQualifiedIndexTitle": "Fuse.Controls.NativeViewHost"
      }
    },
    {
      "id": {
        "id": "fuse/controls/navigationbar",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/navigationbar",
        "href": "fuse/controls/navigationbar"
      },
      "titles": {
        "indexTitle": "NavigationBar",
        "fullyQualifiedIndexTitle": "Fuse.Controls.NavigationBar"
      }
    },
    {
      "comment": {
        "brief": "A standard page navigation system. This provides standard transitions, user interaction and\nappropriate page handling for a basic linear navigation.",
        "full": "A standard page navigation system. This provides standard transitions, user interaction and\nappropriate page handling for a basic linear navigation."
      },
      "id": {
        "id": "fuse/controls/navigationcontrol",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/navigationcontrol",
        "href": "fuse/controls/navigationcontrol"
      },
      "titles": {
        "indexTitle": "NavigationControl",
        "fullyQualifiedIndexTitle": "Fuse.Controls.NavigationControl"
      }
    },
    {
      "id": {
        "id": "fuse/controls/navigationinternal/blockinputwhilenavigating",
        "parentId": "fuse/controls/navigationinternal",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/navigationinternal/blockinputwhilenavigating",
        "href": "fuse/controls/navigationinternal/blockinputwhilenavigating"
      },
      "titles": {
        "indexTitle": "BlockInputWhileNavigating",
        "fullyQualifiedIndexTitle": "Fuse.Controls.NavigationInternal.BlockInputWhileNavigating"
      }
    },
    {
      "comment": {
        "brief": "This is an internal class used in Navigation. Do not use it. It is only exposed in the API due to a limitation in our toolset.",
        "full": "This is an internal class used in Navigation. Do not use it. It is only exposed in the API due to a limitation in our toolset.\n\n@hide",
        "attributes": {
          "advanced": true
        }
      },
      "id": {
        "id": "fuse/controls/navigationinternal/enterhorizontal",
        "parentId": "fuse/controls/navigationinternal",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/navigationinternal/enterhorizontal",
        "href": "fuse/controls/navigationinternal/enterhorizontal"
      },
      "titles": {
        "indexTitle": "EnterHorizontal",
        "fullyQualifiedIndexTitle": "Fuse.Controls.NavigationInternal.EnterHorizontal"
      }
    },
    {
      "comment": {
        "brief": "This is an internal class used in Navigation. Do not use it. It is only exposed in the API due to a limitation in our toolset.",
        "full": "This is an internal class used in Navigation. Do not use it. It is only exposed in the API due to a limitation in our toolset.\n\n@hide",
        "attributes": {
          "advanced": true
        }
      },
      "id": {
        "id": "fuse/controls/navigationinternal/entervertical",
        "parentId": "fuse/controls/navigationinternal",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/navigationinternal/entervertical",
        "href": "fuse/controls/navigationinternal/entervertical"
      },
      "titles": {
        "indexTitle": "EnterVertical",
        "fullyQualifiedIndexTitle": "Fuse.Controls.NavigationInternal.EnterVertical"
      }
    },
    {
      "comment": {
        "brief": "This is an internal class used in Navigation. Do not use it. It is only exposed in the API due to a limitation in our toolset.",
        "full": "This is an internal class used in Navigation. Do not use it. It is only exposed in the API due to a limitation in our toolset.\n\n@hide",
        "attributes": {
          "advanced": true
        }
      },
      "id": {
        "id": "fuse/controls/navigationinternal/exithorizontal",
        "parentId": "fuse/controls/navigationinternal",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/navigationinternal/exithorizontal",
        "href": "fuse/controls/navigationinternal/exithorizontal"
      },
      "titles": {
        "indexTitle": "ExitHorizontal",
        "fullyQualifiedIndexTitle": "Fuse.Controls.NavigationInternal.ExitHorizontal"
      }
    },
    {
      "comment": {
        "brief": "This is an internal class used in Navigation. Do not use it. It is only exposed in the API due to a limitation in our toolset.",
        "full": "This is an internal class used in Navigation. Do not use it. It is only exposed in the API due to a limitation in our toolset.\n\n@hide",
        "attributes": {
          "advanced": true
        }
      },
      "id": {
        "id": "fuse/controls/navigationinternal/exitvertical",
        "parentId": "fuse/controls/navigationinternal",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/navigationinternal/exitvertical",
        "href": "fuse/controls/navigationinternal/exitvertical"
      },
      "titles": {
        "indexTitle": "ExitVertical",
        "fullyQualifiedIndexTitle": "Fuse.Controls.NavigationInternal.ExitVertical"
      }
    },
    {
      "id": {
        "id": "fuse/controls/navigationinternal/naventerhorizontal",
        "parentId": "fuse/controls/navigationinternal",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/navigationinternal/naventerhorizontal",
        "href": "fuse/controls/navigationinternal/naventerhorizontal"
      },
      "titles": {
        "indexTitle": "NavEnterHorizontal",
        "fullyQualifiedIndexTitle": "Fuse.Controls.NavigationInternal.NavEnterHorizontal"
      }
    },
    {
      "id": {
        "id": "fuse/controls/navigationinternal/navexithorizontal",
        "parentId": "fuse/controls/navigationinternal",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/navigationinternal/navexithorizontal",
        "href": "fuse/controls/navigationinternal/navexithorizontal"
      },
      "titles": {
        "indexTitle": "NavExitHorizontal",
        "fullyQualifiedIndexTitle": "Fuse.Controls.NavigationInternal.NavExitHorizontal"
      }
    },
    {
      "id": {
        "id": "fuse/controls/navigationinternal/navremovehorizontal",
        "parentId": "fuse/controls/navigationinternal",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/navigationinternal/navremovehorizontal",
        "href": "fuse/controls/navigationinternal/navremovehorizontal"
      },
      "titles": {
        "indexTitle": "NavRemoveHorizontal",
        "fullyQualifiedIndexTitle": "Fuse.Controls.NavigationInternal.NavRemoveHorizontal"
      }
    },
    {
      "id": {
        "id": "fuse/controls/navigationinternal/pagewhilenavigatingfreeze",
        "parentId": "fuse/controls/navigationinternal",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/navigationinternal/pagewhilenavigatingfreeze",
        "href": "fuse/controls/navigationinternal/pagewhilenavigatingfreeze"
      },
      "titles": {
        "indexTitle": "PageWhileNavigatingFreeze",
        "fullyQualifiedIndexTitle": "Fuse.Controls.NavigationInternal.PageWhileNavigatingFreeze"
      }
    },
    {
      "comment": {
        "brief": "General-purpose navigation container with on-demand instantiation and recycling of pages.",
        "full": "General-purpose navigation container with on-demand instantiation and recycling of pages.\n\n> Note: It is recommended that you first read the [Navigation guide](/docs/navigation/navigation) for a full overview of Fuse's navigation system.\n\n## Pages\n\n`Navigator` takes a collection of [templates](/docs/basics/creating-components#templates-ux-template) as its children.\nThis allows it to instantiate and recycle pages as it needs.\n\nYou can declare a node as a template by specifying the `ux:Template` attribute. The path of the route is matched to the `ux:Template` value to select a template.\n\n\t<Page ux:Template=\"matchPath\">\n\nYou can read more about templates [here](/docs/basics/creating-components#templates-ux-template).\n\nNon-template pages can also be used. The `Name` of the page will be used to match the path:\n\n\t<Page Name=\"matchPath\">\n\t\nThese pages always just have the one instance, will always be reused, and will never be removed. Otherwise they function the same as the template pages.\n\nHere are some general rules that will you help decide whether you want to use a template or non-template page:\n\n- If you need transitions between pages with the same path, but different parameter, then use a template.\n- If you have pages that impact performance even when inactive, or for other reasons should be removed when unused, then use a template.\n- If you have a page that should always exist to preserve state, or is very frequently navigated to, use a non-template.\n\nNote that templates and non-templates can be mixed within one `Navigator`.\n\n## Transitions\n\nNavigator comes with a set of default transitions that match the behavior of\n[`push()`](/docs/fuse/navigation/router/push_0f0d575d),\n[`goBack()`](/docs/fuse/navigation/router/goback_c0e37bee) and\n[`goto()`](/docs/fuse/navigation/router/goto_0f0d575d).\n\nTo have complete control over page transitions use the @PageView class. It works just like a `Navigator` but has no standard transitions or state changes.\n\nWhen using custom transitions be sure to add a @ReleasePage action. This instructs the `Navigator` and `PageView` on when it can reuse, discard, or add the page to its cache.\n\n## Example\n\t\nThe following example illustrates a basic navigation setup using a @Router and @Navigator.\nFor a complete introduction and proper examples of Fuse's navigation system, see the [Navigation guide](/docs/navigation/navigation).\n\t\n\t<JavaScript>\n\t\tmodule.exports = {\n\t\t\tgotoFirst: function() { router.goto(\"firstPage\"); },\n\t\t\tgotoSecond: function() { router.goto(\"secondPage\"); }\n\t\t};\n\t</JavaScript>\n\n\t<Router ux:Name=\"router\" />\n\n\t<DockPanel>\n\t\t<Navigator DefaultPath=\"firstPage\">\n\t\t\t<Page ux:Template=\"firstPage\">\n\t\t\t\t<Text Alignment=\"Center\">This is the first page.</Text>\n\t\t\t</Page>\n\t\t\t<Page ux:Template=\"secondPage\">\n\t\t\t\t<Text Alignment=\"Center\">This is the second page.</Text>\n\t\t\t</Page>\n\t\t</Navigator>\n\t\t\n\t\t<Grid Dock=\"Bottom\" Columns=\"1*,1*\">\n\t\t\t<Button Text=\"First page\" Padding=\"20\" Clicked=\"{gotoFirst}\" />\n\t\t\t<Button Text=\"Second page\" Padding=\"20\" Clicked=\"{gotoSecond}\" />\n\t\t</Grid>\n\t</DockPanel>\n\t\n## Navigation Order\n\nThe `Navigator` uses discrete page progress changes while navigating. The active page will have progress `0`. If a page is pushed it will start at `1` and be switched immediately to `0`. The previously active page will become `-1`. A \"back\" operation will reverse the transition.\n\nOnly progresses `-1`, `0`, and `1` are used. Further distance is not calculated, nor are partial values possible.\n\nSee [Navigation Order](articles:navigation/navigationorder.md)"
      },
      "id": {
        "id": "fuse/controls/navigator",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/navigator",
        "href": "fuse/controls/navigator"
      },
      "titles": {
        "indexTitle": "Navigator",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Navigator"
      }
    },
    {
      "comment": {
        "brief": "Allows navigation through swipe gestures.",
        "full": "Allows navigation through swipe gestures.\n\nWe can control the behavior of a `NavigatorSwipe` using the `How` parameter, which controls what happens when the specified direction is swiped. `PushBookmark` and `GotoBookmark` both\nnavigate to the bookmark specified by the `Bookmark` property in their own way(same behavior as @(Router) ). `Back` navigates backwards, but should be used with caution,\nas it does not check if there is anything to go back to, meaning it can generate errors.\n\nIn the following example, we demonstrate `NavigatorSwipe` being used on both a `Navigator`, and navigated pages. Some navigation rules are set up:\n\n * Swiping up while on the blue panel will go to a bookmark pointing to the indigo page.\n * Swiping up while on the indigo page will navigate you to the red page.\n * Swiping down on any page will go back to the previous page.\n\n    <Panel>\n        <Router ux:Name=\"router\" />\n\n        <JavaScript>\n            router.bookmark({\n                name: \"indigo\",\n                path: [ \"indigoPanel\", { } ]\n            });\n            router.bookmark({\n                name: \"red\",\n                path: [ \"redPanel\", { } ]\n            });\n        </JavaScript>\n\n        <DockPanel ux:Class=\"NamedPanel\">\n            <string ux:Property=\"Title\" />\n            <Text Value=\"{Property Title}\" FontSize=\"30\" Alignment=\"TopCenter\" Margin=\"20\" />\n        </DockPanel>\n        <Navigator DefaultPath=\"bluePanel\">\n            <NamedPanel Title=\"Blue panel\" ux:Template=\"bluePanel\" Color=\"#2196F3\">\n                <NavigatorSwipe How=\"PushBookmark\" Bookmark=\"indigo\" Direction=\"Up\"/>\n            </NamedPanel>\n            <NamedPanel Title=\"Red panel\" ux:Template=\"redPanel\" Color=\"#F44336\" />\n            <NamedPanel Title=\"Indigo panel\" ux:Template=\"indigoPanel\" Color=\"#3F51B5\">\n                <NavigatorSwipe How=\"PushBookmark\" Bookmark=\"red\" Direction=\"Up\"/>\n            </NamedPanel>\n            <NavigatorSwipe How=\"Back\" Direction=\"Down\"/>\n        </Navigator>\n    </Panel>"
      },
      "id": {
        "id": "fuse/controls/navigatorswipe",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/navigatorswipe",
        "href": "fuse/controls/navigatorswipe"
      },
      "titles": {
        "indexTitle": "NavigatorSwipe",
        "fullyQualifiedIndexTitle": "Fuse.Controls.NavigatorSwipe"
      }
    },
    {
      "id": {
        "id": "fuse/controls/nothing",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/nothing",
        "href": "fuse/controls/nothing"
      },
      "titles": {
        "indexTitle": "Nothing",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Nothing"
      }
    },
    {
      "comment": {
        "brief": "Deprecated, for backwards compatibility",
        "full": "Deprecated, for backwards compatibility"
      },
      "id": {
        "id": "fuse/controls/number",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/number",
        "href": "fuse/controls/number"
      },
      "titles": {
        "indexTitle": "Number",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Number"
      }
    },
    {
      "comment": {
        "brief": "Represents a page that participates in navigation.",
        "full": "Represents a page that participates in navigation.\n\nYou generally want to use this as the base class when implementing your page views, although any @Visual can be used.\n\nSee the [navigation guide](/docs/navigation/navigation) for an introductory guide to implementing navigation in your app.\n\n## Example\n\nThe following example illustrates subclassing @Page and using it in a @PageControl.\n\n    <Page ux:Class=\"MyPage\">\n        <Text Alignment=\"Center\">This is a page!</Text>\n    </Page>\n\n    <PageControl>\n        <MyPage />\n        <MyPage />\n    </PageControl>\n\n## Remarks\n\n@Page exposes a local @Uno.UX.Resource \"Title\", which can be set using the @Title property."
      },
      "id": {
        "id": "fuse/controls/page",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/page",
        "href": "fuse/controls/page"
      },
      "titles": {
        "indexTitle": "Page",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Page"
      }
    },
    {
      "comment": {
        "brief": "Provides standard transitions, user interaction, and page handling for a basic linear navigation.",
        "full": "Provides standard transitions, user interaction, and page handling for a basic linear navigation.\n\n# Examples\n\nThe following example illustrates the default behavior of `PageControl`, which is to slide the pages in response to swipe gestures:\n\n    <PageControl>\n        <Panel Background=\"Red\"/>\n        <Panel Background=\"Blue\"/>\n    </PageControl>\n\n`PageControl` is a router outlet, meaning that it can be controlled by a @Router.\nYou can disable this behavior by setting the @IsRouterOutlet property to `false`.\n\n    <JavaScript>\n        module.exports = {\n            gotoPage1: function() { router.goto(\"page1\"); },\n            gotoPage2: function() { router.goto(\"page2\"); },\n            gotoPage3: function() { router.goto(\"page3\"); }\n        };\n    </JavaScript>\n\n    <Router ux:Name=\"router\" />\n\n    <PageControl>\n        <Panel ux:Name=\"page1\" Color=\"#e74c3c\" Clicked=\"{gotoPage2}\" />\n        <Panel ux:Name=\"page2\" Color=\"#2ecc71\" Clicked=\"{gotoPage3}\" />\n        <Panel ux:Name=\"page3\" Color=\"#3498db\" Clicked=\"{gotoPage1}\" />\n    </PageControl>\n\nBy using data binding, you can set the currently active page by `Name` using the `Active` property.\nIn the following example, We have three pages and a button that returns the user to the first page.\n\n    <DockPanel>\n        <JavaScript>\n            var Observable = require(\"FuseJS/Observable\");\n            var currentPage = Observable(\"page1\");\n            function clickHandler() {\n                currentPage.value = \"page1\";\n            }\n            module.exports = {\n                clickHandler: clickHandler,\n                currentPage: currentPage\n            };\n        </JavaScript>\n        <PageControl Active=\"{currentPage}\">\n            <Panel Name=\"page1\" Background=\"Red\"/>\n            <Panel Name=\"page2\" Background=\"Green\"/>\n            <Panel Name=\"page3\" Background=\"Blue\"/>\n        </PageControl>\n        <Button Text=\"Home\" Clicked=\"{clickHandler}\" Dock=\"Bottom\"/>\n    </DockPanel>\n\nTake a look at the [Slides](/examples/page-control) example to see how this can be used in practice.\n\n## Navigation Order\n\nThe pages of a `PageControl` are ordered front to back, with the first child being in the front. Going forward means going towards the first child and going backwards means going towards the last child.\n\n`PageControl` uses continous navigation between pages (not discrete changes).\n\nSee [Navigation Order](articles:navigation/navigationorder.md)"
      },
      "id": {
        "id": "fuse/controls/pagecontrol",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/pagecontrol",
        "href": "fuse/controls/pagecontrol"
      },
      "titles": {
        "indexTitle": "PageControl",
        "fullyQualifiedIndexTitle": "Fuse.Controls.PageControl"
      }
    },
    {
      "comment": {
        "brief": "Builds indicator icons for each page of a @PageControl based on a specified template, and displays them next to each other. To use it, you have to provide a template named `Dot`,\nas well as providing a @PageControl to listen to through the `Navigation` property.",
        "full": "Builds indicator icons for each page of a @PageControl based on a specified template, and displays them next to each other. To use it, you have to provide a template named `Dot`,\nas well as providing a @PageControl to listen to through the `Navigation` property.\n\nThe @ActivatingAnimation animator can be used to animate a `Dot` when its corresponding page is active.\n\n# Example\n\nThe following example shows the use of `PageIndicator` to indicate the current progress in a @PageControl navigation, by scaling the rectangle indicator representing the current page by a `Factor` of 1.3.\n\n    <DockPanel>\n        <JavaScript>\n            var Observable = require(\"FuseJS/Observable\");\n            module.exports.pages = Observable(\"#FF0000\", \"#00FF00\", \"#0000FF\");\n        </JavaScript>\n        <PageControl ux:Name=\"nav\">\n            <Each Items=\"{pages}\">\n                <Page Color=\"data()\">\n\n                </Page>\n            </Each>\n        </PageControl>\n        <PageIndicator Dock=\"Bottom\" Navigation=\"nav\" Alignment=\"Center\">\n            <Rectangle ux:Template=\"Dot\" Width=\"30\" Height=\"30\" Margin=\"10\" Color=\"#555\">\n                <ActivatingAnimation>\n                    <Scale Factor=\"1.3\" />\n                </ActivatingAnimation>\n            </Rectangle>\n        </PageIndicator>\n    </DockPanel>"
      },
      "id": {
        "id": "fuse/controls/pageindicator",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/pageindicator",
        "href": "fuse/controls/pageindicator"
      },
      "titles": {
        "indexTitle": "PageIndicator",
        "fullyQualifiedIndexTitle": "Fuse.Controls.PageIndicator"
      }
    },
    {
      "id": {
        "id": "fuse/controls/pageindicatordot",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/pageindicatordot",
        "href": "fuse/controls/pageindicatordot"
      },
      "titles": {
        "indexTitle": "PageIndicatorDot",
        "fullyQualifiedIndexTitle": "Fuse.Controls.PageIndicatorDot"
      }
    },
    {
      "comment": {
        "brief": "A @Navigator without standard transitions.\nThis is convenient when you want to provide custom transitions for all pages.",
        "full": "A @Navigator without standard transitions.\nThis is convenient when you want to provide custom transitions for all pages.\n\n`<PageView />` is equivalent to the following:\n\n    <Navigator Transition=\"None\" GotoState=\"Unchanged\" />"
      },
      "id": {
        "id": "fuse/controls/pageview",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/pageview",
        "href": "fuse/controls/pageview"
      },
      "titles": {
        "indexTitle": "PageView",
        "fullyQualifiedIndexTitle": "Fuse.Controls.PageView"
      }
    },
    {
      "comment": {
        "brief": "Performs the default layout on the children, where all children get all available space.",
        "full": "Performs the default layout on the children, where all children get all available space.\n\nChildren of a Panel will by default fill its entire space. If a panel contains several children, it simply layers them on top of each other. Combining this behavior with @Alignment, @Margin and @Padding can be quite useful in many situations.\n\nPanels are assumed to be containers for other elements. Setting the `Color` property will therefore\nset the @Background property to a @SolidColor fill.\n\n**Note:** the element order in a Panel is the same as the layer order in popular graphics packages such as Photoshop; the layer that appears first in the UX-file will be layered on top of elements appearing later in the file.\n\n# Example\n\nThis example demonstrates a simple `Panel` with a couple of overlapping children, and many of the properties often used with `Panel` set:\n\n    <Panel Margin=\"10\" Padding=\"2,4,6,8\" Color=\"#444\">\n        <Text>This child will be drawn over the other child</Text>\n        <Rectangle Color=\"#eee\" />\n    </Panel>"
      },
      "id": {
        "id": "fuse/controls/panel",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/panel",
        "href": "fuse/controls/panel"
      },
      "titles": {
        "indexTitle": "Panel",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Panel"
      }
    },
    {
      "id": {
        "id": "fuse/controls/path",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/path",
        "href": "fuse/controls/path"
      },
      "titles": {
        "indexTitle": "Path",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Path"
      }
    },
    {
      "comment": {
        "brief": "Represents a reactive object-member look-up operation.",
        "full": "Represents a reactive object-member look-up operation."
      },
      "id": {
        "id": "fuse/controls/pathexpression",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/pathexpression",
        "href": "fuse/controls/pathexpression"
      },
      "titles": {
        "indexTitle": "PathExpression",
        "fullyQualifiedIndexTitle": "Fuse.Controls.PathExpression"
      }
    },
    {
      "comment": {
        "brief": "The point at a normalized distance (0..1) along a path.",
        "full": "The point at a normalized distance (0..1) along a path.",
        "attributes": {
          "experimental": true
        }
      },
      "id": {
        "id": "fuse/controls/pathpointatdistance",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/pathpointatdistance",
        "href": "fuse/controls/pathpointatdistance"
      },
      "titles": {
        "indexTitle": "PathPointAtDistance",
        "fullyQualifiedIndexTitle": "Fuse.Controls.PathPointAtDistance"
      }
    },
    {
      "comment": {
        "brief": "The point at a normalized time (0..1) along a path.",
        "full": "The point at a normalized time (0..1) along a path.",
        "attributes": {
          "experimental": true
        }
      },
      "id": {
        "id": "fuse/controls/pathpointattime",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/pathpointattime",
        "href": "fuse/controls/pathpointattime"
      },
      "titles": {
        "indexTitle": "PathPointAtTime",
        "fullyQualifiedIndexTitle": "Fuse.Controls.PathPointAtTime"
      }
    },
    {
      "comment": {
        "brief": "The tangent angle at a normalized distance (0..1) along a path.",
        "full": "The tangent angle at a normalized distance (0..1) along a path.",
        "attributes": {
          "experimental": true
        }
      },
      "id": {
        "id": "fuse/controls/pathtangentangleatdistance",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/pathtangentangleatdistance",
        "href": "fuse/controls/pathtangentangleatdistance"
      },
      "titles": {
        "indexTitle": "PathTangentAngleAtDistance",
        "fullyQualifiedIndexTitle": "Fuse.Controls.PathTangentAngleAtDistance"
      }
    },
    {
      "comment": {
        "brief": "The tangent angle (radians) at a normalized time (0..1) along a path.",
        "full": "The tangent angle (radians) at a normalized time (0..1) along a path.",
        "attributes": {
          "experimental": true
        }
      },
      "id": {
        "id": "fuse/controls/pathtangentangleattime",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/pathtangentangleattime",
        "href": "fuse/controls/pathtangentangleattime"
      },
      "titles": {
        "indexTitle": "PathTangentAngleAtTime",
        "fullyQualifiedIndexTitle": "Fuse.Controls.PathTangentAngleAtTime"
      }
    },
    {
      "id": {
        "id": "fuse/controls/photo",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/photo",
        "href": "fuse/controls/photo"
      },
      "titles": {
        "indexTitle": "Photo",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Photo"
      }
    },
    {
      "id": {
        "id": "fuse/controls/photocaptured",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/photocaptured",
        "href": "fuse/controls/photocaptured"
      },
      "titles": {
        "indexTitle": "PhotoCaptured",
        "fullyQualifiedIndexTitle": "Fuse.Controls.PhotoCaptured"
      }
    },
    {
      "id": {
        "id": "fuse/controls/cameraview/photocaptureimagesource",
        "parentId": "fuse/controls/cameraview",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/cameraview/photocaptureimagesource",
        "href": "fuse/controls/cameraview/photocaptureimagesource"
      },
      "titles": {
        "indexTitle": "PhotoCaptureImageSource",
        "fullyQualifiedIndexTitle": "Fuse.Controls.PhotoCaptureImageSource"
      }
    },
    {
      "id": {
        "id": "fuse/controls/cameraview/photoloaded",
        "parentId": "fuse/controls/cameraview",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/cameraview/photoloaded",
        "href": "fuse/controls/cameraview/photoloaded"
      },
      "titles": {
        "indexTitle": "PhotoLoaded",
        "fullyQualifiedIndexTitle": "Fuse.Controls.PhotoLoaded"
      }
    },
    {
      "id": {
        "id": "fuse/controls/photooption",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/photooption",
        "href": "fuse/controls/photooption"
      },
      "titles": {
        "indexTitle": "PhotoOption",
        "fullyQualifiedIndexTitle": "Fuse.Controls.PhotoOption"
      }
    },
    {
      "comment": {
        "brief": "PhotoPreview",
        "full": "PhotoPreview\n\nThis element provides a fast path for previewing photos\ncaptured with `CameraView` inside a `NativeViewHost`.\n\nA `PhotoPreview` has to be connected to `CameraView`. Whenever\na photo is captured it will be loaded by the connected `PhotoPreview`\nimmediately. The `PhotoPreview` can also be connected to a\n`CameraView.PhotoLoaded` trigger which can be used to respond\nwhen the photo is ready.\n\nExample:\n\n    <NativeViewHost>\n        <Panel ux:Name=\"previewPanel\" Visibility=\"Hidden\">\n            <Button Text=\"DISMISS\" Alignment=\"Bottom\" Margin=\"10\">\n                <Clicked>\n                    <Set previewPanel.Visibility=\"Hidden\" />\n                    <Set cameraPanel.Visibility=\"Visible\" />\n                </Clicked>\n            </Button>\n            <PhotoPreview ux:Name=\"photoPreview\" CameraView=\"cameraView\" PreviewStretchMode=\"UniformToFill\" />\n        </Panel>\n        <Panel ux:Name=\"cameraPanel\">\n            <CameraView ux:Name=\"cameraView\" PreviewStretchMode=\"UniformToFill\" ClipToBounds=\"true\" />\n        </Panel>\n        <CameraView.PhotoLoaded PhotoPreview=\"photoPreview\">\n            <Set previewPanel.Visibility=\"Visible\" />\n            <Set cameraPanel.Visibility=\"Hidden\" />\n        </CameraView.PhotoLoaded>\n    </NativeViewHost>"
      },
      "id": {
        "id": "fuse/controls/photopreview",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/photopreview",
        "href": "fuse/controls/photopreview"
      },
      "titles": {
        "indexTitle": "PhotoPreview",
        "fullyQualifiedIndexTitle": "Fuse.Controls.PhotoPreview"
      }
    },
    {
      "id": {
        "id": "fuse/controls/photopreviewbase",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/photopreviewbase",
        "href": "fuse/controls/photopreviewbase"
      },
      "titles": {
        "indexTitle": "PhotoPreviewBase",
        "fullyQualifiedIndexTitle": "Fuse.Controls.PhotoPreviewBase"
      }
    },
    {
      "id": {
        "id": "fuse/controls/photoresolution",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/photoresolution",
        "href": "fuse/controls/photoresolution"
      },
      "titles": {
        "indexTitle": "PhotoResolution",
        "fullyQualifiedIndexTitle": "Fuse.Controls.PhotoResolution"
      }
    },
    {
      "id": {
        "id": "fuse/controls/placeholder",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/placeholder",
        "href": "fuse/controls/placeholder"
      },
      "titles": {
        "indexTitle": "Placeholder",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Placeholder"
      }
    },
    {
      "comment": {
        "brief": "Baseclass for controls that contains a range value",
        "full": "Baseclass for controls that contains a range value\n\nThis is the baseclass for @Controls that hold a range value. For example @Slider.\n\nRangeControl is what you want to use if your component will hold a range value,\nRangeControl support for example @ProgressAnimation which makes it nice to use in\nanimation.\n\n## Example\n\n    <StackPanel>\n\n        <RangeControl ux:Class=\"CustomSlider\" Padding=\"16,2,16,2\" Margin=\"2\" >\n            <LinearRangeBehavior />\n            <Panel>\n                <Circle Anchor=\"50%,50%\" ux:Name=\"thumb\" Alignment=\"Left\" Color=\"#ffffffee\" Width=\"28\" Height=\"28\" />\n            </Panel>\n            <Rectangle Layer=\"Background\" Color=\"#aaaaaacc\" CornerRadius=\"45\" />\n            <ProgressAnimation>\n                <Move Target=\"thumb\" X=\"1\" RelativeTo=\"ParentSize\" />\n            </ProgressAnimation>\n        </RangeControl>\n\n        <CustomSlider />\n\n    </StackPanel>\n\n## Available RangeControl classes\n\n[subclass Fuse.Controls.RangeControl]"
      },
      "id": {
        "id": "fuse/controls/rangecontrol",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/rangecontrol",
        "href": "fuse/controls/rangecontrol"
      },
      "titles": {
        "indexTitle": "RangeControl",
        "fullyQualifiedIndexTitle": "Fuse.Controls.RangeControl"
      }
    },
    {
      "id": {
        "id": "fuse/controls/rangecontrol2d",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/rangecontrol2d",
        "href": "fuse/controls/rangecontrol2d"
      },
      "titles": {
        "indexTitle": "RangeControl2D",
        "fullyQualifiedIndexTitle": "Fuse.Controls.RangeControl2D"
      }
    },
    {
      "id": {
        "id": "fuse/controls/recording",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/recording",
        "href": "fuse/controls/recording"
      },
      "titles": {
        "indexTitle": "Recording",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Recording"
      }
    },
    {
      "id": {
        "id": "fuse/controls/recordingsession",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/recordingsession",
        "href": "fuse/controls/recordingsession"
      },
      "titles": {
        "indexTitle": "RecordingSession",
        "fullyQualifiedIndexTitle": "Fuse.Controls.RecordingSession"
      }
    },
    {
      "comment": {
        "brief": "Displays a rectangle.",
        "full": "Displays a rectangle.\n\nSetting the rectangle's `Color` property gives it a solid color fill:\n\n    <Rectangle Color=\"Blue\" Width=\"100\" Height=\"100\" />\n\nRectangles can have an arbitrary number of @Fills and @Strokes. Fills are of\ntype @Brush, and can be specified as tags inside the rectangle.\n\n> Note that by default, a Rectangle has no fills or strokes, making it\n> invisible unless you provide some or specify something.\n\n## Example\n\n    <Grid Alignment=\"Center\" Rows=\"100,100,100\" Columns=\"100\">\n        <Rectangle Margin=\"10\" CornerRadius=\"4\">\n            <SolidColor Color=\"#a542db\" />\n        </Rectangle>\n        <Rectangle Margin=\"10\" CornerRadius=\"4\">\n            <LinearGradient>\n                <GradientStop Offset=\"0\" Color=\"#a542db\" />\n                <GradientStop Offset=\"1\" Color=\"#3579e6\" />\n            </LinearGradient>\n        </Rectangle>\n        <Rectangle Margin=\"10\" CornerRadius=\"4\">\n            <Stroke Offset=\"4\" Width=\"1\" Color=\"#3579e6\" />\n            <SolidColor Color=\"#3579e6\" />\n        </Rectangle>\n    </Grid>"
      },
      "id": {
        "id": "fuse/controls/rectangle",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/rectangle",
        "href": "fuse/controls/rectangle"
      },
      "titles": {
        "indexTitle": "Rectangle",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Rectangle"
      }
    },
    {
      "comment": {
        "brief": "Draws a polygon with a number of equal length sides.",
        "full": "Draws a polygon with a number of equal length sides."
      },
      "id": {
        "id": "fuse/controls/regularpolygon",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/regularpolygon",
        "href": "fuse/controls/regularpolygon"
      },
      "titles": {
        "indexTitle": "RegularPolygon",
        "fullyQualifiedIndexTitle": "Fuse.Controls.RegularPolygon"
      }
    },
    {
      "comment": {
        "attributes": {
          "deprecated": true
        }
      },
      "id": {
        "id": "fuse/controls/rightframebackground",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/rightframebackground",
        "href": "fuse/controls/rightframebackground"
      },
      "titles": {
        "indexTitle": "RightFrameBackground",
        "fullyQualifiedIndexTitle": "Fuse.Controls.RightFrameBackground"
      }
    },
    {
      "comment": {
        "brief": "`SafeEdgePanel` compensates for space taken up by the on-screen keyboard, status bar, and other OS-specific elements on the edges of the screen.  It should be used for any panel that touches any edge of the screen.",
        "full": "`SafeEdgePanel` compensates for space taken up by the on-screen keyboard, status bar, and other OS-specific elements on the edges of the screen.  It should be used for any panel that touches any edge of the screen.\n\nSee the article on [Safe Layout](articles:layout/safe-layout.md) for more details."
      },
      "id": {
        "id": "fuse/controls/safeedgepanel",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/safeedgepanel",
        "href": "fuse/controls/safeedgepanel"
      },
      "titles": {
        "indexTitle": "SafeEdgePanel",
        "fullyQualifiedIndexTitle": "Fuse.Controls.SafeEdgePanel"
      }
    },
    {
      "id": {
        "id": "fuse/controls/scrollpositionchangedargs",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/scrollpositionchangedargs",
        "href": "fuse/controls/scrollpositionchangedargs"
      },
      "titles": {
        "indexTitle": "ScrollPositionChangedArgs",
        "fullyQualifiedIndexTitle": "Fuse.Controls.ScrollPositionChangedArgs"
      }
    },
    {
      "comment": {
        "brief": "Used to navigate contents that are larger than the available size.",
        "full": "Used to navigate contents that are larger than the available size.\n\n# Example\n\nThis example demonstrates the use of `ScrollView` by having it contain a `Panel` that would normally be too big to be viewed.\n\n    <ScrollView>\n        <Panel Width=\"2000\" Height=\"2000\" />\n    </ScrollView>\n\nYou may also constrain the directions the ScrollView is allowed to scroll in using the `AllowedScrollDirections` property.\n\n    <ScrollView AllowedScrollDirections=\"Horizontal\">\n        <!-- Contents -->\n    </ScrollView>\n\nBy default, ScrollView tries to take up the same amount of space as its content in the scrollable directions.\nHowever, when placed in a @Panel (or @DockPanel, @Grid, etc.), the size of the ScrollView itself will be limited to the size of its parent.\n\n> **Note**\n>\n> *@StackPanel* does not limit the size of its children, but rather lets them extend to whatever size they want to take up.\n> This is a problem with ScrollView, since it inherits the size of its content by default.\n> If we were to place a ScrollView inside a @StackPanel, the size of the ScrollView would extend beyond the bounds of the screen.\n> What we want instead is that only the ScrollView's *content* should extend to whatever size it needs, while the ScrollView itself is constrained to the bounds of its parent.\n>\n> This means that *a ScrollView inside a @StackPanel probably won't behave as you expect it to*.\n> Alternatives include using a different type of @Panel (e.g. a @DockPanel) as the parent of the ScrollView or specifying its size explicitly.\n\nThe `Alignment` of the child content influences the `MinScroll` and `MaxScroll` values as well as the starting `ScrollPosition`.\nFor example a `Bottom` aligned element will start with the bottom of the content visible (aligned to the bottom of the `ScrollView`) and `MinScroll` will be negative, as the overflow is to the top of the `ScrollView`.\n\n## LayoutMode\n\nBy default a `ScrollView` keeps a consistent `ScrollPosition` when the layout changes. This may result in jumping when content is added/removed.\n\nAn alternate mode `LayoutMode=\"PreserveVisual\"` instead attempts to maintain visual consistency when its children or parent layout is changed. It assumes it's immediate content is a container and looks at that container's children.  For example, a layout like this:\n\n    <ScrollView>\n        <StackPanel>\n            <Panel/>\n            <Panel/>\n        <StackPanel>\n    </ScrollView>\n\nVisuals without `LayoutRole=Standard` are not considered when retaining the visual consistency. The `LayoutMode` property can be used to adjust this behavior."
      },
      "id": {
        "id": "fuse/controls/scrollview",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/scrollview",
        "href": "fuse/controls/scrollview"
      },
      "titles": {
        "indexTitle": "ScrollView",
        "fullyQualifiedIndexTitle": "Fuse.Controls.ScrollView"
      }
    },
    {
      "comment": {
        "brief": "A `ScrollView` is a control that allows scrolling over the content.\nIt only accepts a single child, from which the size of the scrollable area is calculated.\nThat child can be a single element or a UX tree of controls.",
        "full": "A `ScrollView` is a control that allows scrolling over the content.\nIt only accepts a single child, from which the size of the scrollable area is calculated.\nThat child can be a single element or a UX tree of controls.\n\nBy default, ScrollView tries to take up the same amount of space as its content in the scrollable direction.\nHowever, when placed in a @Panel (or @DockPanel, @Grid, etc.), the size of the ScrollView itself will be limited to the size of its parent.\n\n> *Note*\n>\n> @StackPanel does not limit the size of its children, but rather lets them extend to whatever size they want to take up.\n> This is a problem with ScrollView, since it by default inherits the size of its content.\n> If we were to place a ScrollView inside a StackPanel, the size of the ScrollView could extend beyond the bounds of the screen.\n> What we want instead is that only the ScrollView's *content* should extend to whatever size it needs, while the ScrollView itself is contained within the bounds of the screen.\n>\n> This means that **a ScrollView inside a @StackPanel probably won't behave as you expect it to**.\n> We recommend using a different type of @Panel (e.g. a @DockPanel) as the parent of the ScrollView or setting the ScrollView's height explicitly.\n\nThe `Alignment` of the child content influences the `MinScroll` and `MaxScroll` values as well as the starting `ScrollPosition`.\nFor example a `Bottom` aligned element will start with the bottom of the content visible (aligned to the bottom of the `ScrollView`) and `MinScroll` will be negative, as the overflow is to the top of the `ScrollView`.\n\n## LayoutMode\n\nBy default a `ScrollView` keeps a consistent `ScrollPosition` when the layout changes. This may result in jumping when content is added/removed.\n\nAn alternate mode `LayoutMode=\"PreserveVisual\"` instead attempts to maintain visual consistency when its children or parent layout is changed. It assumes it's immediate content is a container and looks at that container's children.  For example, a layout like this:\n\n    <ScrollView>\n        <StackPanel>\n            <Panel/>\n            <Panel/>\n        <StackPanel>\n    </ScrollView>\n\nVisuals without `LayoutRole=Standard` are not considered when retaining the visual consistency. The `LayoutMode` property can be used to adjust this behavior."
      },
      "id": {
        "id": "fuse/controls/scrollviewbase",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/scrollviewbase",
        "href": "fuse/controls/scrollviewbase"
      },
      "titles": {
        "indexTitle": "ScrollViewBase",
        "fullyQualifiedIndexTitle": "Fuse.Controls.ScrollViewBase"
      }
    },
    {
      "comment": {
        "brief": "Paging and loading manager for a list of items. Allows a large, or infinite list, to be displayed in a `ScrollView`.",
        "full": "Paging and loading manager for a list of items. Allows a large, or infinite list, to be displayed in a `ScrollView`.\n\nThis controls the `Offset` and `Limit` properties of an `Each` inside a `ScrollView`. It limits the number of items displayed to improve performance.\n\nThe setup that works now is with a `StackPanel` (Horizontal or Vertical)\n\n    <ScrollView LayoutMode=\"PreserveVisual\">\n        <StackPanel>\n            <Each Items=\"{items}\" Reuse=\"Frame\" ux:Name=\"theEach\">\n                <Panel Color=\"#AAA\">\n                    <Text Value=\"{title}\"/>\n                </Panel>\n            </Each>\n        </StackPanel>\n\n        <ScrollViewPager Each=\"theEach\" ReachedEnd=\"{loadMore}\"/>\n    </ScrollView>\n\nIt's required to use `LayoutMode=\"PreserveVisual\"`, otherwise the scrolling will not function correctly. `Reuse=\"Frame\"` is optional but recommended: it improves performance by reusing objects.\n\n`ReachedEnd` is called when the true end of the list is reached and more data is required. It's actually called somewhat before the end is reached, thus allowing the loading process to start before the user reaches the end. There is also a `RechedStart` to allow loading when scrolling the opposite direction.  Neither of these callbacks are mandatory; `ScrollViewPager` is also helpful for displaying large static lists.",
        "attributes": {
          "experimental": true
        }
      },
      "id": {
        "id": "fuse/controls/scrollviewpager",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/scrollviewpager",
        "href": "fuse/controls/scrollviewpager"
      },
      "titles": {
        "indexTitle": "ScrollViewPager",
        "fullyQualifiedIndexTitle": "Fuse.Controls.ScrollViewPager"
      }
    },
    {
      "id": {
        "id": "fuse/controls/scrollviewpagerargs",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/scrollviewpagerargs",
        "href": "fuse/controls/scrollviewpagerargs"
      },
      "titles": {
        "indexTitle": "ScrollViewPagerArgs",
        "fullyQualifiedIndexTitle": "Fuse.Controls.ScrollViewPagerArgs"
      }
    },
    {
      "id": {
        "id": "fuse/controls/segmentedshape",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/segmentedshape",
        "href": "fuse/controls/segmentedshape"
      },
      "titles": {
        "indexTitle": "SegmentedShape",
        "fullyQualifiedIndexTitle": "Fuse.Controls.SegmentedShape"
      }
    },
    {
      "comment": {
        "brief": "Draws a shadow behind an element.",
        "full": "Draws a shadow behind an element.\n\n## Example\n\nThis example shows a rounded rectangle with a shadow that animates in size when pressed:\n\n    <Rectangle Width=\"100\" Height=\"100\" Color=\"Red\" CornerRadius=\"5\">\n        <Shadow ux:Name=\"RectangleShadow\" Size=\"10\" />\n        <Clicked>\n            <Change DurationBack=\"0.2\" RectangleShadow.Size=\"20\" />\n        </Clicked>\n    </Rectangle>"
      },
      "id": {
        "id": "fuse/controls/shadow",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/shadow",
        "href": "fuse/controls/shadow"
      },
      "titles": {
        "indexTitle": "Shadow",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Shadow"
      }
    },
    {
      "comment": {
        "brief": "Displays a shape with fills and strokes",
        "full": "Displays a shape with fills and strokes\n\nShape is the baseclass for all shapes in fuse. A shape can have @Fills and @Strokes.\nBy default a shape does not have a size, fills or strokes. You must add some for it to be visible.\n\n## Example:\n\n    <Rectangle Width=\"200\" Height=\"100\" CornerRadius=\"16\">\n        <LinearGradient>\n            <GradientStop Offset=\"0\" Color=\"#0ee\" />\n            <GradientStop Offset=\"1\" Color=\"#e0e\" />\n        </LinearGradient>\n        <Stroke Width=\"2\">\n            <SolidColor Color=\"#000\" />\n        </Stroke>\n    </Rectangle>\n\n    <Circle Width=\"200\" Height=\"100\" >\n        <LinearGradient>\n            <GradientStop Offset=\"0\" Color=\"#cf0\" />\n            <GradientStop Offset=\"1\" Color=\"#f40\" />\n        </LinearGradient>\n        <Stroke Width=\"1\">\n            <SolidColor Color=\"#000\" />\n        </Stroke>\n    </Circle>\n\n## Available Shape classes:\n\n[subclass Fuse.Controls.Shape]\n\n## Strokes\n\nUse only one of the methods of specifying strokes. Either list the desired `Stroke` objects as children, or provide a single object to the `Stroke` property, or specify one or more of `StrokeColor`, `StrokeWidth`, and `StrokeAlignment`.\n\nIt is undefined what happens if the different ways of specifying a stroke are combined."
      },
      "id": {
        "id": "fuse/controls/shape",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/shape",
        "href": "fuse/controls/shape"
      },
      "titles": {
        "indexTitle": "Shape",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Shape"
      }
    },
    {
      "comment": {
        "brief": "Displays a slider",
        "full": "Displays a slider\n\nSlider is a @RangeControl with a simple slider look. This @Control\nwill get the platform native look on mobile export targets when\nused in a @NativeViewHost.\n\n## Example:\n\n    <StackPanel>\n        <Slider Value=\"50\" Minimum=\"0\" Maximum=\"100\" />\n        <NativeViewHost>\n            <Slider Value=\"0.25\" Minimum=\"0\" Maximum=\"1\" />\n        </NativeViewHost>\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/controls/slider",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/slider",
        "href": "fuse/controls/slider"
      },
      "titles": {
        "indexTitle": "Slider",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Slider"
      }
    },
    {
      "comment": {
        "brief": "Stacks children vertically (default) or horizontally.",
        "full": "Stacks children vertically (default) or horizontally.\n\nThe default layout is a vertical stack, but one can use the Orientation property to specify that the stack should be laid out horizontally.\n\n    <StackPanel Orientation=\"Horizontal\">\n        ... elements ...\n    </StackPanel>\n\nYou can use the @ItemSpacing property to make some space between elements. It differs from setting Margin on each child, in that it only\nadjusts the space directly between the elements, not the space around each of them.\n\n## Example\n\nThe following example shows three Panels in a StackPanel, spaced using the ItemSpacing property:\n\n    <StackPanel ItemSpacing=\"20\">\n        <Panel Height=\"100\" Background=\"Red\"/>\n        <Panel Height=\"100\" Background=\"Green\"/>\n        <Panel Height=\"100\" Background=\"Blue\"/>\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/controls/stackpanel",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/stackpanel",
        "href": "fuse/controls/stackpanel"
      },
      "titles": {
        "indexTitle": "StackPanel",
        "fullyQualifiedIndexTitle": "Fuse.Controls.StackPanel"
      }
    },
    {
      "comment": {
        "brief": "Displays a star",
        "full": "Displays a star\n\nStar is a @Shape and does not have fills, strokes and a size by default,\nyou must set this for it to be visible.\n\n## Example:\n\n    <Star Width=\"200\" Height=\"200\" Ratio=\"0.4\" >\n        <LinearGradient>\n            <GradientStop Offset=\"0\" Color=\"#0ee\" />\n            <GradientStop Offset=\"1\" Color=\"#e0e\" />\n        </LinearGradient>\n    </Star>"
      },
      "id": {
        "id": "fuse/controls/star",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/star",
        "href": "fuse/controls/star"
      },
      "titles": {
        "indexTitle": "Star",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Star"
      }
    },
    {
      "comment": {
        "brief": "Compensates for space taken up by the status bar.",
        "full": "Compensates for space taken up by the status bar.\n\n`StatusBarBackground` will always have the same size as the status bar across all platforms and devices.\n\n## Example\n\nThe following example demonstrates how a `StatusBarBackground` can be docked inside a `DockPanel` to ensure the rest of the app's content (inside by the `Panel`) will be placed below the status bar.\n\n    <DockPanel>\n        <StatusBarBackground Dock=\"Top\"/>\n        <Panel>\n            <Text>This text will be below the status bar</Text>\n        </Panel>\n    </DockPanel>\n\nSee also @BottomBarBackground."
      },
      "id": {
        "id": "fuse/controls/statusbarbackground",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/statusbarbackground",
        "href": "fuse/controls/statusbarbackground"
      },
      "titles": {
        "indexTitle": "StatusBarBackground",
        "fullyQualifiedIndexTitle": "Fuse.Controls.StatusBarBackground"
      }
    },
    {
      "comment": {
        "brief": "Displays a switch",
        "full": "Displays a switch\n\nA switch implemented with @ToggleControl. The platform\nnative switch will be displayed if used in NativeViewHost.\n\n## Example\n\n    <StackPanel>\n        <Switch ux:Name=\"_sw\">\n            <WhileTrue Value=\"{ReadProperty _sw.Value}\">\n                <DebugAction Message=\"Switch.Value = true\" />\n            </WhileTrue>\n        </Switch>\n        <NativeViewHost>\n            <Switch />\n        </NativeViewHost>\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/controls/switch",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/switch",
        "href": "fuse/controls/switch"
      },
      "titles": {
        "indexTitle": "Switch",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Switch"
      }
    },
    {
      "id": {
        "id": "fuse/controls/graphicsview/template",
        "parentId": "fuse/controls/graphicsview",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/graphicsview/template",
        "href": "fuse/controls/graphicsview/template"
      },
      "titles": {
        "indexTitle": "Template",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Template"
      }
    },
    {
      "id": {
        "id": "fuse/controls/button/template",
        "parentId": "fuse/controls/button",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/button/template",
        "href": "fuse/controls/button/template"
      },
      "titles": {
        "indexTitle": "Template",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Template"
      }
    },
    {
      "id": {
        "id": "fuse/controls/slider/template",
        "parentId": "fuse/controls/slider",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/slider/template",
        "href": "fuse/controls/slider/template"
      },
      "titles": {
        "indexTitle": "Template",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Template"
      }
    },
    {
      "id": {
        "id": "fuse/controls/textcontrol/template",
        "parentId": "fuse/controls/textcontrol",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/textcontrol/template",
        "href": "fuse/controls/textcontrol/template"
      },
      "titles": {
        "indexTitle": "Template",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Template"
      }
    },
    {
      "id": {
        "id": "fuse/controls/switch/template",
        "parentId": "fuse/controls/switch",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/switch/template",
        "href": "fuse/controls/switch/template"
      },
      "titles": {
        "indexTitle": "Template",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Template"
      }
    },
    {
      "id": {
        "id": "fuse/controls/scrollview/template",
        "parentId": "fuse/controls/scrollview",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/scrollview/template",
        "href": "fuse/controls/scrollview/template"
      },
      "titles": {
        "indexTitle": "Template",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Template"
      }
    },
    {
      "id": {
        "id": "fuse/controls/datepicker/template",
        "parentId": "fuse/controls/datepicker",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/datepicker/template",
        "href": "fuse/controls/datepicker/template"
      },
      "titles": {
        "indexTitle": "Template",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Template"
      }
    },
    {
      "id": {
        "id": "fuse/controls/timepicker/template",
        "parentId": "fuse/controls/timepicker",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/timepicker/template",
        "href": "fuse/controls/timepicker/template"
      },
      "titles": {
        "indexTitle": "Template",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Template"
      }
    },
    {
      "id": {
        "id": "fuse/controls/cameraview/template",
        "parentId": "fuse/controls/cameraview",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/cameraview/template",
        "href": "fuse/controls/cameraview/template"
      },
      "titles": {
        "indexTitle": "Template",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Template"
      }
    },
    {
      "id": {
        "id": "fuse/controls/photopreview/template",
        "parentId": "fuse/controls/photopreview",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/photopreview/template",
        "href": "fuse/controls/photopreview/template"
      },
      "titles": {
        "indexTitle": "Template",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Template"
      }
    },
    {
      "id": {
        "id": "fuse/controls/graphicsview/template1",
        "parentId": "fuse/controls/graphicsview",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/graphicsview/template1",
        "href": "fuse/controls/graphicsview/template1"
      },
      "titles": {
        "indexTitle": "Template1",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Template1"
      }
    },
    {
      "id": {
        "id": "fuse/controls/button/template1",
        "parentId": "fuse/controls/button",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/button/template1",
        "href": "fuse/controls/button/template1"
      },
      "titles": {
        "indexTitle": "Template1",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Template1"
      }
    },
    {
      "id": {
        "id": "fuse/controls/slider/template1",
        "parentId": "fuse/controls/slider",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/slider/template1",
        "href": "fuse/controls/slider/template1"
      },
      "titles": {
        "indexTitle": "Template1",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Template1"
      }
    },
    {
      "id": {
        "id": "fuse/controls/textcontrol/template1",
        "parentId": "fuse/controls/textcontrol",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/textcontrol/template1",
        "href": "fuse/controls/textcontrol/template1"
      },
      "titles": {
        "indexTitle": "Template1",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Template1"
      }
    },
    {
      "id": {
        "id": "fuse/controls/switch/template1",
        "parentId": "fuse/controls/switch",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/switch/template1",
        "href": "fuse/controls/switch/template1"
      },
      "titles": {
        "indexTitle": "Template1",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Template1"
      }
    },
    {
      "id": {
        "id": "fuse/controls/scrollview/template1",
        "parentId": "fuse/controls/scrollview",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/scrollview/template1",
        "href": "fuse/controls/scrollview/template1"
      },
      "titles": {
        "indexTitle": "Template1",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Template1"
      }
    },
    {
      "id": {
        "id": "fuse/controls/datepicker/template1",
        "parentId": "fuse/controls/datepicker",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/datepicker/template1",
        "href": "fuse/controls/datepicker/template1"
      },
      "titles": {
        "indexTitle": "Template1",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Template1"
      }
    },
    {
      "id": {
        "id": "fuse/controls/timepicker/template1",
        "parentId": "fuse/controls/timepicker",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/timepicker/template1",
        "href": "fuse/controls/timepicker/template1"
      },
      "titles": {
        "indexTitle": "Template1",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Template1"
      }
    },
    {
      "id": {
        "id": "fuse/controls/cameraview/template1",
        "parentId": "fuse/controls/cameraview",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/cameraview/template1",
        "href": "fuse/controls/cameraview/template1"
      },
      "titles": {
        "indexTitle": "Template1",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Template1"
      }
    },
    {
      "id": {
        "id": "fuse/controls/photopreview/template1",
        "parentId": "fuse/controls/photopreview",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/photopreview/template1",
        "href": "fuse/controls/photopreview/template1"
      },
      "titles": {
        "indexTitle": "Template1",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Template1"
      }
    },
    {
      "id": {
        "id": "fuse/controls/button/template2",
        "parentId": "fuse/controls/button",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/button/template2",
        "href": "fuse/controls/button/template2"
      },
      "titles": {
        "indexTitle": "Template2",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Template2"
      }
    },
    {
      "id": {
        "id": "fuse/controls/slider/template2",
        "parentId": "fuse/controls/slider",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/slider/template2",
        "href": "fuse/controls/slider/template2"
      },
      "titles": {
        "indexTitle": "Template2",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Template2"
      }
    },
    {
      "id": {
        "id": "fuse/controls/switch/template2",
        "parentId": "fuse/controls/switch",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/switch/template2",
        "href": "fuse/controls/switch/template2"
      },
      "titles": {
        "indexTitle": "Template2",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Template2"
      }
    },
    {
      "id": {
        "id": "fuse/controls/datepicker/template2",
        "parentId": "fuse/controls/datepicker",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/datepicker/template2",
        "href": "fuse/controls/datepicker/template2"
      },
      "titles": {
        "indexTitle": "Template2",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Template2"
      }
    },
    {
      "id": {
        "id": "fuse/controls/timepicker/template2",
        "parentId": "fuse/controls/timepicker",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/timepicker/template2",
        "href": "fuse/controls/timepicker/template2"
      },
      "titles": {
        "indexTitle": "Template2",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Template2"
      }
    },
    {
      "id": {
        "id": "fuse/controls/cameraview/template2",
        "parentId": "fuse/controls/cameraview",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/cameraview/template2",
        "href": "fuse/controls/cameraview/template2"
      },
      "titles": {
        "indexTitle": "Template2",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Template2"
      }
    },
    {
      "id": {
        "id": "fuse/controls/cameraview/template2/template3",
        "parentId": "fuse/controls/cameraview/template2",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/cameraview/template2/template3",
        "href": "fuse/controls/cameraview/template2/template3"
      },
      "titles": {
        "indexTitle": "Template3",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Template3"
      }
    },
    {
      "comment": {
        "brief": "Displays a block of text.",
        "full": "Displays a block of text.\n\nThe `Text` UI-control renders read-only text.\n\nYou can import a @Font from ttf files containing TrueType fonts. Because a font is typically referred to throughout an application, it is best to simply create a global resource for it using `ux:Global`. This way of importing the font ensures that the font is available throughout the whole project, and is only loaded once.\n\n> **Note**\n>\n> When running desktop preview, neither fallback fonts, colored glyphs, nor Unicode characters outside the basic multilingual plane are supported.\n>\n> Because of this, **certain text features (e.g. emoji) are not supported when running local preview.**\n> Do not be surprised if desktop rendering doesn't match device rendering 100%. This is an issue that is being worked on.\r\n\n# Examples \n\n## Text properties\n\n```\n<Text Color=\"#999\">Left</Text>\n<Text TextAlignment=\"Center\">Center</Text>\n<Text FontSize=\"24\" TextAlignment=\"Right\">Right</Text>\n<Text LineSpacing=\"10\">\nMultiple\nLines\n</Text>\n```\n\nIn this example, the first text element will be left aligned as this is the default, and have its color set to a medium light grey. The second text will be center aligned. The third will be right aligned and have a larger font. The fourth will span two lines with 10 points of space inbetween.\n\n## Custom text-components\n\n\t<App>\n\t\t<Font File=\"Roboto-Medium.ttf\" ux:Global=\"Medium\" />\n\t\t<Font File=\"Roboto-Light.ttf\" ux:Global=\"Light\" />\n\n\t\t<Text ux:Class=\"Light\" Font=\"Light\" />\n\t\t<Text ux:Class=\"Medium\" Font=\"Medium\" TextWrapping=\"Wrap\" />\n\t\t<Text ux:Class=\"Warning\" \n\t\t\tFont=\"Medium\" \n\t\t\tFontSize=\"42\"\n\t\t\tTextAlignment=\"Center\"\n\t\t\tColor=\"#f00\" />\n\t\t\t\n\t\t<StackPanel>\n\t\t\t<Light>Just some text</Light>\n\t\t\t<Warning>The robots are coming!</Warning>\n\t\t\t<Medium>This is just some medium text, but it will happily wrap when the edges of the screen is reached.</Medium>\n\t\t</StackPanel>\n\t</App>\n\nIn this example we load two fonts and create three different semantic classes, `Light`, `Medium` and `Warning`, combining some of the available `Text` properties. In this example, the fonts are located in the same directory as the relevant UX file. \r\n\n# Remarks\n\n`Text` is the primary control for displaying read-only text in apps."
      },
      "id": {
        "id": "fuse/controls/text",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/text",
        "href": "fuse/controls/text"
      },
      "titles": {
        "indexTitle": "Text",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Text"
      }
    },
    {
      "comment": {
        "brief": "Deprecated, for backwards compatibility",
        "full": "Deprecated, for backwards compatibility"
      },
      "id": {
        "id": "fuse/controls/textblock",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/textblock",
        "href": "fuse/controls/textblock"
      },
      "titles": {
        "indexTitle": "TextBlock",
        "fullyQualifiedIndexTitle": "Fuse.Controls.TextBlock"
      }
    },
    {
      "comment": {
        "brief": "A @TextInput with a default look and feel.",
        "full": "A @TextInput with a default look and feel.\n\nIf you want to customize its appearance, you probably want to subclass @TextInput instead.\n\n## Example\n\n    <TextBox PlaceholderText=\"Search...\" />"
      },
      "id": {
        "id": "fuse/controls/textbox",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/textbox",
        "href": "fuse/controls/textbox"
      },
      "titles": {
        "indexTitle": "TextBox",
        "fullyQualifiedIndexTitle": "Fuse.Controls.TextBox"
      }
    },
    {
      "comment": {
        "brief": "Exposes the common interface for text controls.",
        "full": "Exposes the common interface for text controls.\n\nThis class is abstract. It retains the state for the common properties,\nand calls protected virtual OnSomethingChanged-methods that derived classes\ncan override to implement the desired behavior.\n\nImplements the general purpose low level text rendering mechanism that can be\ncontrolled in derived classes by overriding the @RenderValue and @RenderColor\nproperties. To disable the built-in rendering, return `null` from @RenderValue."
      },
      "id": {
        "id": "fuse/controls/textcontrol",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/textcontrol",
        "href": "fuse/controls/textcontrol"
      },
      "titles": {
        "indexTitle": "TextControl",
        "fullyQualifiedIndexTitle": "Fuse.Controls.TextControl"
      }
    },
    {
      "comment": {
        "brief": "Single-line text input control.",
        "full": "Single-line text input control.\n\n`TextInput` is what you typically use or subclass when making input fields that only require a single line, like usernames, passwords, numbers, email, search fields, etc.\nIt has no appearance by default, which means it will be invisible until you give it a look or a text value.\n\n> If you want a text input control with a default appearance, see @TextBox.\n> If you want to accept multiple lines of text, use @TextView.\n\n## Examples\n\nThis example shows a basic TextInput with some style and a button to clear its contents.\n\n    <Panel>\n        <Button Alignment=\"CenterRight\" Text=\"Clear\" Margin=\"5\">\n            <Clicked>\n                <Set text.Value=\"\" />\n            </Clicked>\n        </Button>\n        <TextInput ux:Name=\"text\" PlaceholderText=\"Text field\" PlaceholderColor=\"#ccc\" Height=\"50\" Padding=\"5\" >\n            <Rectangle Layer=\"Background\">\n                <Stroke Width=\"2\" Brush=\"#BBB\" />\n            </Rectangle>\n        </TextInput>\n    </Panel>\n\nThe following example illustrates how you can subclass TextInput to achieve a consistent look throughout your app.\n\n    <!-- Subclassing TextInput -->\n    <TextInput ux:Class=\"MyTextInput\" FontSize=\"20\" PlaceholderColor=\"#ccc\" Padding=\"5\">\n        <Rectangle Layer=\"Background\" CornerRadius=\"3\">\n            <Stroke Width=\"1\" Color=\"#ccc\" />\n            <SolidColor Color=\"White\" />\n        </Rectangle>\n    </TextInput>\n\n    <!-- Example usage -->\n    <StackPanel Margin=\"10\" ItemSpacing=\"10\">\n        <MyTextInput PlaceholderText=\"Username\" />\n        <MyTextInput PlaceholderText=\"Password\" IsPassword=\"true\" />\n        <MyTextInput PlaceholderText=\"Repeat password\" IsPassword=\"true\" />\n        <MyTextInput />\n    </StackPanel>\n\nThis example shows how you can configure the layout and behavior of the on-screen keyboard when the TextInput is in focus using the @InputHint, @AutoCorrectHint, @AutoCapitalizationHint and @ActionStyle properties.\n\n    <TextInput PlaceholderText=\"Search...\" ActionStyle=\"Search\" AutoCapitalizationHint=\"None\" />\n    <TextInput PlaceholderText=\"Email\" InputHint=\"Email\" ActionStyle=\"Send\" AutoCorrectHint=\"Disabled\" AutoCapitalizationHint=\"None\" />\n    <TextInput PlaceholderText=\"http://\" InputHint=\"URL\" ActionStyle=\"Go\" AutoCorrectHint=\"Disabled\" AutoCapitalizationHint=\"None\" />\n    <TextInput PlaceholderText=\"+47 123 456 789\" InputHint=\"Phone\" />\n    <TextInput PlaceholderText=\"1234\" InputHint=\"Number\" />\n    <TextInput PlaceholderText=\"1.234\" InputHint=\"Decimal\" />\n    <TextInput PlaceholderText=\"1\" InputHint=\"Integer\" />\n\nA common use-case is to have the TextInput raise an event when the user presses the return/search key on their virtual/physical keyboard.\nThe following example demonstrates using `ActionTriggered` to get an event when this happens:\n\n    <StackPanel>\n        <JavaScript>\n            var Observable = require(\"FuseJS/Observable\");\n\n            var searchStr = Observable(\"Please enter a query...\");\n            var entryStr = Observable(\"\");\n\n            function onSearch(args) {\n                searchStr.value = \"You entered: \" + entryStr.value;\n            }\n\n            module.exports = {\n                searchStr: searchStr,\n                onSearch: onSearch,\n                entryStr: entryStr\n            };\n        </JavaScript>\n        <Text FontSize=\"20\">Search</Text>\n        <TextInput Value=\"{entryStr}\" PlaceholderText=\"Enter your query....\" ActionTriggered=\"{onSearch}\" />\n        <Text FontSize=\"20\" Value=\"{searchStr}\" />\n    </StackPanel>\n\nIn some cases, it might be undesirable for the virtual keyboard to disappear when a certain other ux element is pressed.\nThis can be done by passing a parent container to the `Focus.Delegate` property, causing the focus state to be delegated to the delegate target:\n\n    <DockPanel ux:Name=\"dockpanel\" IsFocusable=\"true\" Color=\"#fff\">\n        <TextInput Focus.Delegate=\"dockpanel\" />\n        <Panel Dock=\"Right\">\n            <Text Value=\"SEND\" Alignment=\"Center\" Margin=\"4,0\" Color=\"#fff\" />\n            <Rectangle CornerRadius=\"4\" Color=\"#000\" />\n        </Panel>\n    </DockPanel>"
      },
      "id": {
        "id": "fuse/controls/textinput",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/textinput",
        "href": "fuse/controls/textinput"
      },
      "titles": {
        "indexTitle": "TextInput",
        "fullyQualifiedIndexTitle": "Fuse.Controls.TextInput"
      }
    },
    {
      "id": {
        "id": "fuse/controls/textinputactionargs",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/textinputactionargs",
        "href": "fuse/controls/textinputactionargs"
      },
      "titles": {
        "indexTitle": "TextInputActionArgs",
        "fullyQualifiedIndexTitle": "Fuse.Controls.TextInputActionArgs"
      }
    },
    {
      "comment": {
        "brief": "Base class for text editing controls.",
        "full": "Base class for text editing controls."
      },
      "id": {
        "id": "fuse/controls/textinputcontrol",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/textinputcontrol",
        "href": "fuse/controls/textinputcontrol"
      },
      "titles": {
        "indexTitle": "TextInputControl",
        "fullyQualifiedIndexTitle": "Fuse.Controls.TextInputControl"
      }
    },
    {
      "comment": {
        "brief": "Multi-line text editor.",
        "full": "Multi-line text editor.\n\nTextView provides features for editing and viewing large amounts of text.\n\n## Example\n\n    <TextView ux:Class=\"TextViewer\" TextWrapping=\"Wrap\" Padding=\"4\" Margin=\"4\" TextColor=\"#000\" CaretColor=\"#000\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n        <Rectangle Layer=\"Background\" CornerRadius=\"4\">\n            <Stroke Color=\"#000\" />\n        </Rectangle>\n\n    </TextView>"
      },
      "id": {
        "id": "fuse/controls/textview",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/textview",
        "href": "fuse/controls/textview"
      },
      "titles": {
        "indexTitle": "TextView",
        "fullyQualifiedIndexTitle": "Fuse.Controls.TextView"
      }
    },
    {
      "comment": {
        "brief": "Thumbnail size hint in points",
        "full": "Thumbnail size hint in points\n\nUsed by `Photo` when saving as thumbnail. The implementation\nof `Photo` decides how to interpret this value."
      },
      "id": {
        "id": "fuse/controls/thumbnailsizehint",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/thumbnailsizehint",
        "href": "fuse/controls/thumbnailsizehint"
      },
      "titles": {
        "indexTitle": "ThumbnailSizeHint",
        "fullyQualifiedIndexTitle": "Fuse.Controls.ThumbnailSizeHint"
      }
    },
    {
      "comment": {
        "brief": "Displays a component to select a time.",
        "full": "Displays a component to select a time.\n\nCurrently, the TimePicker only has native implementations, so it should be contained in a @NativeViewHost.\n\nA `TimePicker` can be used to select a specific time value. The type of its `Value` property is `Uno.DateTime`,\nwhich is marshalled automatically to and from the JavaScript `Date` type. This makes interaction between JavaScript\nand the `TimePicker` type seamless via databinding. If you plan to wrap a `TimePicker` in a UX component and use a\nUX property to hook up this value, the `Uno.DateTime` type should be used.\n\nBoth `Uno.DateTime` and JS' `Date` type represent a specific timestamp. These types have both date and time\ncomponents, and their interpretation depends on a given time zone, which can cause a great deal of confusion. To\nsimplify all of this and ensure consistent behavior accross different time zones and locales, `TimePicker` will assume\nincoming values are relative to UTC, and truncate the date component to the Unix epoch (1 Jan 1970), effectively\nignoring the date component altogether. Similarly, values read from `TimePicker` properties will only consist of a time\ncomponent at on 1 Jan 1970. This makes values going to/from the `TimePicker` control easy to create and interpret\nconsistently, but also means that if a value with a date component other than the unix epoch is written to TimePicker`'s\n`Value` property, subsequent values read from the property may not match the written value, as the date component will\nhave been truncated.\n\nYou should avoid modifying the `TimePicker` values programmatically while the control has focus, as this is known to\nhave some issues on some Android devices (particularly ones which use the new `clock` appearance prior to Android 7).\n\n## Example\n\nThe following example shows how to set up a `TimePicker` object and set the value from JS using a `Date` object:\n\n    <StackPanel>\n        <JavaScript>\n            var Observable = require(\"FuseJS/Observable\");\n\n            var someTime = Observable(new Date(Date.parse(\"2007-02-14T12:34:56.000Z\")));\n\n            someTime.onValueChanged(module, function(date) {\n                console.log(\"someTime changed: \" + JSON.stringify(date));\n            });\n\n            module.exports = {\n                someTime: someTime,\n\n                timeToGetCracking: function() {\n                    someTime.value = new Date(Date.parse(\"1970-01-01T13:37:00.000Z\"));\n                }\n            };\n        </JavaScript>\n\n        <NativeViewHost>\n            <TimePicker Value=\"{someTime}\" Is24HourView=\"true\" />\n        </NativeViewHost>\n\n        <Button Text=\"Time to get cracking!\" Clicked=\"{timeToGetCracking}\" Margin=\"5\" />\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/controls/timepicker",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/timepicker",
        "href": "fuse/controls/timepicker"
      },
      "titles": {
        "indexTitle": "TimePicker",
        "fullyQualifiedIndexTitle": "Fuse.Controls.TimePicker"
      }
    },
    {
      "id": {
        "id": "fuse/controls/timepickerbase",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/timepickerbase",
        "href": "fuse/controls/timepickerbase"
      },
      "titles": {
        "indexTitle": "TimePickerBase",
        "fullyQualifiedIndexTitle": "Fuse.Controls.TimePickerBase"
      }
    },
    {
      "comment": {
        "brief": "Panel that contains a toggleable value",
        "full": "Panel that contains a toggleable value\n\nPanel type that is suitable for making toggleable semantic controls,\nlike Switch, CheckBox, ToggleButton etc.\n\n## Example\n\n    <ToggleControl ux:Class=\"CheckBox\" BoxSizing=\"FillAspect\" Aspect=\"1\" Margin=\"2\" HitTestMode=\"LocalBounds\" Width=\"48\" Height=\"48\">\n        <Rectangle Color=\"#999\" Margin=\"4\" ux:Name=\"_toggledBox\" Opacity=\"0\" />\n        <WhileTrue Value=\"{ReadProperty this.Value}\">\n            <Change _toggledBox.Opacity=\"1\" Duration=\"0.15\" Easing=\"CubicOut\" EasingBack=\"CubicIn\" />\n        </WhileTrue>\n        <Rectangle Layer=\"Background\">\n            <Stroke Color=\"#000\" />\n        </Rectangle>\n        <Clicked>\n            <Toggle Target=\"this\" />\n        </Clicked>\n    </ToggleControl>"
      },
      "id": {
        "id": "fuse/controls/togglecontrol",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/togglecontrol",
        "href": "fuse/controls/togglecontrol"
      },
      "titles": {
        "indexTitle": "ToggleControl",
        "fullyQualifiedIndexTitle": "Fuse.Controls.ToggleControl"
      }
    },
    {
      "id": {
        "id": "fuse/controls/topframebackground",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/topframebackground",
        "href": "fuse/controls/topframebackground"
      },
      "titles": {
        "indexTitle": "TopFrameBackground",
        "fullyQualifiedIndexTitle": "Fuse.Controls.TopFrameBackground"
      }
    },
    {
      "id": {
        "id": "fuse/controls/urischemeeventargs",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/urischemeeventargs",
        "href": "fuse/controls/urischemeeventargs"
      },
      "titles": {
        "indexTitle": "URISchemeEventArgs",
        "fullyQualifiedIndexTitle": "Fuse.Controls.URISchemeEventArgs"
      }
    },
    {
      "id": {
        "id": "fuse/controls/urlvideosource",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/urlvideosource",
        "href": "fuse/controls/urlvideosource"
      },
      "titles": {
        "indexTitle": "UrlVideoSource",
        "fullyQualifiedIndexTitle": "Fuse.Controls.UrlVideoSource"
      }
    },
    {
      "comment": {
        "brief": "Combines several child vector elements into a single drawing.",
        "full": "Combines several child vector elements into a single drawing.\n\nThis may be used to improve performance when drawing several `ISurfaceDrawable` elements into the same control. The actual performance improvement depends greatly on what is being drawn, and how many elements are involved.\n\nAll ancestors must be `ISurfaceDrawable` to be used in a `VectorLayer`. A warning will be issused, but the actual behavior is undefined.",
        "attributes": {
          "advanced": true
        }
      },
      "id": {
        "id": "fuse/controls/vectorlayer",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/vectorlayer",
        "href": "fuse/controls/vectorlayer"
      },
      "titles": {
        "indexTitle": "VectorLayer",
        "fullyQualifiedIndexTitle": "Fuse.Controls.VectorLayer"
      }
    },
    {
      "comment": {
        "brief": "Displays a video.",
        "full": "Displays a video.\n\n`Video` allows playback of video from file or stream through its properties `File` and `Url` respectively.\nIt is similar to Image; they share the properties `StretchMode`, `StretchDirection` and `ContentAlignment` and they work in the same way for both classes.\n\n## Useful properties\n\nVideo comes with a set of properties that can be used to configure it or control it, in addition to the properties shared with Image:\n\n- `Volume`: range from 0.0 to 1.0, default is 1.0\n- `Duration`: the duration of the video in seconds\n- `Position`: the current position of the video in seconds\n- `IsLooping`: a bool specifying if the video should loop or not, default is false\n\n## Useful triggers that can be used with `Video`\n\n    <Video>\n        <WhilePlaying />    <!-- Active while the video is playing -->\n        <WhilePaused />     <!-- Active while the video is paused -->\n        <WhileCompleted />  <!-- Active while the video is done playing -->\n        <WhileLoading />    <!-- Active while the video is loading -->\n        <WhileFailed />     <!-- Active if the video failed to load or an error occured -->\n    </Video>\n\n## Useful actions that can be used to control `Video`\n\nFuse comes with a set of actions that can be used to control video playback. They all have a common `Target` property that specifies which `Video` element they control.\n\n    <Pause />                   <!-- Pauses playback, leaving the current position as-is -->\n    <Stop />                    <!-- Stops playback and returns to the beginning of the video -->\n    <Resume />                  <!-- Resumes playback from the current position -->\n\n## Supported formats\n\n`Video` is implemented by using the videodecoder provided by the export target and therefore supports whatever the platform supports. Be aware that Windows, OS X, Android and iOS might not share support for some formats\n\n- [Android supported formats](https://developer.android.com/guide/appendix/media-formats.html)\n- [iOS and OS X supported formats (found under 'public.movie')](https://developer.apple.com/library/mac/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html)\n- [Windows supported formats](https://msdn.microsoft.com/en-us/library/cc189080%28v=vs.95%29.aspx?f=255&MSPPError=-2147217396)\n\n## Playing from the local file system\n\nVideos can also be played from the local file system of the device the app is running on. This can be done by prepending `file://` to the absolute path of the video:\n\n    <Video File=\"file:///data/data/com.fuse.app/video.mp4\" />\n\nNotice the three slashes at the start. This is due to unix file system paths always beginning with a `/`\n\n## Example\n\nThe following example shows how to play a video, display its playback progress using @ProgressAnimation, and pause/resume the video using the @Pause and @Resume animators.\n\n    <DockPanel>\n        <Video ux:Name=\"video\" Dock=\"Fill\" File=\"fuse_video.mp4\" IsLooping=\"true\" StretchMode=\"UniformToFill\">\n            <ProgressAnimation>\n                <Change progressBar.Width=\"100\" />\n            </ProgressAnimation>\n        </Video>\n        <Rectangle ux:Name=\"progressBar\" Dock=\"Bottom\" Fill=\"#f00\" Width=\"0%\" Height=\"10\" />\n        <Grid Dock=\"Bottom\" ColumnCount=\"2\" RowCount=\"1\">\n            <Button Text=\"Play\">\n                <Clicked>\n                    <Resume Target=\"video\" />\n                </Clicked>\n            </Button>\n            <Button Text=\"Pause\">\n                <Clicked>\n                    <Pause Target=\"video\" />\n                </Clicked>\n            </Button>\n        </Grid>\n    </DockPanel>"
      },
      "id": {
        "id": "fuse/controls/video",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/video",
        "href": "fuse/controls/video"
      },
      "titles": {
        "indexTitle": "Video",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Video"
      }
    },
    {
      "id": {
        "id": "fuse/controls/videosource",
        "parentId": "fuse/controls",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/videosource",
        "href": "fuse/controls/videosource"
      },
      "titles": {
        "indexTitle": "VideoSource",
        "fullyQualifiedIndexTitle": "Fuse.Controls.VideoSource"
      }
    },
    {
      "comment": {
        "brief": "Forces the content (by scaling) to fit inside the available space.",
        "full": "Forces the content (by scaling) to fit inside the available space.\n\n    <Viewbox>\n        <Rectangle Color=\"#808\" Width=\"200\" Height=\"100\" />\n    </Viewbox>\n\nThis will maintain its aspect ratio of 2:1 while stretching the Rectangle to be the size of the Viewbox.\n\nYou can set which directions you want the content to scale by setting the StretchDirection-property:\n\n* `Both` - Allow both up- and downscaling\n* `UpOnly` - Only upscale contents\n* `DownOnly` - Only downscale contents\n\nNote that any other setting than `DownOnly` might create pixel artifacts, as the Viewbox performs a bitmap stretch of its contents.\n\nYou can also set the `StretchMode` for the contents, which defaults to `Uniform`."
      },
      "id": {
        "id": "fuse/controls/viewbox",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/viewbox",
        "href": "fuse/controls/viewbox"
      },
      "titles": {
        "indexTitle": "Viewbox",
        "fullyQualifiedIndexTitle": "Fuse.Controls.Viewbox"
      }
    },
    {
      "comment": {
        "brief": "Displays web content natively on android and iOS.",
        "full": "Displays web content natively on android and iOS.\n\nAs the WebView is native only, it needs to be contained in a @NativeViewHost.\n\nThe WebView can be used to present web content either over the http protocol or by loading HTML as a string, and hooks into some useful triggers for building a customized browsing experience, such as @PageBeginLoading, @WhilePageLoading and @PageLoaded.\nNavigation triggers like @GoBack and @GoForward are complemented with WebView-specific ones, like @Reload, @LoadUrl and @LoadHtml. It can also be used to drive a @ProgressAnimation.\n\nThe @EvaluateJS trigger is noteworthy, since it allows arbitrary JavaScript to be run in the WebView's context and the resulting data be fed back into Fuse:\n\n```XML\n<App Background=\"#333\">\n    <JavaScript>\n            module.exports = {\n                onPageLoaded : function(res) {\n                    console.log(\"WebView arrived at \"+ JSON.parse(res.json).url);\n            }\n        };\n    </JavaScript>\n    <DockPanel>\n        <StatusBarBackground Dock=\"Top\"/>\n        <NativeViewHost>\n            <WebView Dock=\"Fill\" Url=\"http://www.google.com\">\n                <PageLoaded>\n                    <EvaluateJS Handler=\"{onPageLoaded}\">\n                        var result = {\n                            url : document.location.href\n                        };\n                        return result;\n                    </EvaluateJS>\n                </PageLoaded>\n            </WebView>\n        </NativeViewHost>\n\n        <BottomBarBackground Dock=\"Bottom\" />\n    </DockPanel>\n</App>\n```\n\nWebViews can also be fed raw HTML to display by wrapping an @HTML node or via the @LoadHtml trigger action:\n\n`<LoadHtml TargetNode=\"myWebView\" BaseUrl=\"http://my.domain\" Source=\"{html}\"/>`"
      },
      "id": {
        "id": "fuse/controls/webview",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/webview",
        "href": "fuse/controls/webview"
      },
      "titles": {
        "indexTitle": "WebView",
        "fullyQualifiedIndexTitle": "Fuse.Controls.WebView"
      }
    },
    {
      "comment": {
        "brief": "Lays out children one after the other in a given orientation and wraps around whenever it reaches the end.",
        "full": "Lays out children one after the other in a given orientation and wraps around whenever it reaches the end.\n\nYou can specify which direction the elements are laid out in by assigning the `FlowDirection` property.\nFlowDirection can either be LeftToRight or RightToLeft.\n\nThe following `WrapPanel` lays out its children horizontally from right to left.\n\n    <WrapPanel FlowDirection=\"RightToLeft\">\n        <Each Count=\"10\">\n            <Rectangle Margin=\"5\" Width=\"100\" Height=\"100\" Color=\"Blue\"/>\n        </Each>\n    </WrapPanel>\n\nThe `Orientation` property can be used to make a vertical WrapPanel like so:\n\n    <WrapPanel Orientation=\"Vertical\">\n        <Each Count=\"10\">\n            <Rectangle Margin=\"5\" Width=\"100\" Height=\"100\" Color=\"Blue\"/>\n        </Each>\n    </WrapPanel>\n\nYou can also specify the maximum area the `WrapPanel` will allocate an element by using the `ItemWidth` and `ItemHeight` properties."
      },
      "id": {
        "id": "fuse/controls/wrappanel",
        "parentId": "fuse/controls",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/controls/wrappanel",
        "href": "fuse/controls/wrappanel"
      },
      "titles": {
        "indexTitle": "WrapPanel",
        "fullyQualifiedIndexTitle": "Fuse.Controls.WrapPanel"
      }
    },
    {
      "comment": {
        "brief": "Defers the creation of nodes to improve initialization time.",
        "full": "Defers the creation of nodes to improve initialization time.\n\n`Deferred` says that the content is not required immediately and may be created somewhat later. This allows the app to startup faster, or to create new pages faster. Without `Deferred` the nodes are initialized all in the same frame, which can lead to delays. With `Deferred` the node creation is staggered over several frames. This allows the app to start rendering and displaying prior to being completely initialized.\n\nA common use is with an @Each:\n\n    <Each Items=\"{items}\">\n        <Deferred>\n            <StackPanel Orientation=\"Horizontal\">\n                <Text Value=\"{name}\"/>\n                <Text Value=\"{address}\"/>\n                <Text Value=\"{phone}\"/>\n            </StackPanel>\n        </Deferred>\n    </Each>\n\nNote that the delay is measured in frames: deferred content will still be added quickly. Nonetheless it may result in some popping of the new elements and a change in layout.\n\nYou only need to use this feature when you are having initializaiton time problems at startup or on new pages. Wrapping the content of @Each in `Deferred` is a simple change that can help when you are using lists of items. The individual pages of a top-level @PageControl may also be suitable for `Deferred`.\n\nDo not use this on the pages of a @Navigator or other control that accepts templates. Templates are already created on demand and wrapping them in `Deferred` usually won't be helpful."
      },
      "id": {
        "id": "fuse/deferred",
        "parentId": "fuse",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/deferred",
        "href": "fuse/deferred"
      },
      "titles": {
        "indexTitle": "Deferred",
        "fullyQualifiedIndexTitle": "Fuse.Deferred"
      }
    },
    {
      "id": {
        "id": "fuse/designer/advancedattribute",
        "parentId": "fuse/designer",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/designer/advancedattribute",
        "href": "fuse/designer/advancedattribute"
      },
      "titles": {
        "indexTitle": "AdvancedAttribute",
        "fullyQualifiedIndexTitle": "Fuse.Designer.AdvancedAttribute"
      }
    },
    {
      "id": {
        "id": "fuse/designer/childextensionattribute",
        "parentId": "fuse/designer",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/designer/childextensionattribute",
        "href": "fuse/designer/childextensionattribute"
      },
      "titles": {
        "indexTitle": "ChildExtensionAttribute",
        "fullyQualifiedIndexTitle": "Fuse.Designer.ChildExtensionAttribute"
      }
    },
    {
      "id": {
        "id": "fuse/designer/colorattribute",
        "parentId": "fuse/designer",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/designer/colorattribute",
        "href": "fuse/designer/colorattribute"
      },
      "titles": {
        "indexTitle": "ColorAttribute",
        "fullyQualifiedIndexTitle": "Fuse.Designer.ColorAttribute"
      }
    },
    {
      "id": {
        "id": "fuse/designer/componentofattribute",
        "parentId": "fuse/designer",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/designer/componentofattribute",
        "href": "fuse/designer/componentofattribute"
      },
      "titles": {
        "indexTitle": "ComponentOfAttribute",
        "fullyQualifiedIndexTitle": "Fuse.Designer.ComponentOfAttribute"
      }
    },
    {
      "id": {
        "id": "fuse/designer/defaultcomponentattribute",
        "parentId": "fuse/designer",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/designer/defaultcomponentattribute",
        "href": "fuse/designer/defaultcomponentattribute"
      },
      "titles": {
        "indexTitle": "DefaultComponentAttribute",
        "fullyQualifiedIndexTitle": "Fuse.Designer.DefaultComponentAttribute"
      }
    },
    {
      "id": {
        "id": "fuse/designer/defaultinstanceattribute",
        "parentId": "fuse/designer",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/designer/defaultinstanceattribute",
        "href": "fuse/designer/defaultinstanceattribute"
      },
      "titles": {
        "indexTitle": "DefaultInstanceAttribute",
        "fullyQualifiedIndexTitle": "Fuse.Designer.DefaultInstanceAttribute"
      }
    },
    {
      "id": {
        "id": "fuse/designer/designernameattribute",
        "parentId": "fuse/designer",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/designer/designernameattribute",
        "href": "fuse/designer/designernameattribute"
      },
      "titles": {
        "indexTitle": "DesignerNameAttribute",
        "fullyQualifiedIndexTitle": "Fuse.Designer.DesignerNameAttribute"
      }
    },
    {
      "id": {
        "id": "fuse/designer/dragdroppriorityattribute",
        "parentId": "fuse/designer",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/designer/dragdroppriorityattribute",
        "href": "fuse/designer/dragdroppriorityattribute"
      },
      "titles": {
        "indexTitle": "DragDropPriorityAttribute",
        "fullyQualifiedIndexTitle": "Fuse.Designer.DragDropPriorityAttribute"
      }
    },
    {
      "id": {
        "id": "fuse/designer/extensionattribute",
        "parentId": "fuse/designer",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/designer/extensionattribute",
        "href": "fuse/designer/extensionattribute"
      },
      "titles": {
        "indexTitle": "ExtensionAttribute",
        "fullyQualifiedIndexTitle": "Fuse.Designer.ExtensionAttribute"
      }
    },
    {
      "id": {
        "id": "fuse/designer/groupattribute",
        "parentId": "fuse/designer",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/designer/groupattribute",
        "href": "fuse/designer/groupattribute"
      },
      "titles": {
        "indexTitle": "GroupAttribute",
        "fullyQualifiedIndexTitle": "Fuse.Designer.GroupAttribute"
      }
    },
    {
      "id": {
        "id": "fuse/designer/hideattribute",
        "parentId": "fuse/designer",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/designer/hideattribute",
        "href": "fuse/designer/hideattribute"
      },
      "titles": {
        "indexTitle": "HideAttribute",
        "fullyQualifiedIndexTitle": "Fuse.Designer.HideAttribute"
      }
    },
    {
      "id": {
        "id": "fuse/designer/hidesattribute",
        "parentId": "fuse/designer",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/designer/hidesattribute",
        "href": "fuse/designer/hidesattribute"
      },
      "titles": {
        "indexTitle": "HidesAttribute",
        "fullyQualifiedIndexTitle": "Fuse.Designer.HidesAttribute"
      }
    },
    {
      "id": {
        "id": "fuse/designer/iconattribute",
        "parentId": "fuse/designer",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/designer/iconattribute",
        "href": "fuse/designer/iconattribute"
      },
      "titles": {
        "indexTitle": "IconAttribute",
        "fullyQualifiedIndexTitle": "Fuse.Designer.IconAttribute"
      }
    },
    {
      "id": {
        "id": "fuse/designer/inlineattribute",
        "parentId": "fuse/designer",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/designer/inlineattribute",
        "href": "fuse/designer/inlineattribute"
      },
      "titles": {
        "indexTitle": "InlineAttribute",
        "fullyQualifiedIndexTitle": "Fuse.Designer.InlineAttribute"
      }
    },
    {
      "id": {
        "id": "fuse/designer/intervalattribute",
        "parentId": "fuse/designer",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/designer/intervalattribute",
        "href": "fuse/designer/intervalattribute"
      },
      "titles": {
        "indexTitle": "IntervalAttribute",
        "fullyQualifiedIndexTitle": "Fuse.Designer.IntervalAttribute"
      }
    },
    {
      "id": {
        "id": "fuse/designer/optionalhideattribute",
        "parentId": "fuse/designer",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/designer/optionalhideattribute",
        "href": "fuse/designer/optionalhideattribute"
      },
      "titles": {
        "indexTitle": "OptionalHideAttribute",
        "fullyQualifiedIndexTitle": "Fuse.Designer.OptionalHideAttribute"
      }
    },
    {
      "id": {
        "id": "fuse/designer/priorityattribute",
        "parentId": "fuse/designer",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/designer/priorityattribute",
        "href": "fuse/designer/priorityattribute"
      },
      "titles": {
        "indexTitle": "PriorityAttribute",
        "fullyQualifiedIndexTitle": "Fuse.Designer.PriorityAttribute"
      }
    },
    {
      "id": {
        "id": "fuse/designer/rangeattribute",
        "parentId": "fuse/designer",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/designer/rangeattribute",
        "href": "fuse/designer/rangeattribute"
      },
      "titles": {
        "indexTitle": "RangeAttribute",
        "fullyQualifiedIndexTitle": "Fuse.Designer.RangeAttribute"
      }
    },
    {
      "id": {
        "id": "fuse/designer/recursionsafeattribute",
        "parentId": "fuse/designer",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/designer/recursionsafeattribute",
        "href": "fuse/designer/recursionsafeattribute"
      },
      "titles": {
        "indexTitle": "RecursionSafeAttribute",
        "fullyQualifiedIndexTitle": "Fuse.Designer.RecursionSafeAttribute"
      }
    },
    {
      "id": {
        "id": "fuse/designer/requiredcomponentattribute",
        "parentId": "fuse/designer",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/designer/requiredcomponentattribute",
        "href": "fuse/designer/requiredcomponentattribute"
      },
      "titles": {
        "indexTitle": "RequiredComponentAttribute",
        "fullyQualifiedIndexTitle": "Fuse.Designer.RequiredComponentAttribute"
      }
    },
    {
      "id": {
        "id": "fuse/designer/spawnableattribute",
        "parentId": "fuse/designer",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/designer/spawnableattribute",
        "href": "fuse/designer/spawnableattribute"
      },
      "titles": {
        "indexTitle": "SpawnableAttribute",
        "fullyQualifiedIndexTitle": "Fuse.Designer.SpawnableAttribute"
      }
    },
    {
      "id": {
        "id": "fuse/designer/spawnsattribute",
        "parentId": "fuse/designer",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/designer/spawnsattribute",
        "href": "fuse/designer/spawnsattribute"
      },
      "titles": {
        "indexTitle": "SpawnsAttribute",
        "fullyQualifiedIndexTitle": "Fuse.Designer.SpawnsAttribute"
      }
    },
    {
      "id": {
        "id": "fuse/designer/thicknessattribute",
        "parentId": "fuse/designer",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/designer/thicknessattribute",
        "href": "fuse/designer/thicknessattribute"
      },
      "titles": {
        "indexTitle": "ThicknessAttribute",
        "fullyQualifiedIndexTitle": "Fuse.Designer.ThicknessAttribute"
      }
    },
    {
      "id": {
        "id": "fuse/designer/transitionattribute",
        "parentId": "fuse/designer",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/designer/transitionattribute",
        "href": "fuse/designer/transitionattribute"
      },
      "titles": {
        "indexTitle": "TransitionAttribute",
        "fullyQualifiedIndexTitle": "Fuse.Designer.TransitionAttribute"
      }
    },
    {
      "comment": {
        "brief": "Assume that any of these properties can be null (except Type).",
        "full": "Assume that any of these properties can be null (except Type)."
      },
      "id": {
        "id": "fuse/diagnostic",
        "parentId": "fuse",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/diagnostic",
        "href": "fuse/diagnostic"
      },
      "titles": {
        "indexTitle": "Diagnostic",
        "fullyQualifiedIndexTitle": "Fuse.Diagnostic"
      }
    },
    {
      "id": {
        "id": "fuse/drawcontext",
        "parentId": "fuse",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/drawcontext",
        "href": "fuse/drawcontext"
      },
      "titles": {
        "indexTitle": "DrawContext",
        "fullyQualifiedIndexTitle": "Fuse.DrawContext"
      }
    },
    {
      "id": {
        "id": "fuse/drawing/brush",
        "parentId": "fuse/drawing",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/drawing/brush",
        "href": "fuse/drawing/brush"
      },
      "titles": {
        "indexTitle": "Brush",
        "fullyQualifiedIndexTitle": "Fuse.Drawing.Brush"
      }
    },
    {
      "comment": {
        "brief": "@hide",
        "full": "@hide"
      },
      "id": {
        "id": "fuse/drawing/brushconverter",
        "parentId": "fuse/drawing",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/drawing/brushconverter",
        "href": "fuse/drawing/brushconverter"
      },
      "titles": {
        "indexTitle": "BrushConverter",
        "fullyQualifiedIndexTitle": "Fuse.Drawing.BrushConverter"
      }
    },
    {
      "id": {
        "id": "fuse/drawing/dynamicbrush",
        "parentId": "fuse/drawing",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/drawing/dynamicbrush",
        "href": "fuse/drawing/dynamicbrush"
      },
      "titles": {
        "indexTitle": "DynamicBrush",
        "fullyQualifiedIndexTitle": "Fuse.Drawing.DynamicBrush"
      }
    },
    {
      "comment": {
        "brief": "See @LinearGradient",
        "full": "See @LinearGradient"
      },
      "id": {
        "id": "fuse/drawing/gradientstop",
        "parentId": "fuse/drawing",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/drawing/gradientstop",
        "href": "fuse/drawing/gradientstop"
      },
      "titles": {
        "indexTitle": "GradientStop",
        "fullyQualifiedIndexTitle": "Fuse.Drawing.GradientStop"
      }
    },
    {
      "comment": {
        "brief": "A @Brush that fills a @Shape with an image.",
        "full": "A @Brush that fills a @Shape with an image.\n\nIt works almost identically to @Image, but is a @Brush and can therefore not be used as a standalone element.\n\n## Example\n\nThe following example will fill a `Circle` with an image loaded from the file `Portrait.png`:\n\n```\n<Circle Width=\"160\" Height=\"160\">\n    <ImageFill File=\"Portrait.png\" />\n</Circle>\n```"
      },
      "id": {
        "id": "fuse/drawing/imagefill",
        "parentId": "fuse/drawing",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/drawing/imagefill",
        "href": "fuse/drawing/imagefill"
      },
      "titles": {
        "indexTitle": "ImageFill",
        "fullyQualifiedIndexTitle": "Fuse.Drawing.ImageFill"
      }
    },
    {
      "id": {
        "id": "fuse/drawing/internal/multibuffer/field",
        "parentId": "fuse/drawing/internal/multibuffer",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/drawing/internal/multibuffer/field",
        "href": "fuse/drawing/internal/multibuffer/field"
      },
      "titles": {
        "indexTitle": "Field",
        "fullyQualifiedIndexTitle": "Fuse.Drawing.Internal.Field"
      }
    },
    {
      "id": {
        "id": "fuse/drawing/internal/float2buffer",
        "parentId": "fuse/drawing/internal",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/drawing/internal/float2buffer",
        "href": "fuse/drawing/internal/float2buffer"
      },
      "titles": {
        "indexTitle": "Float2Buffer",
        "fullyQualifiedIndexTitle": "Fuse.Drawing.Internal.Float2Buffer"
      }
    },
    {
      "id": {
        "id": "fuse/drawing/internal/float3buffer",
        "parentId": "fuse/drawing/internal",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/drawing/internal/float3buffer",
        "href": "fuse/drawing/internal/float3buffer"
      },
      "titles": {
        "indexTitle": "Float3Buffer",
        "fullyQualifiedIndexTitle": "Fuse.Drawing.Internal.Float3Buffer"
      }
    },
    {
      "id": {
        "id": "fuse/drawing/internal/floatbuffer",
        "parentId": "fuse/drawing/internal",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/drawing/internal/floatbuffer",
        "href": "fuse/drawing/internal/floatbuffer"
      },
      "titles": {
        "indexTitle": "FloatBuffer",
        "fullyQualifiedIndexTitle": "Fuse.Drawing.Internal.FloatBuffer"
      }
    },
    {
      "id": {
        "id": "fuse/drawing/internal/multibuffer",
        "parentId": "fuse/drawing/internal",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/drawing/internal/multibuffer",
        "href": "fuse/drawing/internal/multibuffer"
      },
      "titles": {
        "indexTitle": "MultiBuffer",
        "fullyQualifiedIndexTitle": "Fuse.Drawing.Internal.MultiBuffer"
      }
    },
    {
      "id": {
        "id": "fuse/drawing/internal/multibuffer/setter",
        "parentId": "fuse/drawing/internal/multibuffer",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/drawing/internal/multibuffer/setter",
        "href": "fuse/drawing/internal/multibuffer/setter"
      },
      "titles": {
        "indexTitle": "Setter",
        "fullyQualifiedIndexTitle": "Fuse.Drawing.Internal.Setter"
      }
    },
    {
      "comment": {
        "brief": "Provides a type-friendly wrapper for buffers and device buffers.",
        "full": "Provides a type-friendly wrapper for buffers and device buffers.\n\nThis also provides a logical collection on top of the buffer. The \"Count\", \"Reset\", and\n\"Append\" functions work on this logical set. The buffer will be dynamically resized as necessary.\n\nThe \"Set\" operation is directly on the buffer and ignores the logical set.\n\nUNO: This is really ugly now. I can't figure out how to make this generic on the type.\nThus each type needs its own derived class! (NOTE: I've just removed the generic for now)"
      },
      "id": {
        "id": "fuse/drawing/internal/typedbuffer",
        "parentId": "fuse/drawing/internal",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/drawing/internal/typedbuffer",
        "href": "fuse/drawing/internal/typedbuffer"
      },
      "titles": {
        "indexTitle": "TypedBuffer",
        "fullyQualifiedIndexTitle": "Fuse.Drawing.Internal.TypedBuffer"
      }
    },
    {
      "id": {
        "id": "fuse/drawing/internal/ushortbuffer",
        "parentId": "fuse/drawing/internal",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/drawing/internal/ushortbuffer",
        "href": "fuse/drawing/internal/ushortbuffer"
      },
      "titles": {
        "indexTitle": "UShortBuffer",
        "fullyQualifiedIndexTitle": "Fuse.Drawing.Internal.UShortBuffer"
      }
    },
    {
      "comment": {
        "brief": "A linear gradient @Brush.",
        "full": "A linear gradient @Brush.\n\n@LinearGradient lets you describe a linear gradient using a collection of @GradientStops.\nThe following example displays a @Rectangle with a @LinearGradient that fades from white at the top, to black at the bottom.\n\n```\n<Rectangle>\n    <LinearGradient StartPoint=\"0,0\" EndPoint=\"0,1\">\n        <GradientStop Offset=\"0\" Color=\"#fff\" />\n        <GradientStop Offset=\"1\" Color=\"#000\" />\n    </LinearGradient>\n</Rectangle>\n```\n\nYou may also specify any number of @GradientStops.\n\n```\n<Circle>\n    <LinearGradient AngleDegrees=\"90\">\n        <GradientStop Offset=\"0\" Color=\"#f00\" />\n        <GradientStop Offset=\"0.3\" Color=\"#f0f\" />\n        <GradientStop Offset=\"0.6\" Color=\"#00f\" />\n        <GradientStop Offset=\"1\" Color=\"#0ff\" />\n    </LinearGradient>\n</Circle>\n```\n\nThe `StartPoint` and `EndPoint` properties are both specified as a proportion of the total size of the @Shape the brush is applied to.\nFor instance, you can specify a diagonal brush by using `StartPoint=\"0,0\" EndPoint=\"1,1\"`.\n\nInstead of `StartPoint` and `EndPoint`, you can also specify an angle. This can either be in radians using the `Angle` property, or in degrees using the `AngleDegrees` property.\n\n```\n<LinearGradient Angle=\"2.4\" />\n              or\n<LinearGradient AngleDegrees=\"45\" />\n```"
      },
      "id": {
        "id": "fuse/drawing/lineargradient",
        "parentId": "fuse/drawing",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/drawing/lineargradient",
        "href": "fuse/drawing/lineargradient"
      },
      "titles": {
        "indexTitle": "LinearGradient",
        "fullyQualifiedIndexTitle": "Fuse.Drawing.LinearGradient"
      }
    },
    {
      "id": {
        "id": "fuse/drawing/lineparser",
        "parentId": "fuse/drawing",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/drawing/lineparser",
        "href": "fuse/drawing/lineparser"
      },
      "titles": {
        "indexTitle": "LineParser",
        "fullyQualifiedIndexTitle": "Fuse.Drawing.LineParser"
      }
    },
    {
      "comment": {
        "brief": "A helper class that simplifies the creation of lists of line segments.",
        "full": "A helper class that simplifies the creation of lists of line segments."
      },
      "id": {
        "id": "fuse/drawing/linesegments",
        "parentId": "fuse/drawing",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/drawing/linesegments",
        "href": "fuse/drawing/linesegments"
      },
      "titles": {
        "indexTitle": "LineSegments",
        "fullyQualifiedIndexTitle": "Fuse.Drawing.LineSegments"
      }
    },
    {
      "id": {
        "id": "fuse/drawing/primitives/circle",
        "parentId": "fuse/drawing/primitives",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/drawing/primitives/circle",
        "href": "fuse/drawing/primitives/circle"
      },
      "titles": {
        "indexTitle": "Circle",
        "fullyQualifiedIndexTitle": "Fuse.Drawing.Primitives.Circle"
      }
    },
    {
      "id": {
        "id": "fuse/drawing/primitives/rectangle",
        "parentId": "fuse/drawing/primitives",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/drawing/primitives/rectangle",
        "href": "fuse/drawing/primitives/rectangle"
      },
      "titles": {
        "indexTitle": "Rectangle",
        "fullyQualifiedIndexTitle": "Fuse.Drawing.Primitives.Rectangle"
      }
    },
    {
      "id": {
        "id": "fuse/drawing/primitives/wedge",
        "parentId": "fuse/drawing/primitives",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/drawing/primitives/wedge",
        "href": "fuse/drawing/primitives/wedge"
      },
      "titles": {
        "indexTitle": "Wedge",
        "fullyQualifiedIndexTitle": "Fuse.Drawing.Primitives.Wedge"
      }
    },
    {
      "id": {
        "id": "fuse/drawing/solidcolor",
        "parentId": "fuse/drawing",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/drawing/solidcolor",
        "href": "fuse/drawing/solidcolor"
      },
      "titles": {
        "indexTitle": "SolidColor",
        "fullyQualifiedIndexTitle": "Fuse.Drawing.SolidColor"
      }
    },
    {
      "id": {
        "id": "fuse/drawing/staticbrush",
        "parentId": "fuse/drawing",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/drawing/staticbrush",
        "href": "fuse/drawing/staticbrush"
      },
      "titles": {
        "indexTitle": "StaticBrush",
        "fullyQualifiedIndexTitle": "Fuse.Drawing.StaticBrush"
      }
    },
    {
      "id": {
        "id": "fuse/drawing/staticsolidcolor",
        "parentId": "fuse/drawing",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/drawing/staticsolidcolor",
        "href": "fuse/drawing/staticsolidcolor"
      },
      "titles": {
        "indexTitle": "StaticSolidColor",
        "fullyQualifiedIndexTitle": "Fuse.Drawing.StaticSolidColor"
      }
    },
    {
      "id": {
        "id": "fuse/drawing/stroke",
        "parentId": "fuse/drawing",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/drawing/stroke",
        "href": "fuse/drawing/stroke"
      },
      "titles": {
        "indexTitle": "Stroke",
        "fullyQualifiedIndexTitle": "Fuse.Drawing.Stroke"
      }
    },
    {
      "comment": {
        "brief": "The Surface is a path-based drawing API. A call to `CreatePath` is used to create a path, then one of `StrokePath` or `FillPath` is used to draw it.",
        "full": "The Surface is a path-based drawing API. A call to `CreatePath` is used to create a path, then one of `StrokePath` or `FillPath` is used to draw it.\n\nThis allows the users of `Canvas` to optimize for animation of either the path or the stroke/fill objects independently.\n\nThis also keeps the API minimal. There are no convenience functions in this class. Those are provided via higher-level classes, such as `LineSegments` or `SurfaceUtil`.",
        "attributes": {
          "advanced": true,
          "experimental": true
        }
      },
      "id": {
        "id": "fuse/drawing/surface",
        "parentId": "fuse/drawing",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/drawing/surface",
        "href": "fuse/drawing/surface"
      },
      "titles": {
        "indexTitle": "Surface",
        "fullyQualifiedIndexTitle": "Fuse.Drawing.Surface"
      }
    },
    {
      "comment": {
        "brief": "An object used to refer to a created path.",
        "full": "An object used to refer to a created path.\n\nEach backend should derive from this type. The paths will not be used cross-implementation."
      },
      "id": {
        "id": "fuse/drawing/surfacepath",
        "parentId": "fuse/drawing",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/drawing/surfacepath",
        "href": "fuse/drawing/surfacepath"
      },
      "titles": {
        "indexTitle": "SurfacePath",
        "fullyQualifiedIndexTitle": "Fuse.Drawing.SurfacePath"
      }
    },
    {
      "id": {
        "id": "fuse/effects/basiceffect",
        "parentId": "fuse/effects",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/effects/basiceffect",
        "href": "fuse/effects/basiceffect"
      },
      "titles": {
        "indexTitle": "BasicEffect",
        "fullyQualifiedIndexTitle": "Fuse.Effects.BasicEffect"
      }
    },
    {
      "comment": {
        "brief": "Applies a gaussian blur to an @Element.",
        "full": "Applies a gaussian blur to an @Element."
      },
      "id": {
        "id": "fuse/effects/blur",
        "parentId": "fuse/effects",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/effects/blur",
        "href": "fuse/effects/blur"
      },
      "titles": {
        "indexTitle": "Blur",
        "fullyQualifiedIndexTitle": "Fuse.Effects.Blur"
      }
    },
    {
      "comment": {
        "brief": "Desaturates an @Element.",
        "full": "Desaturates an @Element."
      },
      "id": {
        "id": "fuse/effects/desaturate",
        "parentId": "fuse/effects",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/effects/desaturate",
        "href": "fuse/effects/desaturate"
      },
      "titles": {
        "indexTitle": "Desaturate",
        "fullyQualifiedIndexTitle": "Fuse.Effects.Desaturate"
      }
    },
    {
      "comment": {
        "brief": "DropShadow applies an underlying shadow to an @Element.",
        "full": "DropShadow applies an underlying shadow to an @Element."
      },
      "id": {
        "id": "fuse/effects/dropshadow",
        "parentId": "fuse/effects",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/effects/dropshadow",
        "href": "fuse/effects/dropshadow"
      },
      "titles": {
        "indexTitle": "DropShadow",
        "fullyQualifiedIndexTitle": "Fuse.Effects.DropShadow"
      }
    },
    {
      "comment": {
        "brief": "Applies a duotone effect to an @Element.",
        "full": "Applies a duotone effect to an @Element."
      },
      "id": {
        "id": "fuse/effects/duotone",
        "parentId": "fuse/effects",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/effects/duotone",
        "href": "fuse/effects/duotone"
      },
      "titles": {
        "indexTitle": "Duotone",
        "fullyQualifiedIndexTitle": "Fuse.Effects.Duotone"
      }
    },
    {
      "id": {
        "id": "fuse/effects/effect",
        "parentId": "fuse/effects",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/effects/effect",
        "href": "fuse/effects/effect"
      },
      "titles": {
        "indexTitle": "Effect",
        "fullyQualifiedIndexTitle": "Fuse.Effects.Effect"
      }
    },
    {
      "comment": {
        "brief": "Applies a glass backdrop effect to an @Element.",
        "full": "Applies a glass backdrop effect to an @Element.\n\nThe following example displays a glass effect.\n\n<ClientPanel>\n    <Panel Width=\"150\" Height=\"70\" Alignment=\"Center\">\n        <Glass Radius=\"10\" />\n    </Panel>\n    <Image ux:Name=\"image\" Alignment=\"Center\" Margin=\"20\" Background=\"Purple\" Url=\"https://fuseopen.com/assets/white-logo.png\" />\n</ClientPanel>\n\nWe need to set the `Background` property of the `Glass` behavior to the Element that will act as a background so it will get blurred out.\nIf we don't set it, The `Glass` behavior will try to find the background from the sibling element where `Glass` behavior is attached"
      },
      "id": {
        "id": "fuse/effects/glass",
        "parentId": "fuse/effects",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/effects/glass",
        "href": "fuse/effects/glass"
      },
      "titles": {
        "indexTitle": "Glass",
        "fullyQualifiedIndexTitle": "Fuse.Effects.Glass"
      }
    },
    {
      "comment": {
        "brief": "Applies a classic halftone effect to an @Element.",
        "full": "Applies a classic halftone effect to an @Element."
      },
      "id": {
        "id": "fuse/effects/halftone",
        "parentId": "fuse/effects",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/effects/halftone",
        "href": "fuse/effects/halftone"
      },
      "titles": {
        "indexTitle": "Halftone",
        "fullyQualifiedIndexTitle": "Fuse.Effects.Halftone"
      }
    },
    {
      "comment": {
        "brief": "Masks an @Element to an image.",
        "full": "Masks an @Element to an image."
      },
      "id": {
        "id": "fuse/effects/mask",
        "parentId": "fuse/effects",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/effects/mask",
        "href": "fuse/effects/mask"
      },
      "titles": {
        "indexTitle": "Mask",
        "fullyQualifiedIndexTitle": "Fuse.Effects.Mask"
      }
    },
    {
      "comment": {
        "brief": "Elements are visuals that cover a rectangular 2D region.",
        "full": "Elements are visuals that cover a rectangular 2D region.\n\n# Common properties\n\n## HitTestMode\n\nWhen interacting with an element, it is sometimes desirable to be able to differentiate which elements can be interacted with and how. This is typically referred to as \"hit testing\". In Fuse, how elements interact with user input can be set using `HitTestMode`.\n\n### Example\nThis example will layout two `Rectangle`s and add `Clicked`-triggers to both of them. However, only the left one will output anything when clicked, as the hit testing has been explicitly disabled on the right rectangle:\n\n\t<Grid ColumnCount=\"2\">\n\t\t<Rectangle Width=\"100\" Height=\"100\" Fill=\"#808\" >\n\t\t\t<Clicked>\n\t\t\t\t<DebugAction Message=\"Clicked left\" />\n\t\t\t</Clicked>\n\t\t</Rectangle>\n\t\t<Rectangle Width=\"100\" Height=\"100\" Fill=\"#808\" HitTestMode=\"None\" >\n\t\t\t<Clicked>\n\t\t\t\t<DebugAction Message=\"Clicked right\" />\n\t\t\t</Clicked>\n\t\t</Rectangle>\n\t</Grid>\n\t\n This can be very helpful if you have visual elements obscuring elements below it, where you want the lower elements respond to input.\n\n## ClipToBounds\n\nNormally, when laying out an element inside the other, the inner element can freely live outside the parent element:\n\n\t<Panel Width=\"100\" Height=\"100\">\n\t\t\t<Image Margin=\"-100\" File=\"Pictures/Picture1.jpg\"\n\t\t\t\tStretchMode=\"UniformToFill\" />\n\t</Panel>\n\nThis `Image` will appear to be 300pt wide and tall, as the `Panel` doesn't clip children to its bounds.\n\nIf you intend to have the `Image` clip to its parent size, simply set `ClipToBounds=\"true\"` on the `Panel`:\n\n\t\t<Panel Width=\"100\" Height=\"100\" ClipToBounds=\"true\">\n\t\t\t<Image Margin=\"-100\" File=\"Pictures/Picture1.jpg\"\n\t\t\t\tStretchMode=\"UniformToFill\" />\n\t\t</Panel>\n\nNow, the `Image` will not overflow the bounds of the `Panel`.\n\n## Opacity\n\nYou can set the transparency of objects using the `Opacity`-property. When `Opacity=\"0\"`, the element is completely transparent.\n\n### Example\n\nIn this example, a panel's opacity is set to 0.5\n\n\t<Panel>\n\t\t<Opacity Value=\"0.5\" />\n\t</Panel>\n\n## Layers\n\nIt is often helpful to redefine what existing controls should look like. Elements that are added to containers can be assigned to different layers. If you want a button to appear with a red background, you can redefine its `Background` `Layer`:\n\n\t<Button Text=\"Hello!\">\n\t\t<Rectangle Fill=\"#931\" Layer=\"Background\" />\n\t</Button>\n\nThis will not change the layout or behavior of the @Button, but its appearance will change.\n\r\n\n# Available Element classes\n\n[subclass Fuse.Elements.Element]",
        "attributes": {
          "topic": "Elements"
        }
      },
      "id": {
        "id": "fuse/elements/element",
        "parentId": "fuse/elements",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/elements/element",
        "href": "fuse/elements/element"
      },
      "titles": {
        "indexTitle": "Element",
        "fullyQualifiedIndexTitle": "Fuse.Elements.Element"
      }
    },
    {
      "comment": {
        "brief": "Returns the height of an @Element: `ActualSize.Y`",
        "full": "Returns the height of an @Element: `ActualSize.Y`"
      },
      "id": {
        "id": "fuse/elements/heightfunction",
        "parentId": "fuse/elements",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/elements/heightfunction",
        "href": "fuse/elements/heightfunction"
      },
      "titles": {
        "indexTitle": "HeightFunction",
        "fullyQualifiedIndexTitle": "Fuse.Elements.HeightFunction"
      }
    },
    {
      "id": {
        "id": "fuse/elements/interactivetransform",
        "parentId": "fuse/elements",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/elements/interactivetransform",
        "href": "fuse/elements/interactivetransform"
      },
      "titles": {
        "indexTitle": "InteractiveTransform",
        "fullyQualifiedIndexTitle": "Fuse.Elements.InteractiveTransform"
      }
    },
    {
      "comment": {
        "brief": "These functions provide a layout property of an @Element.",
        "full": "These functions provide a layout property of an @Element.\n\nThe returned values are the actual values, resulting after layout has been performed. If the element does not yet have a layout, or the layout has been lost, the values here will also be lost.\n\n[subclass Fuse.Elements.LayoutFunction]\n[subclass Fuse.Elements.XYBaseLayoutFunction]"
      },
      "id": {
        "id": "fuse/elements/layoutfunction",
        "parentId": "fuse/elements",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/elements/layoutfunction",
        "href": "fuse/elements/layoutfunction"
      },
      "titles": {
        "indexTitle": "LayoutFunction",
        "fullyQualifiedIndexTitle": "Fuse.Elements.LayoutFunction"
      }
    },
    {
      "comment": {
        "brief": "For any placement change the following happens:",
        "full": "For any placement change the following happens:\n\n- child layout is performed\n- Preplacement dispatched\n- actual local placement modified\n- layout change event deferred"
      },
      "id": {
        "id": "fuse/elements/preplacementargs",
        "parentId": "fuse/elements",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/elements/preplacementargs",
        "href": "fuse/elements/preplacementargs"
      },
      "titles": {
        "indexTitle": "PreplacementArgs",
        "fullyQualifiedIndexTitle": "Fuse.Elements.PreplacementArgs"
      }
    },
    {
      "comment": {
        "brief": "The Viewport element allows you to perform 3D transformations with perspective projection.",
        "full": "The Viewport element allows you to perform 3D transformations with perspective projection.\n\nThe Perspective property controls how far away the camera is from the Z = 0 plane (where everything is drawn by default), in points.\n\n    <App>\n        <Viewport Perspective=\"400\">\n            <Panel>\n                <Rectangle Width=\"200\" Height=\"200\" Background=\"#2ecc71\">\n                    <Clicked>\n                        <Rotate DegreesX=\"360\" Duration=\"1.5\" Easing=\"QuadraticInOut\" DurationBack=\"0\" />\n                    </Clicked>\n                </Rectangle>\n            </Panel>\n        </Viewport>\n    </App>"
      },
      "id": {
        "id": "fuse/elements/viewport",
        "parentId": "fuse/elements",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/elements/viewport",
        "href": "fuse/elements/viewport"
      },
      "titles": {
        "indexTitle": "Viewport",
        "fullyQualifiedIndexTitle": "Fuse.Elements.Viewport"
      }
    },
    {
      "comment": {
        "brief": "Returns the width of an @Element: `ActualSize.X`",
        "full": "Returns the width of an @Element: `ActualSize.X`"
      },
      "id": {
        "id": "fuse/elements/widthfunction",
        "parentId": "fuse/elements",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/elements/widthfunction",
        "href": "fuse/elements/widthfunction"
      },
      "titles": {
        "indexTitle": "WidthFunction",
        "fullyQualifiedIndexTitle": "Fuse.Elements.WidthFunction"
      }
    },
    {
      "comment": {
        "brief": "Returns one of:",
        "full": "Returns one of:\n\n- The `ActualPosition.X` of an @Element. Refer to @LayoutFunction\n- The `X` value of a `float`, `float2`, `float3`, or `float4`"
      },
      "id": {
        "id": "fuse/elements/xfunction",
        "parentId": "fuse/elements",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/elements/xfunction",
        "href": "fuse/elements/xfunction"
      },
      "titles": {
        "indexTitle": "XFunction",
        "fullyQualifiedIndexTitle": "Fuse.Elements.XFunction"
      }
    },
    {
      "comment": {
        "brief": "These are overloaded functions that either provide a layout property or a vector component.",
        "full": "These are overloaded functions that either provide a layout property or a vector component.\n\n[subclass Fuse.Elements.XYBaseLayoutFunction]"
      },
      "id": {
        "id": "fuse/elements/xybaselayoutfunction",
        "parentId": "fuse/elements",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/elements/xybaselayoutfunction",
        "href": "fuse/elements/xybaselayoutfunction"
      },
      "titles": {
        "indexTitle": "XYBaseLayoutFunction",
        "fullyQualifiedIndexTitle": "Fuse.Elements.XYBaseLayoutFunction"
      }
    },
    {
      "comment": {
        "brief": "Returns one of:",
        "full": "Returns one of:\n\n- The `ActualPosition.Y` of an @Element. Refer to @LayoutFunction\n- The `Y` value of a `float2`, `float3`, or `float4`"
      },
      "id": {
        "id": "fuse/elements/yfunction",
        "parentId": "fuse/elements",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/elements/yfunction",
        "href": "fuse/elements/yfunction"
      },
      "titles": {
        "indexTitle": "YFunction",
        "fullyQualifiedIndexTitle": "Fuse.Elements.YFunction"
      }
    },
    {
      "id": {
        "id": "fuse/fastmatrix",
        "parentId": "fuse",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/fastmatrix",
        "href": "fuse/fastmatrix"
      },
      "titles": {
        "indexTitle": "FastMatrix",
        "fullyQualifiedIndexTitle": "Fuse.FastMatrix"
      }
    },
    {
      "id": {
        "id": "fuse/filesystem/nothing",
        "parentId": "fuse/filesystem",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/filesystem/nothing",
        "href": "fuse/filesystem/nothing"
      },
      "titles": {
        "indexTitle": "Nothing",
        "fullyQualifiedIndexTitle": "Fuse.FileSystem.Nothing"
      }
    },
    {
      "comment": {
        "brief": "Represents a specific typeface.",
        "full": "Represents a specific typeface.\n\nGlobal resource fonts can be specified directly on @Text and @TextInput objects:\n\n    <Text Font=\"PlatformDefault\" />\n\nOr inline based on an `.otf` or `.ttf` file:\n\n    <Text Value=\"Hello!\">\n        <Font File=\"arial.ttf\" />\n    </Text>\n\nTo create a global resource font from a file, use the `ux:Global` attribute:\n\n    <Font File=\"arial.ttf\" ux:Global=\"MyDefaultFont\" />\n    <Text Font=\"MyDefaultFont\" />"
      },
      "id": {
        "id": "fuse/font",
        "parentId": "fuse",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/font",
        "href": "fuse/font"
      },
      "titles": {
        "indexTitle": "Font",
        "fullyQualifiedIndexTitle": "Fuse.Font"
      }
    },
    {
      "id": {
        "id": "fuse/geolocation/geocoordinates",
        "parentId": "fuse/geolocation",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/geolocation/geocoordinates",
        "href": "fuse/geolocation/geocoordinates"
      },
      "titles": {
        "indexTitle": "GeoCoordinates",
        "fullyQualifiedIndexTitle": "Fuse.GeoLocation.GeoCoordinates"
      }
    },
    {
      "id": {
        "id": "fuse/geolocation/location",
        "parentId": "fuse/geolocation",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/geolocation/location",
        "href": "fuse/geolocation/location"
      },
      "titles": {
        "indexTitle": "Location",
        "fullyQualifiedIndexTitle": "Fuse.GeoLocation.Location"
      }
    },
    {
      "id": {
        "id": "fuse/geolocation/locationtracker",
        "parentId": "fuse/geolocation",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/geolocation/locationtracker",
        "href": "fuse/geolocation/locationtracker"
      },
      "titles": {
        "indexTitle": "LocationTracker",
        "fullyQualifiedIndexTitle": "Fuse.GeoLocation.LocationTracker"
      }
    },
    {
      "id": {
        "id": "fuse/geolocation/spooflocationprovider",
        "parentId": "fuse/geolocation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/geolocation/spooflocationprovider",
        "href": "fuse/geolocation/spooflocationprovider"
      },
      "titles": {
        "indexTitle": "SpoofLocationProvider",
        "fullyQualifiedIndexTitle": "Fuse.GeoLocation.SpoofLocationProvider"
      }
    },
    {
      "comment": {
        "brief": "Helper class for implementing circular @(RangeControl:RangeControls)",
        "full": "Helper class for implementing circular @(RangeControl:RangeControls)\n\nUsed to enable circual touch input on @RangeControl.\nTypically used when implementing circular range pickers,\nlike a clock timepicker or dials.\n\n## Example\n\n### Andgle-based circular range control\nThe following example shows a simple circular @(RangeControl) implemented using `CircularRangeBehavior`, where a visual is rotated as the @(RangeControl) is changed. The range is calculated from the angle between the mouse and the X-axis\n\n    <RangeControl Width=\"180\" Height=\"180\" Margin=\"2\">\n        <CircularRangeBehavior />\n        <Panel ux:Name=\"thumb\" Margin=\"4\">\n            <Rectangle Color=\"#fff\" Alignment=\"Right\" Height=\"18\" Width=\"48\" CornerRadius=\"4\" />\n        </Panel>\n        <ProgressAnimation>\n            <Rotate Target=\"thumb\" Degrees=\"360\" />\n        </ProgressAnimation>\n        <Circle Color=\"#aaa\" />\n    </RangeControl>\n\n### Angle and radius based circular range control\nWhen used with a @(RangeControl2D), you can get both the angle progress, and the radius progress. This effectively means that your range control allows the user to control two ranges at once.\n\n    <RangeControl2D Width=\"180\" Height=\"180\" Margin=\"2\" ux:Name=\"rangeControl\">\n        <CircularRangeBehavior/>\n        <Panel ux:Name=\"thumb\" Margin=\"4\">\n            <Rectangle Color=\"#fff\" Alignment=\"Right\" Height=\"18\" Width=\"48\" CornerRadius=\"4\" />\n        </Panel>\n        <RangeAnimation Minimum=\"0\" Maximum=\"100\" Value=\"{ReadProperty rangeControl.ValueX}\">\n            <Rotate Target=\"thumb\" Degrees=\"360\" />\n        </RangeAnimation>\n        <RangeAnimation Minimum=\"0\" Maximum=\"100\" Value=\"{ReadProperty rangeControl.ValueY}\">\n            <Change radiusCircle.Factor=\"1\" />\n        </RangeAnimation>\n        <Circle Color=\"#0FF\" Alignment=\"Center\" Width=\"180\" Height=\"180\">\n            <Scaling ux:Name=\"radiusCircle\" Factor=\"0\" />\n        </Circle>\n        <Circle Color=\"#aaa\" />\n    </RangeControl2D>"
      },
      "id": {
        "id": "fuse/gestures/circularrangebehavior",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/circularrangebehavior",
        "href": "fuse/gestures/circularrangebehavior"
      },
      "titles": {
        "indexTitle": "CircularRangeBehavior",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.CircularRangeBehavior"
      }
    },
    {
      "comment": {
        "brief": "Triggers when a pointer is clicked on a @Visual.",
        "full": "Triggers when a pointer is clicked on a @Visual.\n\nThe `Clicked` trigger is quite similar to the @(Tapped) trigger, but these two triggers differ slightly in the interactions they handle.\nWhile a click represents a pointer being pressed and then released on an element, a tap represents a pointer being both pressed and released within a certain period of time.\n\n# Example\nIn this example, a panel will rotate for 0.4 seconds, then rotate back, when clicked:\n\n    <Panel Background=\"#F00\">\n        <Clicked>\n            <Rotate Degrees=\"90\" Duration=\".4\" DurationBack=\".2\" />\n        </Clicked>\n    </Panel>"
      },
      "id": {
        "id": "fuse/gestures/clicked",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/clicked",
        "href": "fuse/gestures/clicked"
      },
      "titles": {
        "indexTitle": "Clicked",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.Clicked"
      }
    },
    {
      "id": {
        "id": "fuse/gestures/clickedargs",
        "parentId": "fuse/gestures",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/clickedargs",
        "href": "fuse/gestures/clickedargs"
      },
      "titles": {
        "indexTitle": "ClickedArgs",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.ClickedArgs"
      }
    },
    {
      "id": {
        "id": "fuse/gestures/clickertrigger",
        "parentId": "fuse/gestures",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/clickertrigger",
        "href": "fuse/gestures/clickertrigger"
      },
      "titles": {
        "indexTitle": "ClickerTrigger",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.ClickerTrigger"
      }
    },
    {
      "comment": {
        "brief": "Triggers when a pointer is double-clicked on a @Visual.",
        "full": "Triggers when a pointer is double-clicked on a @Visual.\n\nThis `DoubleClicked` trigger is very similar to the `DoubleTapped` trigger, but these two triggers differ slightly in the interactions they handle.\nWhile a click represents a pointer being pressed and then released on an element, a tap represents a pointer being both pressed and released within a certain period of time.\n\n## Example\nThe following example rotates a rectangle if it is double clicked.\n\n    <Panel Width=\"100\" Height=\"100\" Color=\"#F00\" >\n        <DoubleClicked>\n            <Rotate Degrees=\"270\" Easing=\"ExponentialOut\" Duration=\".3\"/>\n        </DoubleClicked>\n    </Panel>"
      },
      "id": {
        "id": "fuse/gestures/doubleclicked",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/doubleclicked",
        "href": "fuse/gestures/doubleclicked"
      },
      "titles": {
        "indexTitle": "DoubleClicked",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.DoubleClicked"
      }
    },
    {
      "comment": {
        "brief": "Triggers when a pointer is double-tapped on a @Visual.",
        "full": "Triggers when a pointer is double-tapped on a @Visual.\n\nThis `DoubleTapped` trigger is very similar to the `DoubleClicked` trigger, but these two triggers differ slightly in the interactions they handle.\nWhile a click represents a pointer being pressed and then released on an element, a tap represents a pointer being both pressed and released within a certain period of time.\n\n## Example\nThe following example rotates a rectangle if it is double tapped.\n\n    <Panel Width=\"100\" Height=\"100\" Color=\"#F00\" >\n        <DoubleTapped>\n            <Rotate Degrees=\"270\" Easing=\"ExponentialOut\" Duration=\".3\"/>\n        </DoubleTapped>\n    </Panel>"
      },
      "id": {
        "id": "fuse/gestures/doubletapped",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/doubletapped",
        "href": "fuse/gestures/doubletapped"
      },
      "titles": {
        "indexTitle": "DoubleTapped",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.DoubleTapped"
      }
    },
    {
      "comment": {
        "brief": "Triggers when a pointer is double tapped (quickly) on a @Visual.",
        "full": "Triggers when a pointer is double tapped (quickly) on a @Visual."
      },
      "id": {
        "id": "fuse/gestures/doubletappedargs",
        "parentId": "fuse/gestures",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/doubletappedargs",
        "href": "fuse/gestures/doubletappedargs"
      },
      "titles": {
        "indexTitle": "DoubleTappedArgs",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.DoubleTappedArgs"
      }
    },
    {
      "comment": {
        "brief": "DEPRECATED: Use `SwipeGesture` with `EdgeNavigator` instead",
        "full": "DEPRECATED: Use `SwipeGesture` with `EdgeNavigator` instead"
      },
      "id": {
        "id": "fuse/gestures/edgeswipeanimation",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/edgeswipeanimation",
        "href": "fuse/gestures/edgeswipeanimation"
      },
      "titles": {
        "indexTitle": "EdgeSwipeAnimation",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.EdgeSwipeAnimation"
      }
    },
    {
      "comment": {
        "brief": "Triggers when a pointer is pressed on a @Visual.",
        "full": "Triggers when a pointer is pressed on a @Visual.\n\nThe `HoldPress` trigger is a repeating trigger that will continue to pulse as long as a @Visual is being held.\n\n# Example\nIn this example, a panel will scale and call a JS callback `pressed` for every 0.2 seconds, when pressed:\n\n    <Panel Background=\"#F00\">\n        <HoldPress First=\"true\" Handler=\"{pressed}\" Delay=\"0.5\" Repeat=\"0.2\">\n            <Scale Target=\"rect\" Vector=\"1.2\" Duration=\"0.2\" />\n        </HoldPress>\n    </Panel>"
      },
      "id": {
        "id": "fuse/gestures/holdpress",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/holdpress",
        "href": "fuse/gestures/holdpress"
      },
      "titles": {
        "indexTitle": "HoldPress",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.HoldPress"
      }
    },
    {
      "id": {
        "id": "fuse/gestures/holdpressargs",
        "parentId": "fuse/gestures",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/holdpressargs",
        "href": "fuse/gestures/holdpressargs"
      },
      "titles": {
        "indexTitle": "HoldPressArgs",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.HoldPressArgs"
      }
    },
    {
      "id": {
        "id": "fuse/gestures/keepfocusinview",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/keepfocusinview",
        "href": "fuse/gestures/keepfocusinview"
      },
      "titles": {
        "indexTitle": "KeepFocusInView",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.KeepFocusInView"
      }
    },
    {
      "id": {
        "id": "fuse/gestures/keepinview",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/keepinview",
        "href": "fuse/gestures/keepinview"
      },
      "titles": {
        "indexTitle": "KeepInView",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.KeepInView"
      }
    },
    {
      "id": {
        "id": "fuse/gestures/keepinviewcommon",
        "parentId": "fuse/gestures",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/keepinviewcommon",
        "href": "fuse/gestures/keepinviewcommon"
      },
      "titles": {
        "indexTitle": "KeepInViewCommon",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.KeepInViewCommon"
      }
    },
    {
      "comment": {
        "brief": "Common linear sliding behaviour used for implementing a @RangeControl.",
        "full": "Common linear sliding behaviour used for implementing a @RangeControl.\n\nUsed to enable sliding touch input on @RangeControl.\n\nThe range of motion of the control is the size of the `LinearRangeBehavior` parent. By nesting deeper than the immediate child of the @RangeControl you can have a range of motion distinct from the size of the overall control.\n\n## Example\n\n    <StackPanel>\n\n        <RangeControl ux:Class=\"CustomSlider\" Padding=\"16,2,16,2\" Margin=\"2\" >\n            <Panel>\n                <LinearRangeBehavior />\n                <Circle Anchor=\"50%,50%\" ux:Name=\"thumb\" Alignment=\"Left\" Color=\"#ffffffee\" Width=\"28\" Height=\"28\" />\n            </Panel>\n            <Rectangle Layer=\"Background\" Color=\"#aaaaaacc\" CornerRadius=\"45\" />\n            <ProgressAnimation>\n                <Move Target=\"thumb\" X=\"1\" RelativeTo=\"ParentSize\" />\n            </ProgressAnimation>\n        </RangeControl>\n\n        <CustomSlider />\n\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/gestures/linearrangebehavior",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/linearrangebehavior",
        "href": "fuse/gestures/linearrangebehavior"
      },
      "titles": {
        "indexTitle": "LinearRangeBehavior",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.LinearRangeBehavior"
      }
    },
    {
      "comment": {
        "brief": "Triggers when a pointer is held down for a period of time.",
        "full": "Triggers when a pointer is held down for a period of time.\n\nBeing @LongPressed does not prevent other gestures, like @Clicked, from also triggering on the visual."
      },
      "id": {
        "id": "fuse/gestures/longpressed",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/longpressed",
        "href": "fuse/gestures/longpressed"
      },
      "titles": {
        "indexTitle": "LongPressed",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.LongPressed"
      }
    },
    {
      "id": {
        "id": "fuse/gestures/longpressedargs",
        "parentId": "fuse/gestures",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/longpressedargs",
        "href": "fuse/gestures/longpressedargs"
      },
      "titles": {
        "indexTitle": "LongPressedArgs",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.LongPressedArgs"
      }
    },
    {
      "comment": {
        "brief": "A @TransformGesture that provides panning (2D translation).",
        "full": "A @TransformGesture that provides panning (2D translation).\n\nThis is triggered by two pointers (fingers) on the device moving together.\n\nFor testing on desktop this can be triggered by holding down Shift, pressing the mouse button and moving. (This desktop feature is intended only for testing, so the specifics of how this works should not be relied upon.)"
      },
      "id": {
        "id": "fuse/gestures/pangesture",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/pangesture",
        "href": "fuse/gestures/pangesture"
      },
      "titles": {
        "indexTitle": "PanGesture",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.PanGesture"
      }
    },
    {
      "comment": {
        "brief": "Locks pointer input to a sub-tress in the UX for a limited time.",
        "full": "Locks pointer input to a sub-tress in the UX for a limited time.",
        "attributes": {
          "experimental": true
        }
      },
      "id": {
        "id": "fuse/gestures/pointercapture",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/pointercapture",
        "href": "fuse/gestures/pointercapture"
      },
      "titles": {
        "indexTitle": "PointerCapture",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.PointerCapture"
      }
    },
    {
      "comment": {
        "brief": "Triggers when a pointer is pressed on a visual.\nAs opposed to @Clicked or @Tapped, this trigger triggers immediately when a\npointer is pressed on the visual. It does not wait for a pointer release or minimum\namount of press time.",
        "full": "Triggers when a pointer is pressed on a visual.\nAs opposed to @Clicked or @Tapped, this trigger triggers immediately when a\npointer is pressed on the visual. It does not wait for a pointer release or minimum\namount of press time."
      },
      "id": {
        "id": "fuse/gestures/pressed",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/pressed",
        "href": "fuse/gestures/pressed"
      },
      "titles": {
        "indexTitle": "Pressed",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.Pressed"
      }
    },
    {
      "comment": {
        "brief": "Triggers when a pointer is released on a @Visual.",
        "full": "Triggers when a pointer is released on a @Visual.\n\nAs opposed to @Clicked or @Tapped, this trigger triggers without concern for how long the pointer was pressed for.\n\n# Example\nIn this example, a panel will rotate for 0.4 seconds, then rotate back, when released:\n\n    <Panel Background=\"#F00\">\n        <Released>\n            <Rotate Degrees=\"90\" Duration=\".4\" DurationBack=\".2\" />\n        </Released>\n    </Panel>"
      },
      "id": {
        "id": "fuse/gestures/released",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/released",
        "href": "fuse/gestures/released"
      },
      "titles": {
        "indexTitle": "Released",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.Released"
      }
    },
    {
      "comment": {
        "brief": "A @TransformGesture that provides rotation.",
        "full": "A @TransformGesture that provides rotation.\n\nThis is triggered by a rotating gesture of two points (fingers) on the device.\n\nFor testing on desktop this can be triggered by holding down Ctrl, pressing the mouse button, moving up/down, then left/right. Careful, it interferes with the @ZoomGesture, and is only suitable for desktop testing. (This desktop feature is intended only for testing, so the specifics of how this works should not be relied upon.)"
      },
      "id": {
        "id": "fuse/gestures/rotategesture",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/rotategesture",
        "href": "fuse/gestures/rotategesture"
      },
      "titles": {
        "indexTitle": "RotateGesture",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.RotateGesture"
      }
    },
    {
      "comment": {
        "brief": "Scrolls a @ScrollView to a given position when triggered.",
        "full": "Scrolls a @ScrollView to a given position when triggered.\n\nNote that this action is deprecated, you should now use @ScrollTo instead."
      },
      "id": {
        "id": "fuse/gestures/scrollablegoto",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/scrollablegoto",
        "href": "fuse/gestures/scrollablegoto"
      },
      "titles": {
        "indexTitle": "ScrollableGoto",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.ScrollableGoto"
      }
    },
    {
      "comment": {
        "brief": "Implements the default scrolling functionality.",
        "full": "Implements the default scrolling functionality.\n\nThere should be no reason to instantiate/reference this class directly. It will most likely be made internal an inaccessible in a future release.",
        "attributes": {
          "advanced": true,
          "deprecated": true
        }
      },
      "id": {
        "id": "fuse/gestures/scroller",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/scroller",
        "href": "fuse/gestures/scroller"
      },
      "titles": {
        "indexTitle": "Scroller",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.Scroller"
      }
    },
    {
      "comment": {
        "brief": "Scrolls a @ScrollView to a given position when triggered.",
        "full": "Scrolls a @ScrollView to a given position when triggered.\n\n### Absolute position\n\nTo scroll to an absolute position, provide a value to the `Position` property.\nThis property accepts a pair of numbers, representing X and Y coordinates.\n\n    <ScrollTo Target=\"myScrollView\" Position=\"0, 50\" />\n\n### Relative position\n\nAlternatively, you can scroll to a relative position using the `RelativePosition` property.\n\n`RelativePosition` also accepts a pair of numbers, representing X and Y coordinates.\nEach coordinate should be in the range `0..1`, where `1` represents the largest distance\nthe user can scroll in that direction.\nFor instance, a `RelativePosition` of `1, 1` will scroll to the bottom-right corner.\n\n    <ScrollTo Target=\"myScrollView\" RelativePosition=\"0, 0.5\" />\n\nWhen triggered, the above will scroll `myScrollView` to the vertical center of its scrollable area.\n\n## Example\n\n    <DockPanel>\n        <Button Dock=\"Top\" Text=\"Scroll to top\" Margin=\"20\">\n            <Clicked>\n                <ScrollTo Target=\"myScrollView\" Position=\"0,0\" />\n            </Clicked>\n        </Button>\n\n        <ScrollView ux:Name=\"myScrollView\">\n            <Rectangle Height=\"2000\">\n                <LinearGradient>\n                    <GradientStop Offset=\"0\" Color=\"Red\" />\n                    <GradientStop Offset=\"1\" Color=\"Blue\" />\n                </LinearGradient>\n            </Rectangle>\n        </ScrollView>\n    </DockPanel>"
      },
      "id": {
        "id": "fuse/gestures/scrollto",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/scrollto",
        "href": "fuse/gestures/scrollto"
      },
      "titles": {
        "indexTitle": "ScrollTo",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.ScrollTo"
      }
    },
    {
      "comment": {
        "brief": "Sets the state of an [Active](api:fuse/gestures/swipegesture#swipetype-active-overview)-type @SwipeGesture.",
        "full": "Sets the state of an [Active](api:fuse/gestures/swipegesture#swipetype-active-overview)-type @SwipeGesture.\n\n# Example\n\n    <SwipeGesture ux:Name=\"swipe\" Direction=\"Right\" Length=\"100\" Type=\"Active\" />\n\n    <Button Text=\"Close\">\n        <Clicked>\n            <SetSwipeActive Target=\"swipe\" Value=\"false\" />\n        </Clicked>\n    </Button>"
      },
      "id": {
        "id": "fuse/gestures/setswipeactive",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/setswipeactive",
        "href": "fuse/gestures/setswipeactive"
      },
      "titles": {
        "indexTitle": "SetSwipeActive",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.SetSwipeActive"
      }
    },
    {
      "comment": {
        "brief": "Pulse trigger that activates when a swipe has occurred.",
        "full": "Pulse trigger that activates when a swipe has occurred.\n\nBy default, `Swiped` will only trigger when swiping to the primary swipe direction (when it enters the active state).\nFor instance, if the @SwipeGesture has `Direction=\"Left\"` it only triggers on a `Left` swipe and ignores the matching closing swipe.\nWe can control this behavior by setting the `How` property to either `ToActive` (default), `ToInactive` or `ToEither`.\n\n> **Note:** For a `Type=\"Active\"` @SwipeGesture, this only fires when the state actually changes.\n> If the user starts swiping but release the pointer without completing the gesture, it will not activate.\n\n# Example\n\nThis example shows a quick animation after a panel has been swiped.\n\n    <Panel Width=\"100\" Height=\"100\">\n        <SwipeGesture ux:Name=\"swipe\" Direction=\"Up\" Length=\"50\" Type=\"Simple\" />\n        <Swiped Source=\"swipe\">\n            <Scale Factor=\"1.5\" Duration=\"0.4\" DurationBack=\"0.2\" />\n        </Swiped>\n    </Panel>"
      },
      "id": {
        "id": "fuse/gestures/swiped",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/swiped",
        "href": "fuse/gestures/swiped"
      },
      "titles": {
        "indexTitle": "Swiped",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.Swiped"
      }
    },
    {
      "comment": {
        "brief": "Recognizes a swipe (the movement of a pointer in a given direction).",
        "full": "Recognizes a swipe (the movement of a pointer in a given direction).\n\n# Basic usage\n\nA SwipeGesture must be attached to an @Element, and will begin detecting swipes when the pointer is pressed\ndown on that element. Attaching a @SwipeGesture to an @Element is simply adding it as a child:\n\n\t<Panel>\n\t\t<SwipeGesture ux:Name=\"swipe\" Direction=\"Right\" Length=\"200\" />\n\t</Panel>\n\nThe snippet above will recognize swipe gestures moving from left to right,\nover a distance of 200 points.\n\nHowever, this isn't doing anything useful yet. Let's add a trigger!\n\n\t<Panel Width=\"100\" Height=\"100\" Background=\"Black\">\n\t\t<SwipeGesture ux:Name=\"swipe\" Direction=\"Right\" Length=\"200\" />\n\t\t<SwipingAnimation Source=\"swipe\">\n\t\t\t<Move X=\"200\" />\n\t\t</SwipingAnimation>\n\t</Panel>\n\t\nWe've now added a @SwipingAnimation, which will map the progress of our swipe gesture onto a series of\nanimations. In this case, we are moving the panel over the same distance as the `Length` of our\nSwipeGesture, resulting in the panel moving along with the pointer.\n\n> Note that we've referenced our SwipeGesture via the `Source` property of @SwipingAnimation.\n> This is because it is possible to have [multiple swipe gestures](#multiple-swipegestures) on a single element,\n> so it must be referenced explicitly. All swipe-related triggers share this property.\n\nWe also want to respond when the swipe has completed, which is achieved using the\n[Swiped](api:fuse/gestures/swiped) trigger. Let's extend our previous example a bit.\n\n\t<Panel Width=\"100\" Height=\"100\" Background=\"Black\">\n\t\t<SwipeGesture ux:Name=\"swipe\" Direction=\"Right\" Length=\"200\" />\n\t\t<SwipingAnimation Source=\"swipe\">\n\t\t\t<Move X=\"200\" />\n\t\t</SwipingAnimation>\n\t\t\n\t\t<Swiped>\n\t\t\t<DebugAction Message=\"Swiped!\" />\n\t\t</Swiped>\n\t</Panel>\n\nFor illustrative purposes, we are using @DebugAction to log a message\nto the console when the swipe has completed.\n\n# Swipe types\n\nSwipeGesture is designed to handle multiple scenarios,\nand can have one of three [types](api:fuse/gestures/swipetype), specified via the `Type` property.\n\nThe [type](api:fuse/gestures/swipetype) of a SwipeGesture determines its behavior, and below we'll explain each one.\n\n## [Simple](api:fuse/gestures/swipetype/simple)\n\n`Simple` is the default @SwipeType, and thus the one we have been using so far in this article.\n\nWhen using this type, swipes are treated as one-off events, and swipes will complete once the pointer is released.\n\n## [Auto](api:fuse/gestures/swipetype/auto)\n\n`Auto` is *almost* identical to `Simple`, however swipes complete once the user has swiped over the entire\ndistance of the SwipeGesture, without the user needing to release the pointer.\nThis allows multiple SwipeGestures to be triggered in sequence without releasing the pointer.\n\n<a id=\"swipetype-active-overview\"></a>\n\n## [Active](api:fuse/gestures/swipetype/active)\n\n`Type=\"Active\"` makes swipes toggle between an active/inactive state.\nSwiping in the @Direction of the SwipeGesture will transition to the *active* state,\nwhile swiping in the opposite direction will transition to the *inactive* state.\n\nWe can alter the state of an Active-type SwipeGesture using\n[SetSwipeActive](api:fuse/gestures/setswipeactive) and/or\n[ToggleSwipeActive](api:fuse/gestures/toggleswipeactive).\n\n### Reacting to state transitions\n\nWhen using the `Active` type, we can optionally configure the [Swiped](api:fuse/gestures/swiped) trigger\nto respond to only activation or only deactivation.\n\n\t<Swiped How=\"ToActive\">\n\t<Swiped How=\"ToInactive\">\n\nIn addition, the @WhileSwipeActive trigger will be active while its source @SwipeGesture is an Active-type\nSwipeGesture, and has been swiped to its active state.\n\n# Edge\n\nInstead of specifying a `Direction`, we may provide an `Edge`. This will make the SwipeGesture detect swipes\noriginating at a given edge of its parent element.\n\nWe can also customize the size of the edge area using the `HitSize` property.\nIt accepts a single number, which represents the maximum distance from the edge (in points) that swipes can\nbegin at.\n\n# Length based on element size\n\nInstead of specifying a fixed `Length` for the gesture,\nwe can supply an @Element to be measured via the `LengthNode` property.\n\nThis is a powerful feature, as it allows us to create swipe-based controls that work regardless of their size.\n\nBelow is an example of a size-independent switch control implemented using SwipeGesture.\n\n\t<Panel Height=\"50\">\n\t\t<Circle Width=\"50\" Height=\"50\" Color=\"#000\" Alignment=\"Left\">\n\t\t\t<SwipeGesture ux:Name=\"swipe\" LengthNode=\"track\" Direction=\"Right\" Type=\"Active\" />\n\t\t\t<SwipingAnimation Source=\"swipe\">\n\t\t\t\t<Move X=\"1\" RelativeTo=\"Size\" RelativeNode=\"track\" />\n\t\t\t</SwipingAnimation>\n\t\t</Circle>\n\t\t\n\t\t<Rectangle ux:Name=\"track\" Height=\"15\" Color=\"#0003\" Margin=\"25,0\" CornerRadius=\"15\" />\n\t</Panel>",
        "attributes": {
          "topic": "Swipe Gestures"
        }
      },
      "id": {
        "id": "fuse/gestures/swipegesture",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/swipegesture",
        "href": "fuse/gestures/swipegesture"
      },
      "titles": {
        "indexTitle": "SwipeGesture",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.SwipeGesture"
      }
    },
    {
      "comment": {
        "brief": "A trigger that maps the progress of a SwipeGesture to a series of animations.",
        "full": "A trigger that maps the progress of a SwipeGesture to a series of animations.\n\nWhen the pointer is first pressed down on the @Element, progess will be `0`,\nand will move towards `1` as the pointer is dragged towards the `Length` of the @SwipeGesture.\n\n# Examples\n\nIn this example, a panel moves 200 points to the right when swiped over a distance of 200 points.\n\n    <Panel Width=\"100\" Height=\"100\" Background=\"#000\">\n        <SwipeGesture ux:Name=\"swipe\" Direction=\"Right\" Length=\"200\" />\n        <SwipingAnimation Source=\"swipe\">\n            <Move X=\"200\" />\n        </SwipingAnimation>\n    </Panel>\n\nIn this example, we demonstrate using the `LengthNode` property of @(SwipeGesture),\nand the `RelativeNode` property of @(Move), to determine the swipe length based on the width of the panel.\n\n    <Panel ux:Name=\"parentContainer\" Margin=\"40\">\n        <Panel Width=\"60\" Height=\"60\" Background=\"#000\" Alignment=\"Left\">\n            <SwipeGesture ux:Name=\"swipe\" Direction=\"Right\" Type=\"Active\" LengthNode=\"parentContainer\" />\n            <SwipingAnimation Source=\"swipe\">\n                <Move X=\"1\" RelativeTo=\"Size\" RelativeNode=\"parentContainer\" />\n            </SwipingAnimation>\n        </Panel>\n    </Panel>"
      },
      "id": {
        "id": "fuse/gestures/swipinganimation",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/swipinganimation",
        "href": "fuse/gestures/swipinganimation"
      },
      "titles": {
        "indexTitle": "SwipingAnimation",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.SwipingAnimation"
      }
    },
    {
      "comment": {
        "brief": "Triggers when a pointer is tapped on a @Visual.",
        "full": "Triggers when a pointer is tapped on a @Visual.\n\nThe `Tapped` trigger is quite similar to the @(Clicked) trigger, but these two triggers differ slightly in the interactions they handle.\nWhile a click represents a pointer being pressed and then released on an element, a tap represents a pointer being both pressed and released within a certain period of time.\n\n# Example\nIn this example, a panel will rotate for 0.4 seconds, then rotate back, when tapped:\n\n    <Panel Background=\"#F00\">\n        <Tapped>\n            <Rotate Degrees=\"90\" Duration=\".4\" DurationBack=\".2\" />\n        </Tapped>\n    </Panel>"
      },
      "id": {
        "id": "fuse/gestures/tapped",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/tapped",
        "href": "fuse/gestures/tapped"
      },
      "titles": {
        "indexTitle": "Tapped",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.Tapped"
      }
    },
    {
      "id": {
        "id": "fuse/gestures/tappedargs",
        "parentId": "fuse/gestures",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/tappedargs",
        "href": "fuse/gestures/tappedargs"
      },
      "titles": {
        "indexTitle": "TappedArgs",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.TappedArgs"
      }
    },
    {
      "comment": {
        "brief": "Toggles an [Active](api:fuse/gestures/swipegesture#swipetype-active-overview)-type @SwipeGesture on or off.",
        "full": "Toggles an [Active](api:fuse/gestures/swipegesture#swipetype-active-overview)-type @SwipeGesture on or off.\n\n# Example\n\nIn this example, a `SwipeGesture` is toggled when a button is pressed.\n\n    <SwipeGesture ux:Name=\"swipe\" Direction=\"Right\" Length=\"100\" Type=\"Active\" />\n\n    <Button Text=\"Toggle\">\n        <Clicked>\n            <ToggleSwipeActive Target=\"swipe\" />\n        </Clicked>\n    </Button>"
      },
      "id": {
        "id": "fuse/gestures/toggleswipeactive",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/toggleswipeactive",
        "href": "fuse/gestures/toggleswipeactive"
      },
      "titles": {
        "indexTitle": "ToggleSwipeActive",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.ToggleSwipeActive"
      }
    },
    {
      "comment": {
        "brief": "A `TransformGesture` interprets pointer gestures and modifies an `InteractiveTransform` in response.",
        "full": "A `TransformGesture` interprets pointer gestures and modifies an `InteractiveTransform` in response.\n\nNote that the `TransformGesture` on its own has no visual impact, it only modifies the `InteractiveTransform`, which provides the actual visual transformation.  For example here is a simple image viewing setup:\n\n    <Panel HitTestMode=\"LocalBounds\">\n        <Image File=\"my_image.jpg\">\n            <InteractiveTransform ux:Name=\"ImageTrans\"/>\n        </Image>\n        <ZoomGesture Target=\"ImageTrans\"/>\n        <PanGesture Target=\"ImageTrans\"/>\n        <RotateGesture Target=\"ImageTrans\"/>\n    </Panel>\n\nOne `InteractiveTransform` can be the target of multiple gestures. They will coorindate correctly with each other to provide a unified experience. The `InteractiveTransform` will contain values that represent the total transformation.\n\nFor a complete list of single-finger gestures such as @Tapped, @LongPress etc., see @Triggers.\n\n## Available gestures\n\n[subclass Fuse.Gestures.TransformGesture]",
        "attributes": {
          "topic": "Gestures"
        }
      },
      "id": {
        "id": "fuse/gestures/transformgesture",
        "parentId": "fuse/gestures",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/transformgesture",
        "href": "fuse/gestures/transformgesture"
      },
      "titles": {
        "indexTitle": "TransformGesture",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.TransformGesture"
      }
    },
    {
      "id": {
        "id": "fuse/gestures/whileclickertrigger",
        "parentId": "fuse/gestures",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/whileclickertrigger",
        "href": "fuse/gestures/whileclickertrigger"
      },
      "titles": {
        "indexTitle": "WhileClickerTrigger",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.WhileClickerTrigger"
      }
    },
    {
      "comment": {
        "brief": "Active while a pointer is within the bounds of its containing element.",
        "full": "Active while a pointer is within the bounds of its containing element.\n\nNote that this trigger only has a value when the device\nsupports a hovering pointer such as the mouse pointer on\ndesktop machines. This trigger is thus not useful on most\nsmart phones.\n\n## Example\n\nThis example demonstrates how to scale `Panel` by a factor of 2 when a pointer hovers over it:\n\n    <Panel Width=\"50\" Height=\"50\">\n        <WhileHovering>\n            <Scale Factor=\"2\" Duration=\"0.2\" />\n        </WhileHovering>\n    </Panel>"
      },
      "id": {
        "id": "fuse/gestures/whilehovering",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/whilehovering",
        "href": "fuse/gestures/whilehovering"
      },
      "titles": {
        "indexTitle": "WhileHovering",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.WhileHovering"
      }
    },
    {
      "comment": {
        "brief": "Active while at least one pointer is pressed on a visual.",
        "full": "Active while at least one pointer is pressed on a visual.\n\nIf `Capture` is `true` then this behaves more like a normal gesture and captures the pointer.\nMoving the pointer away from the element will cause the trigger to deactivate, but another visual will be prevented from capturing it.\nThis should be used when you wish to track the same pressing status as a @Clicked gesture.\n\n# Example\nIn this example, a panel will double in size when it is pressed:\n\n    <Panel Width=\"50\" Height=\"50\">\n        <WhilePressed>\n            <Scale Factor=\"2\" Duration=\"0.2\"/>\n        </WhilePressed>\n    </Panel>"
      },
      "id": {
        "id": "fuse/gestures/whilepressed",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/whilepressed",
        "href": "fuse/gestures/whilepressed"
      },
      "titles": {
        "indexTitle": "WhilePressed",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.WhilePressed"
      }
    },
    {
      "comment": {
        "brief": "Active whenever an [Active](api:fuse/gestures/swipegesture#swipetype-active-overview)-type\n@SwipeGesture has been swiped to the active state.",
        "full": "Active whenever an [Active](api:fuse/gestures/swipegesture#swipetype-active-overview)-type\n@SwipeGesture has been swiped to the active state.\n\n# Example\n\nThis example shows a `Panel` that is scaled by a factor of 1.5 while the `SwipeGesture` is active:\n\n    <Panel Width=\"100\" Height=\"100\" Background=\"#000\">\n        <SwipeGesture ux:Name=\"swipe\" Direction=\"Up\" Length=\"50\" Type=\"Simple\" />\n        <WhileSwipeActive Source=\"swipe\">\n            <Scale Factor=\"1.5\" Duration=\"0.4\" />\n        </WhileSwipeActive>\n    </Panel>"
      },
      "id": {
        "id": "fuse/gestures/whileswipeactive",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/whileswipeactive",
        "href": "fuse/gestures/whileswipeactive"
      },
      "titles": {
        "indexTitle": "WhileSwipeActive",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.WhileSwipeActive"
      }
    },
    {
      "comment": {
        "brief": "Is active while a swiping gesture is in progress.",
        "full": "Is active while a swiping gesture is in progress.\n\nA swiping gesture is in progress while the user is swiping, as well as the time it takes the animation to complete the full length of the gesture. Invsersely, this trigger is inactive when the gesture is completely stable."
      },
      "id": {
        "id": "fuse/gestures/whileswiping",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/whileswiping",
        "href": "fuse/gestures/whileswiping"
      },
      "titles": {
        "indexTitle": "WhileSwiping",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.WhileSwiping"
      }
    },
    {
      "comment": {
        "brief": "A @TransformGesture that provides zooming.",
        "full": "A @TransformGesture that provides zooming.\n\nThis is triggered by dragging two pointers (fingers) over the device. Either moving towards each other (pinching) to reduce the zoom, or moving away from each other to increase the zoom.\n\nFor testing on desktop this can be simulated by holding down Ctrl, pressing the mouse button, and moving cursor up or down.\nNote that this desktop feature is for testing, so the specifics of how this works should not be relied upon.\n\n## Example\n\nShows a red circle we can use two fingers to zoom in or out.\n\n    <Panel>\n        <InteractiveTransform ux:Name=\"transform\" />\n        <ZoomGesture Target=\"transform\" />\n        <Panel>\n            <Text Value=\"Resize me\" Color=\"White\" FontSize=\"25\" Alignment=\"Center\" />\n            <Circle Width=\"350\" Height=\"350\" Color=\"Red\" />\n        </Panel>\n    </Panel>"
      },
      "id": {
        "id": "fuse/gestures/zoomgesture",
        "parentId": "fuse/gestures",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/gestures/zoomgesture",
        "href": "fuse/gestures/zoomgesture"
      },
      "titles": {
        "indexTitle": "ZoomGesture",
        "fullyQualifiedIndexTitle": "Fuse.Gestures.ZoomGesture"
      }
    },
    {
      "comment": {
        "brief": "Holds common information needed while traversing a visual tree to perform\nhit testing.",
        "full": "Holds common information needed while traversing a visual tree to perform\nhit testing."
      },
      "id": {
        "id": "fuse/hittestcontext",
        "parentId": "fuse",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/hittestcontext",
        "href": "fuse/hittestcontext"
      },
      "titles": {
        "indexTitle": "HitTestContext",
        "fullyQualifiedIndexTitle": "Fuse.HitTestContext"
      }
    },
    {
      "comment": {
        "brief": "Represents the computed results of a particular intersection found during\nhit testing.",
        "full": "Represents the computed results of a particular intersection found during\nhit testing."
      },
      "id": {
        "id": "fuse/hittestresult",
        "parentId": "fuse",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/hittestresult",
        "href": "fuse/hittestresult"
      },
      "titles": {
        "indexTitle": "HitTestResult",
        "fullyQualifiedIndexTitle": "Fuse.HitTestResult"
      }
    },
    {
      "id": {
        "id": "fuse/imagetools/image",
        "parentId": "fuse/imagetools",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/imagetools/image",
        "href": "fuse/imagetools/image"
      },
      "titles": {
        "indexTitle": "Image",
        "fullyQualifiedIndexTitle": "Fuse.ImageTools.Image"
      }
    },
    {
      "id": {
        "id": "fuse/input/custompointereventargs",
        "parentId": "fuse/input",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/input/custompointereventargs",
        "href": "fuse/input/custompointereventargs"
      },
      "titles": {
        "indexTitle": "CustomPointerEventArgs",
        "fullyQualifiedIndexTitle": "Fuse.Input.CustomPointerEventArgs"
      }
    },
    {
      "id": {
        "id": "fuse/input/focusgainedargs",
        "parentId": "fuse/input",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/input/focusgainedargs",
        "href": "fuse/input/focusgainedargs"
      },
      "titles": {
        "indexTitle": "FocusGainedArgs",
        "fullyQualifiedIndexTitle": "Fuse.Input.FocusGainedArgs"
      }
    },
    {
      "id": {
        "id": "fuse/input/focuslostargs",
        "parentId": "fuse/input",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/input/focuslostargs",
        "href": "fuse/input/focuslostargs"
      },
      "titles": {
        "indexTitle": "FocusLostArgs",
        "fullyQualifiedIndexTitle": "Fuse.Input.FocusLostArgs"
      }
    },
    {
      "comment": {
        "brief": "The binding between an IGesture and the Gestures manager. A Gesture represents the ability of a handler to detect, and use, pointer input within a node.",
        "full": "The binding between an IGesture and the Gestures manager. A Gesture represents the ability of a handler to detect, and use, pointer input within a node.\n\nAn IGesture is primarily a slave to the Gestures management. Whether it gets a capture, soft or hard, and when it loses/escalates the capture, are at the whims of this system.",
        "attributes": {
          "advanced": true,
          "experimental": true
        }
      },
      "id": {
        "id": "fuse/input/gesture",
        "parentId": "fuse/input",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/input/gesture",
        "href": "fuse/input/gesture"
      },
      "titles": {
        "indexTitle": "Gesture",
        "fullyQualifiedIndexTitle": "Fuse.Input.Gesture"
      }
    },
    {
      "id": {
        "id": "fuse/input/isfocusablechangedargs",
        "parentId": "fuse/input",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/input/isfocusablechangedargs",
        "href": "fuse/input/isfocusablechangedargs"
      },
      "titles": {
        "indexTitle": "IsFocusableChangedArgs",
        "fullyQualifiedIndexTitle": "Fuse.Input.IsFocusableChangedArgs"
      }
    },
    {
      "id": {
        "id": "fuse/input/keyeventargs",
        "parentId": "fuse/input",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/input/keyeventargs",
        "href": "fuse/input/keyeventargs"
      },
      "titles": {
        "indexTitle": "KeyEventArgs",
        "fullyQualifiedIndexTitle": "Fuse.Input.KeyEventArgs"
      }
    },
    {
      "id": {
        "id": "fuse/input/keypressedargs",
        "parentId": "fuse/input",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/input/keypressedargs",
        "href": "fuse/input/keypressedargs"
      },
      "titles": {
        "indexTitle": "KeyPressedArgs",
        "fullyQualifiedIndexTitle": "Fuse.Input.KeyPressedArgs"
      }
    },
    {
      "id": {
        "id": "fuse/input/keyreleasedargs",
        "parentId": "fuse/input",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/input/keyreleasedargs",
        "href": "fuse/input/keyreleasedargs"
      },
      "titles": {
        "indexTitle": "KeyReleasedArgs",
        "fullyQualifiedIndexTitle": "Fuse.Input.KeyReleasedArgs"
      }
    },
    {
      "id": {
        "id": "fuse/input/pointerenteredargs",
        "parentId": "fuse/input",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/input/pointerenteredargs",
        "href": "fuse/input/pointerenteredargs"
      },
      "titles": {
        "indexTitle": "PointerEnteredArgs",
        "fullyQualifiedIndexTitle": "Fuse.Input.PointerEnteredArgs"
      }
    },
    {
      "id": {
        "id": "fuse/input/pointereventargs",
        "parentId": "fuse/input",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/input/pointereventargs",
        "href": "fuse/input/pointereventargs"
      },
      "titles": {
        "indexTitle": "PointerEventArgs",
        "fullyQualifiedIndexTitle": "Fuse.Input.PointerEventArgs"
      }
    },
    {
      "id": {
        "id": "fuse/input/pointereventdata",
        "parentId": "fuse/input",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/input/pointereventdata",
        "href": "fuse/input/pointereventdata"
      },
      "titles": {
        "indexTitle": "PointerEventData",
        "fullyQualifiedIndexTitle": "Fuse.Input.PointerEventData"
      }
    },
    {
      "id": {
        "id": "fuse/input/pointerleftargs",
        "parentId": "fuse/input",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/input/pointerleftargs",
        "href": "fuse/input/pointerleftargs"
      },
      "titles": {
        "indexTitle": "PointerLeftArgs",
        "fullyQualifiedIndexTitle": "Fuse.Input.PointerLeftArgs"
      }
    },
    {
      "id": {
        "id": "fuse/input/pointermovedargs",
        "parentId": "fuse/input",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/input/pointermovedargs",
        "href": "fuse/input/pointermovedargs"
      },
      "titles": {
        "indexTitle": "PointerMovedArgs",
        "fullyQualifiedIndexTitle": "Fuse.Input.PointerMovedArgs"
      }
    },
    {
      "id": {
        "id": "fuse/input/pointerpressedargs",
        "parentId": "fuse/input",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/input/pointerpressedargs",
        "href": "fuse/input/pointerpressedargs"
      },
      "titles": {
        "indexTitle": "PointerPressedArgs",
        "fullyQualifiedIndexTitle": "Fuse.Input.PointerPressedArgs"
      }
    },
    {
      "id": {
        "id": "fuse/input/pointerreleasedargs",
        "parentId": "fuse/input",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/input/pointerreleasedargs",
        "href": "fuse/input/pointerreleasedargs"
      },
      "titles": {
        "indexTitle": "PointerReleasedArgs",
        "fullyQualifiedIndexTitle": "Fuse.Input.PointerReleasedArgs"
      }
    },
    {
      "id": {
        "id": "fuse/input/pointerwheelmovedargs",
        "parentId": "fuse/input",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/input/pointerwheelmovedargs",
        "href": "fuse/input/pointerwheelmovedargs"
      },
      "titles": {
        "indexTitle": "PointerWheelMovedArgs",
        "fullyQualifiedIndexTitle": "Fuse.Input.PointerWheelMovedArgs"
      }
    },
    {
      "id": {
        "id": "fuse/input/textenteredargs",
        "parentId": "fuse/input",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/input/textenteredargs",
        "href": "fuse/input/textenteredargs"
      },
      "titles": {
        "indexTitle": "TextEnteredArgs",
        "fullyQualifiedIndexTitle": "Fuse.Input.TextEnteredArgs"
      }
    },
    {
      "comment": {
        "brief": "Cache the results of a function.",
        "full": "Cache the results of a function.\n\nAlso manages the lifetime of the cached results.\n\nIf the number of unused items is greater than maxUnused, this\nclass disposes the least recently used unused cached item."
      },
      "id": {
        "id": "fuse/internal/cache_2",
        "parentId": "fuse/internal",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/internal/cache_2",
        "href": "fuse/internal/cache_2"
      },
      "titles": {
        "indexTitle": "Cache<TKey, TValue>",
        "fullyQualifiedIndexTitle": "Fuse.Internal.Cache<TKey, TValue>"
      }
    },
    {
      "comment": {
        "brief": "Configures the appearance of the status bar on *iOS*.",
        "full": "Configures the appearance of the status bar on *iOS*.\n\nTo configure the status bar on *Android*, see [Android.StatusBarConfig](api:fuse/android/statusbarconfig).\n\n### Example\n\nTo configure the status bar on iOS, place an `iOS.StatusBarConfig` somewhere in your UX tree.\n\n    <App>\n        <iOS.StatusBarConfig Style=\"Light\" Animation=\"Slide\" IsVisible=\"True\" />\n\n        <!-- The rest of our app goes here -->\n    </App>\n\nHowever, we usually want to configure the status bar for Android as well.\nWe'll add an additional [Android.StatusBarConfig](api:fuse/android/statusbarconfig).\n\n    <iOS.StatusBarConfig Style=\"Light\" Animation=\"Slide\" IsVisible=\"True\" />\n    <Android.StatusBarConfig Color=\"#0003\" IsVisible=\"True\" />"
      },
      "id": {
        "id": "fuse/ios/statusbarconfig",
        "parentId": "fuse/ios",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/ios/statusbarconfig",
        "href": "fuse/ios/statusbarconfig"
      },
      "titles": {
        "indexTitle": "StatusBarConfig",
        "fullyQualifiedIndexTitle": "Fuse.iOS.StatusBarConfig"
      }
    },
    {
      "comment": {
        "brief": "Lays out elements in an a circular way.",
        "full": "Lays out elements in an a circular way.\n\n@CircleLayout must be placed inside a @Panel, and will apply to the elements inside it.\n\nWe can use `StartAngleDegrees` and `EndAngleDegrees` to define how much of the circle will\nbe covered. Here zero degrees equals 3 o'clock.\n\n> Note that `EndAngleDegrees` should be greater than `StartAngleDegrees` to avoid\n> layout calculation issues.\n\n## Example\n\n    <Panel Color=\"#000000\">\n        <CircleLayout />\n        <Circle Fill=\"#ff00ff\" />\n        <Circle Fill=\"#7f7fff\" />\n        <Circle Fill=\"#00ffff\" />\n        <Circle Fill=\"#7fff7f\" />\n        <Circle Fill=\"#ffff00\" />\n        <Circle Fill=\"#ff7f7f\" />\n    </Panel>\n\nThe layout calculation is done by fitting circles into a large circle. The elements inside are all\ntreated as circles, such that arranging them they all just touch the `Radius` edge and each other\n(with a zero arc-spacing)."
      },
      "id": {
        "id": "fuse/layouts/circlelayout",
        "parentId": "fuse/layouts",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/layouts/circlelayout",
        "href": "fuse/layouts/circlelayout"
      },
      "titles": {
        "indexTitle": "CircleLayout",
        "fullyQualifiedIndexTitle": "Fuse.Layouts.CircleLayout"
      }
    },
    {
      "id": {
        "id": "fuse/layouts/column",
        "parentId": "fuse/layouts",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/layouts/column",
        "href": "fuse/layouts/column"
      },
      "titles": {
        "indexTitle": "Column",
        "fullyQualifiedIndexTitle": "Fuse.Layouts.Column"
      }
    },
    {
      "comment": {
        "brief": "Lays out elements in vertical or horizontal columns.",
        "full": "Lays out elements in vertical or horizontal columns.\n\nThe columns will use a vertical orientation by default, but this can be changed\nby setting the `Orientation` attribute to `Horizontal`.\n\n## Example\n\n    <Panel>\n        <ColumnLayout />\n        <Each Count=\"10\">\n            <Circle Margin=\"5\" Color=\"Blue\" />\n        </Each>\n    </Panel>"
      },
      "id": {
        "id": "fuse/layouts/columnlayout",
        "parentId": "fuse/layouts",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/layouts/columnlayout",
        "href": "fuse/layouts/columnlayout"
      },
      "titles": {
        "indexTitle": "ColumnLayout",
        "fullyQualifiedIndexTitle": "Fuse.Layouts.ColumnLayout"
      }
    },
    {
      "id": {
        "id": "fuse/layouts/defaultlayout",
        "parentId": "fuse/layouts",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/layouts/defaultlayout",
        "href": "fuse/layouts/defaultlayout"
      },
      "titles": {
        "indexTitle": "DefaultLayout",
        "fullyQualifiedIndexTitle": "Fuse.Layouts.DefaultLayout"
      }
    },
    {
      "comment": {
        "brief": "Specifies the size of a row or column in a Grid.",
        "full": "Specifies the size of a row or column in a Grid.\n\nThe string syntax for this definition is:\n\n- `auto`: `Metric=\"Auto\"`, the `Extent` is not relevant\n- `default`:  `Metric=\"Default\"` with an `Extent=\"1\"`\n- `##`: `Metric=\"Absolute\" with `Extent=\"##\"` (## is a size in points)\n- `##*`: `Metric=\"Proportion\" with `Extent=\"##\" (## is the weight of the row/column)"
      },
      "id": {
        "id": "fuse/layouts/definitionbase",
        "parentId": "fuse/layouts",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/layouts/definitionbase",
        "href": "fuse/layouts/definitionbase"
      },
      "titles": {
        "indexTitle": "DefinitionBase",
        "fullyQualifiedIndexTitle": "Fuse.Layouts.DefinitionBase"
      }
    },
    {
      "id": {
        "id": "fuse/layouts/docklayout",
        "parentId": "fuse/layouts",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/layouts/docklayout",
        "href": "fuse/layouts/docklayout"
      },
      "titles": {
        "indexTitle": "DockLayout",
        "fullyQualifiedIndexTitle": "Fuse.Layouts.DockLayout"
      }
    },
    {
      "id": {
        "id": "fuse/layouts/gridlayout",
        "parentId": "fuse/layouts",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/layouts/gridlayout",
        "href": "fuse/layouts/gridlayout"
      },
      "titles": {
        "indexTitle": "GridLayout",
        "fullyQualifiedIndexTitle": "Fuse.Layouts.GridLayout"
      }
    },
    {
      "id": {
        "id": "fuse/layouts/layout",
        "parentId": "fuse/layouts",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/layouts/layout",
        "href": "fuse/layouts/layout"
      },
      "titles": {
        "indexTitle": "Layout",
        "fullyQualifiedIndexTitle": "Fuse.Layouts.Layout"
      }
    },
    {
      "id": {
        "id": "fuse/layouts/row",
        "parentId": "fuse/layouts",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/layouts/row",
        "href": "fuse/layouts/row"
      },
      "titles": {
        "indexTitle": "Row",
        "fullyQualifiedIndexTitle": "Fuse.Layouts.Row"
      }
    },
    {
      "id": {
        "id": "fuse/layouts/stacklayout",
        "parentId": "fuse/layouts",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/layouts/stacklayout",
        "href": "fuse/layouts/stacklayout"
      },
      "titles": {
        "indexTitle": "StackLayout",
        "fullyQualifiedIndexTitle": "Fuse.Layouts.StackLayout"
      }
    },
    {
      "id": {
        "id": "fuse/layouts/wraplayout",
        "parentId": "fuse/layouts",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/layouts/wraplayout",
        "href": "fuse/layouts/wraplayout"
      },
      "titles": {
        "indexTitle": "WrapLayout",
        "fullyQualifiedIndexTitle": "Fuse.Layouts.WrapLayout"
      }
    },
    {
      "id": {
        "id": "fuse/marshalexception",
        "parentId": "fuse",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/marshalexception",
        "href": "fuse/marshalexception"
      },
      "titles": {
        "indexTitle": "MarshalException",
        "fullyQualifiedIndexTitle": "Fuse.MarshalException"
      }
    },
    {
      "id": {
        "id": "fuse/models/modeljavascript",
        "parentId": "fuse/models",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/models/modeljavascript",
        "href": "fuse/models/modeljavascript"
      },
      "titles": {
        "indexTitle": "ModelJavaScript",
        "fullyQualifiedIndexTitle": "Fuse.Models.ModelJavaScript"
      }
    },
    {
      "id": {
        "id": "fuse/motion/delayfunction",
        "parentId": "fuse/motion",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/motion/delayfunction",
        "href": "fuse/motion/delayfunction"
      },
      "titles": {
        "indexTitle": "DelayFunction",
        "fullyQualifiedIndexTitle": "Fuse.Motion.DelayFunction"
      }
    },
    {
      "id": {
        "id": "fuse/motion/destinationmotion_1",
        "parentId": "fuse/motion",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/motion/destinationmotion_1",
        "href": "fuse/motion/destinationmotion_1"
      },
      "titles": {
        "indexTitle": "DestinationMotion<T>",
        "fullyQualifiedIndexTitle": "Fuse.Motion.DestinationMotion<T>"
      }
    },
    {
      "comment": {
        "brief": "This class defines the animation of a value as it moves towards another values. It is typically used as\na composite object of other types, such as @MotionConfig, @Attract and @Attractor.",
        "full": "This class defines the animation of a value as it moves towards another values. It is typically used as\na composite object of other types, such as @MotionConfig, @Attract and @Attractor."
      },
      "id": {
        "id": "fuse/motion/destinationmotionconfig",
        "parentId": "fuse/motion",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/motion/destinationmotionconfig",
        "href": "fuse/motion/destinationmotionconfig"
      },
      "titles": {
        "indexTitle": "DestinationMotionConfig",
        "fullyQualifiedIndexTitle": "Fuse.Motion.DestinationMotionConfig"
      }
    },
    {
      "comment": {
        "brief": "This is a configuration object: it combines many options to make it simpler in UX for the user\nto setup and use the motion simulations. It also allows hiding the details of simulation from\nthe UX level.",
        "full": "This is a configuration object: it combines many options to make it simpler in UX for the user\nto setup and use the motion simulations. It also allows hiding the details of simulation from\nthe UX level.\n\nThis is a base class from which @ScrollViewMotion and @NavigationMotion are derived. When placed as the child of a @ScrollView or @Navigation (respectively),\nthey allow us to control certain aspects of the motions these elements perform."
      },
      "id": {
        "id": "fuse/motion/motionconfig",
        "parentId": "fuse/motion",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/motion/motionconfig",
        "href": "fuse/motion/motionconfig"
      },
      "titles": {
        "indexTitle": "MotionConfig",
        "fullyQualifiedIndexTitle": "Fuse.Motion.MotionConfig"
      }
    },
    {
      "comment": {
        "brief": "A configuration object for @Fuse.Navigation.StructuredNavigation\nThis provides reasonable defaults for navigation and a good basis for customization.",
        "full": "A configuration object for @Fuse.Navigation.StructuredNavigation\nThis provides reasonable defaults for navigation and a good basis for customization."
      },
      "id": {
        "id": "fuse/motion/navigationmotion",
        "parentId": "fuse/motion",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/motion/navigationmotion",
        "href": "fuse/motion/navigationmotion"
      },
      "titles": {
        "indexTitle": "NavigationMotion",
        "fullyQualifiedIndexTitle": "Fuse.Motion.NavigationMotion"
      }
    },
    {
      "comment": {
        "brief": "A configuration object for @Fuse.Controls.ScrollView\nThis provides reasonable defaults for scrolling and a good basis for customization.",
        "full": "A configuration object for @Fuse.Controls.ScrollView\nThis provides reasonable defaults for scrolling and a good basis for customization."
      },
      "id": {
        "id": "fuse/motion/scrollviewmotion",
        "parentId": "fuse/motion",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/motion/scrollviewmotion",
        "href": "fuse/motion/scrollviewmotion"
      },
      "titles": {
        "indexTitle": "ScrollViewMotion",
        "fullyQualifiedIndexTitle": "Fuse.Motion.ScrollViewMotion"
      }
    },
    {
      "comment": {
        "brief": "Determines the appropriate velocity from pointerDown/Move/Release events.",
        "full": "Determines the appropriate velocity from pointerDown/Move/Release events."
      },
      "id": {
        "id": "fuse/motion/simulation/pointervelocity_1",
        "parentId": "fuse/motion/simulation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/motion/simulation/pointervelocity_1",
        "href": "fuse/motion/simulation/pointervelocity_1"
      },
      "titles": {
        "indexTitle": "PointerVelocity<T>",
        "fullyQualifiedIndexTitle": "Fuse.Motion.Simulation.PointerVelocity<T>"
      }
    },
    {
      "id": {
        "id": "fuse/motion/springfunction",
        "parentId": "fuse/motion",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/motion/springfunction",
        "href": "fuse/motion/springfunction"
      },
      "titles": {
        "indexTitle": "SpringFunction",
        "fullyQualifiedIndexTitle": "Fuse.Motion.SpringFunction"
      }
    },
    {
      "comment": {
        "brief": "Represents a name-value pair, as denoted by `name: value` in UX expressions.",
        "full": "Represents a name-value pair, as denoted by `name: value` in UX expressions.\n\nImplements `IObject`, which means the `NameValuePair` can be viewed as an object\nwith a single property.\n\nImplements `IArray`, which means the `NameValuePair` can be viewed as an array\nwith a single element.\n\nAn `IArray` containing some `NameValuePairs` can be converted to an `IObject`\nimplementation containing all those properties using the `ObjectFromArray` method."
      },
      "id": {
        "id": "fuse/namevaluepair",
        "parentId": "fuse",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/namevaluepair",
        "href": "fuse/namevaluepair"
      },
      "titles": {
        "indexTitle": "NameValuePair",
        "fullyQualifiedIndexTitle": "Fuse.NameValuePair"
      }
    },
    {
      "comment": {
        "brief": "Active whenever a page becomes active.",
        "full": "Active whenever a page becomes active.\n\nThis trigger will also be pulsed at rooting time if the page is currently the active one.\n\n## Example\n\nThis example will print to the console whenever the each of the two pages is activated:\n\n    <PageControl>\n        <Page Background=\"Red\">\n            <Activated>\n                <DebugAction Message=\"Red page activated\" />\n            </Activated>\n        </Page>\n        <Page Background=\"Blue\">\n            <Activated>\n                <DebugAction Message=\"Blue page activated\" />\n            </Activated>\n        </Page>\n    </PageControl>\n\nNote that this trigger may also be used as an attached event directly on a `Page`, like so:\n\n    <Page Activated=\"{jsActivated}\">\n    </Page>"
      },
      "id": {
        "id": "fuse/navigation/activated",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/activated",
        "href": "fuse/navigation/activated"
      },
      "titles": {
        "indexTitle": "Activated",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.Activated"
      }
    },
    {
      "comment": {
        "brief": "Specifies an animation for an element that's becoming active.",
        "full": "Specifies an animation for an element that's becoming active.\n\nIf @(SwipeNavigate) is used, one can observe that `ActivatingAnimation` progressed from 0 as soon as the `Page` is entering, stays at 1 as long as the `Page` is active,\nand then progresses towards 0 again as the `Page` is exiting. This is the inverse of `DeactivatingAnimation`'s behavior.\n\n## Example\n\nThe following example shows an `ActivatingAnimation` animating the `Height` of a `Rectangle`, causing it to reduce in size vertically as a page is being navigated to:\n\n    <PageControl>\n        <Panel Background=\"Red\" />\n        <Panel Background=\"Blue\">\n            <Rectangle Color=\"Black\" Width=\"100%\" Height=\"0%\" Alignment=\"Top\" ux:Name=\"rect\"/>\n            <ActivatingAnimation>\n                <Change rect.Height=\"100%\" />\n            </ActivatingAnimation>\n        </Panel>\n    </PageControl>\n\nSee [Navigation Order](articles:navigation/navigationorder.md)"
      },
      "id": {
        "id": "fuse/navigation/activatinganimation",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/activatinganimation",
        "href": "fuse/navigation/activatinganimation"
      },
      "titles": {
        "indexTitle": "ActivatingAnimation",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.ActivatingAnimation"
      }
    },
    {
      "id": {
        "id": "fuse/navigation/backforwardnavigationtriggeraction",
        "parentId": "fuse/navigation",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/backforwardnavigationtriggeraction",
        "href": "fuse/navigation/backforwardnavigationtriggeraction"
      },
      "titles": {
        "indexTitle": "BackForwardNavigationTriggerAction",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.BackForwardNavigationTriggerAction"
      }
    },
    {
      "comment": {
        "brief": "Active whenever a page becomes inactive.",
        "full": "Active whenever a page becomes inactive.\n\nThis trigger may not pulse when the trigger, navigation, or the page is unrooted.\n\n## Example\n\nThis example will print to the console whenever the each of the two pages is deactivated:\n\n    <PageControl>\n        <Page Background=\"Red\">\n            <Deactivated>\n                <DebugAction Message=\"Red page deactivated\" />\n            </Deactivated>\n        </Page>\n        <Page Background=\"Blue\">\n            <Deactivated>\n                <DebugAction Message=\"Blue page deactivated\" />\n            </Deactivated>\n        </Page>\n    </PageControl>\n\nNote that this trigger may also be used as an attached event directly on a `Page`, like so:\n\n    <Page Deactivated=\"{jsDeactivated}\">\n    </Page>"
      },
      "id": {
        "id": "fuse/navigation/deactivated",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/deactivated",
        "href": "fuse/navigation/deactivated"
      },
      "titles": {
        "indexTitle": "Deactivated",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.Deactivated"
      }
    },
    {
      "comment": {
        "brief": "Specifies an animation for an element that's becoming inactive.",
        "full": "Specifies an animation for an element that's becoming inactive.\n\nIf @(SwipeNavigate) is used, one can observe that `DeactivatingAnimation` progressed from 1 to 0 as soon as the `Page` is entering, stays at 0 as long as the `Page` is active,\nand then progresses towards 1 again as the `Page` is exiting. This is the inverse of `ActivatingAnimation`'s behavior.\n\n## Example\n\nThe following example shows a `DeactivatingAnimation` animating the `Height` of a `Rectangle`, causing it to fill the page being navigated to:\n\n    <PageControl>\n        <Panel Background=\"Red\" />\n        <Panel Background=\"Blue\">\n            <Rectangle Color=\"Black\" Width=\"100%\" Height=\"0%\" Alignment=\"Top\" ux:Name=\"rect\"/>\n            <DeactivatingAnimation>\n                <Change rect.Height=\"100%\" />\n            </DeactivatingAnimation>\n        </Panel>\n    </PageControl>\n\nSee [Navigation Order](articles:navigation/navigationorder.md)"
      },
      "id": {
        "id": "fuse/navigation/deactivatinganimation",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/deactivatinganimation",
        "href": "fuse/navigation/deactivatinganimation"
      },
      "titles": {
        "indexTitle": "DeactivatingAnimation",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.DeactivatingAnimation"
      }
    },
    {
      "comment": {
        "brief": "## Navigation Order",
        "full": "## Navigation Order\n\nPages in a `DirectNavigation` have a discrete page progress. The active page is `0`, and all others are `-1`. All inactives pages are behind the active one, and no pages are ever in front of the active one.\n\nSee [Navigation Order](articles:navigation/navigationorder.md)"
      },
      "id": {
        "id": "fuse/navigation/directnavigation",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/directnavigation",
        "href": "fuse/navigation/directnavigation"
      },
      "titles": {
        "indexTitle": "DirectNavigation",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.DirectNavigation"
      }
    },
    {
      "comment": {
        "brief": "A linear navigation that retains the active state during changes of the pages",
        "full": "A linear navigation that retains the active state during changes of the pages"
      },
      "id": {
        "id": "fuse/navigation/dynamiclinearnavigation",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/dynamiclinearnavigation",
        "href": "fuse/navigation/dynamiclinearnavigation"
      },
      "titles": {
        "indexTitle": "DynamicLinearNavigation",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.DynamicLinearNavigation"
      }
    },
    {
      "id": {
        "id": "fuse/navigation/edgenavigation",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/edgenavigation",
        "href": "fuse/navigation/edgenavigation"
      },
      "titles": {
        "indexTitle": "EdgeNavigation",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.EdgeNavigation"
      }
    },
    {
      "comment": {
        "brief": "[subclass Fuse.Navigation.EnterExitAnimation]",
        "full": "[subclass Fuse.Navigation.EnterExitAnimation]"
      },
      "id": {
        "id": "fuse/navigation/enterexitanimation",
        "parentId": "fuse/navigation",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/enterexitanimation",
        "href": "fuse/navigation/enterexitanimation"
      },
      "titles": {
        "indexTitle": "EnterExitAnimation",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.EnterExitAnimation"
      }
    },
    {
      "comment": {
        "brief": "Specifies an animation for a page that is in front of the active one.",
        "full": "Specifies an animation for a page that is in front of the active one.\n\nAnimates from 0 to 1 as the page progress goes from 0 to 1. For discrete navigation changes the duration of the animators will be used.\n\nFor clarity, if the page is coming from the front, such as navigating forward in a `PageControl`, the trigger animates from 1 to 0. This is just a natural result of the page's progress changing from 1 to 0.\n\n## Example\n\nThis example shows the use of both `EnteringAnimation` and `ExitingAnimation` in a custom transition for three panels in a @(PageControl):\n\n    <Panel ux:Class=\"CustomPanel\" TransformOrigin=\"TopLeft\">\n        <EnteringAnimation>\n            <Rotate Degrees=\"90\"/>\n        </EnteringAnimation>\n        <ExitingAnimation>\n            <Rotate Degrees=\"-90\" />\n        </ExitingAnimation>\n    </Panel>\n    <PageControl Transition=\"None\">\n        <CustomPanel Background=\"#F00\" />\n        <CustomPanel Background=\"#0F0\" />\n        <CustomPanel Background=\"#00F\" />\n    </PageControl>\n\nSee [Navigation Order](articles:navigation/navigationorder.md)"
      },
      "id": {
        "id": "fuse/navigation/enteringanimation",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/enteringanimation",
        "href": "fuse/navigation/enteringanimation"
      },
      "titles": {
        "indexTitle": "EnteringAnimation",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.EnteringAnimation"
      }
    },
    {
      "comment": {
        "brief": "Specifies an animation for a page that is behind the active page.",
        "full": "Specifies an animation for a page that is behind the active page.\n\nAnimates from 0 to 1 as the page progress goes from 0 to -1. For discrete navigation changes the duration of the animators will be used.\n\n## Example\n\nThis example shows the use of both `ExitingAnimation` and `EnteringAnimation` in a custom transition for three panels in a @(PageControl):\n\n    <Panel ux:Class=\"CustomPanel\" TransformOrigin=\"TopLeft\">\n        <EnteringAnimation>\n            <Rotate Degrees=\"90\"/>\n        </EnteringAnimation>\n        <ExitingAnimation>\n            <Rotate Degrees=\"-90\" />\n        </ExitingAnimation>\n    </Panel>\n    <PageControl Transition=\"None\">\n        <CustomPanel Background=\"#F00\" />\n        <CustomPanel Background=\"#0F0\" />\n        <CustomPanel Background=\"#00F\" />\n    </PageControl>\n\nSee [Navigation Order](articles:navigation/navigationorder.md)"
      },
      "id": {
        "id": "fuse/navigation/exitinganimation",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/exitinganimation",
        "href": "fuse/navigation/exitinganimation"
      },
      "titles": {
        "indexTitle": "ExitingAnimation",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.ExitingAnimation"
      }
    },
    {
      "comment": {
        "brief": "Finds a router from the current location.",
        "full": "Finds a router from the current location.\n\nThis can be used to get access to a router in JavaScript. This assume that a @Router has been\ndeclared somewhere higher in the UX tree (it need not be in the same file).\n\n    <Page>\n        <JavaScript dep:router=\"findRouter()\">\n            exports.go = function() {\n                router.goto( \"anotherPageName\" )\n            }\n        </JavaScript>\n\n        <Button Alignment=\"Center\" Clicked=\"{go}\"/>\n    </Page>"
      },
      "id": {
        "id": "fuse/navigation/findrouter",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/findrouter",
        "href": "fuse/navigation/findrouter"
      },
      "titles": {
        "indexTitle": "FindRouter",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.FindRouter"
      }
    },
    {
      "comment": {
        "brief": "Navigates backward in the navigation stack/z-order of a @Navigation, @PageControl, or @WebView.",
        "full": "Navigates backward in the navigation stack/z-order of a @Navigation, @PageControl, or @WebView.\n\n# Example\nIn this example, `GoBack` will be used to navigate away from the first page of a `PageControl`.\n\n    <PageControl>\n        <Panel Background=\"#0F0\" ux:Name=\"firstPage\">\n            <Button Text=\"GoBack\" Alignment=\"Center\" Margin=\"10\">\n                <Clicked>\n                    <GoBack />\n                </Clicked>\n            </Button>\n        </Panel>\n        <Panel Background=\"#F00\" ux:Name=\"secondPage\">\n            <Button Alignment=\"Center\" Text=\"Go to page 1\">\n                <Clicked>\n                    <NavigateTo Target=\"firstPage\" />\n                </Clicked>\n            </Button>\n        </Panel>\n    </PageControl>\n\nBackward refers to pages that are behind the active one in navigation order. This trigger is not suitable for navigation that does not have a history or sequence of pages.\n\nSee [Navigation Order](articles:navigation/navigationorder.md)"
      },
      "id": {
        "id": "fuse/navigation/goback",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/goback",
        "href": "fuse/navigation/goback"
      },
      "titles": {
        "indexTitle": "GoBack",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.GoBack"
      }
    },
    {
      "comment": {
        "brief": "Navigates forward in a @Navigation, @PageControl, or @WebView.",
        "full": "Navigates forward in a @Navigation, @PageControl, or @WebView.\n\n# Example\nIn this example, `GoForward` will be used to navigate back to the first page of a `PageControl`. This is because \"Forward\" means \"towards the first page\" when used in linear navigation.\n\n    <PageControl>\n        <Panel Background=\"#F00\" ux:Name=\"page1\">\n            <Button Alignment=\"Center\" Text=\"Go to page 2\">\n                <Clicked>\n                    <NavigateTo Target=\"page2\" />\n                </Clicked>\n            </Button>\n        </Panel>\n        <Panel Background=\"#0F0\" ux:Name=\"page2\">\n            <Button Text=\"Go back\" Alignment=\"Center\" Margin=\"10\">\n                <Clicked>\n                    <GoForward />\n                </Clicked>\n            </Button>\n        </Panel>\n    </PageControl>\n\nForward refers to pages that are in front of the active one in navigation order.  This trigger is not suitable for navigation that does not have a history or sequence of pages.\n\nSee [Navigation Order](articles:navigation/navigationorder.md)"
      },
      "id": {
        "id": "fuse/navigation/goforward",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/goforward",
        "href": "fuse/navigation/goforward"
      },
      "titles": {
        "indexTitle": "GoForward",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.GoForward"
      }
    },
    {
      "comment": {
        "brief": "Goto a new route in the router.",
        "full": "Goto a new route in the router.\n\nThis is the same as @RouterModify with `How=\"Goto\"`"
      },
      "id": {
        "id": "fuse/navigation/gotoroute",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/gotoroute",
        "href": "fuse/navigation/gotoroute"
      },
      "titles": {
        "indexTitle": "GotoRoute",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.GotoRoute"
      }
    },
    {
      "comment": {
        "brief": "Goto a full path in the router.",
        "full": "Goto a full path in the router.\n\nThe arguments are name-value pairs that specify the path components and their parameter."
      },
      "id": {
        "id": "fuse/navigation/gotoroutecommand",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/gotoroutecommand",
        "href": "fuse/navigation/gotoroutecommand"
      },
      "titles": {
        "indexTitle": "GotoRouteCommand",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.GotoRouteCommand"
      }
    },
    {
      "id": {
        "id": "fuse/navigation/hierarchicalnavigation",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/hierarchicalnavigation",
        "href": "fuse/navigation/hierarchicalnavigation"
      },
      "titles": {
        "indexTitle": "HierarchicalNavigation",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.HierarchicalNavigation"
      }
    },
    {
      "comment": {
        "brief": "## Navigation Order",
        "full": "## Navigation Order\n\nThe navigation order of a `LinearNavigation` is the same as the child order. Earlier children are in front of later children. The navigation progress is continuous, and pages can be more than 1 away from the active one.\n\nSee [Navigation Order](articles:navigation/navigationorder.md)"
      },
      "id": {
        "id": "fuse/navigation/linearnavigation",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/linearnavigation",
        "href": "fuse/navigation/linearnavigation"
      },
      "titles": {
        "indexTitle": "LinearNavigation",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.LinearNavigation"
      }
    },
    {
      "id": {
        "id": "fuse/navigation/modifyroute",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/modifyroute",
        "href": "fuse/navigation/modifyroute"
      },
      "titles": {
        "indexTitle": "ModifyRoute",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.ModifyRoute"
      }
    },
    {
      "comment": {
        "brief": "Navigates on the router.",
        "full": "Navigates on the router.\n\nThe arguments must be name-value pairs.  It shares the same arguments as the JAvaScript `router.modify` function and the `RouterModify` action. In short the options are:\n\n    - how : @ModifyRouteHow\n    - path : An array of name-value pairs that specify the path components and their parameter. This syntax differs from the JavaScript interface.\n    - relative : Routing relative to the provided node. By default the path will be treated as global.\n    - transition : @NavigationGotoMode\n    - bookmark : Use a bookmark instead of `path`.\n    - style : Transition style for animation\n\nThe expression provided to `modifyRoute` is evaluated only when needed. It is expected the bindings will resolve quickly (not bound to a remote lookup for example), otherwise the routing operation will be delayed."
      },
      "id": {
        "id": "fuse/navigation/modifyroutecommand",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/modifyroutecommand",
        "href": "fuse/navigation/modifyroutecommand"
      },
      "titles": {
        "indexTitle": "ModifyRouteCommand",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.ModifyRouteCommand"
      }
    },
    {
      "id": {
        "id": "fuse/navigation/navigatedargs",
        "parentId": "fuse/navigation",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/navigatedargs",
        "href": "fuse/navigation/navigatedargs"
      },
      "titles": {
        "indexTitle": "NavigatedArgs",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.NavigatedArgs"
      }
    },
    {
      "comment": {
        "brief": "Navigate to a page.",
        "full": "Navigate to a page.\n\nThis action is for navigating a @PageControl directly. Consider using @Router instead to perform\nmore structured navigation.\n\n## Example\n\n    <PageControl>\n        <Page>\n            <Grid Background=\"#282a37\" Rows=\"auto,1*\" Padding=\"20\">\n                <Image Alignment=\"Center\" Url=\"https://fusetools-web.azureedge.net/fusetools-web/v1464939897151/images/logo_white.png\" Width=\"100\" Height=\"100\" />\n                <Button Text=\"Settings\">\n                    <Clicked>\n                        <NavigateTo Target=\"settings\" />\n                    </Clicked>\n                </Button>\n            </Grid>\n        </Page>\n        <Page ux:Name=\"settings\">\n            <Grid Padding=\"20\" Rows=\"auto, 30\" Background=\"#282a37\">\n                <Text Value=\"Settings\" Color=\"#fff\" Alignment=\"TopCenter\" FontSize=\"20\"/>\n                <Slider />\n            </Grid>\n        </Page>\n    </PageControl>"
      },
      "id": {
        "id": "fuse/navigation/navigateto",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/navigateto",
        "href": "fuse/navigation/navigateto"
      },
      "titles": {
        "indexTitle": "NavigateTo",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.NavigateTo"
      }
    },
    {
      "comment": {
        "brief": "Toggles a `Navigation`.",
        "full": "Toggles a `Navigation`.\n\nThis is currently only supported in @(EdgeNavigation), and will do nothing if used on another type of navigation.\n\nUsed on an `EdgeNavigation`, it will navigate to and from a @(Panel) with `EdgeNavigation.Edge` set, specified by using the `Target` property.\n\n# Example\n\nThis example shows the use of `NavigateToggle` by toggling the visibility of an `EdgePanel`.\n\n    <DockPanel>\n        <EdgeNavigation/>\n        <Panel Width=\"150\" Edge=\"Left\" Background=\"#f63\" Alignment=\"Left\" ux:Name=\"nav\">\n            <EnteringAnimation>\n        <Move X=\"-1\" RelativeTo=\"Size\" />\n            </EnteringAnimation>\n        </Panel>\n        <Panel Background=\"#90CAF9\">\n            <Tapped>\n                <NavigateToggle Target=\"nav\" />\n            </Tapped>\n        </Panel>\n    </DockPanel>"
      },
      "id": {
        "id": "fuse/navigation/navigatetoggle",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/navigatetoggle",
        "href": "fuse/navigation/navigatetoggle"
      },
      "titles": {
        "indexTitle": "NavigateToggle",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.NavigateToggle"
      }
    },
    {
      "id": {
        "id": "fuse/navigation/navigation",
        "parentId": "fuse/navigation",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/navigation",
        "href": "fuse/navigation/navigation"
      },
      "titles": {
        "indexTitle": "Navigation",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.Navigation"
      }
    },
    {
      "comment": {
        "brief": "These triggers are used to animate pages as they move to and away from the active page.",
        "full": "These triggers are used to animate pages as they move to and away from the active page.\n\nThe basic behavior of this trigger depends on whether the navigation is continuous, such as a `PageControl` or `LinearNavigation`, or is discrete, such as `Navigator` or `DirectNavigation`.\n\nWhen used with continuous navigation a `Duration` property is not needed on the animators. The progress is mapped from the progress of the page itself in the navigation.\n\nWhen used with a discrete navigation a `Duration` is required. There is no smooth page progress change, it will simply flip between multiple states. Here the duration of the trigger will be used to do the animation.\n\n[subclass Fuse.Navigation.NavigationAnimation]\n\nSee [Navigation Order](articles:navigation/navigationorder.md)"
      },
      "id": {
        "id": "fuse/navigation/navigationanimation",
        "parentId": "fuse/navigation",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/navigationanimation",
        "href": "fuse/navigation/navigationanimation"
      },
      "titles": {
        "indexTitle": "NavigationAnimation",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.NavigationAnimation"
      }
    },
    {
      "id": {
        "id": "fuse/navigation/navigationargs",
        "parentId": "fuse/navigation",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/navigationargs",
        "href": "fuse/navigation/navigationargs"
      },
      "titles": {
        "indexTitle": "NavigationArgs",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.NavigationArgs"
      }
    },
    {
      "comment": {
        "brief": "Use this class to listen for changes on a page in a navigation. This takes cares of the various\noverrides on Page/Navigation and rooting order considerations.",
        "full": "Use this class to listen for changes on a page in a navigation. This takes cares of the various\noverrides on Page/Navigation and rooting order considerations.\n\nCreate this object at rooting time and dispose of it while unrooting.\n\n@hide",
        "attributes": {
          "deprecated": true
        }
      },
      "id": {
        "id": "fuse/navigation/navigationpageproxy",
        "parentId": "fuse/navigation",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/navigationpageproxy",
        "href": "fuse/navigation/navigationpageproxy"
      },
      "titles": {
        "indexTitle": "NavigationPageProxy",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.NavigationPageProxy"
      }
    },
    {
      "comment": {
        "brief": "@hide",
        "full": "@hide"
      },
      "id": {
        "id": "fuse/navigation/navigationtrigger",
        "parentId": "fuse/navigation",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/navigationtrigger",
        "href": "fuse/navigation/navigationtrigger"
      },
      "titles": {
        "indexTitle": "NavigationTrigger",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.NavigationTrigger"
      }
    },
    {
      "id": {
        "id": "fuse/navigation/navigationtriggeraction",
        "parentId": "fuse/navigation",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/navigationtriggeraction",
        "href": "fuse/navigation/navigationtriggeraction"
      },
      "titles": {
        "indexTitle": "NavigationTriggerAction",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.NavigationTriggerAction"
      }
    },
    {
      "id": {
        "id": "fuse/navigation/pageexpression",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/pageexpression",
        "href": "fuse/navigation/pageexpression"
      },
      "titles": {
        "indexTitle": "PageExpression",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.PageExpression"
      }
    },
    {
      "id": {
        "id": "fuse/navigation/pageresourcebinding_1",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/pageresourcebinding_1",
        "href": "fuse/navigation/pageresourcebinding_1"
      },
      "titles": {
        "indexTitle": "PageResourceBinding<T>",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.PageResourceBinding<T>"
      }
    },
    {
      "comment": {
        "brief": "Push a new route onto the router.",
        "full": "Push a new route onto the router.\n\nThis is the same as @RouterModify with `How=\"Push\"`"
      },
      "id": {
        "id": "fuse/navigation/pushroute",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/pushroute",
        "href": "fuse/navigation/pushroute"
      },
      "titles": {
        "indexTitle": "PushRoute",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.PushRoute"
      }
    },
    {
      "comment": {
        "brief": "Push a full path on the router.",
        "full": "Push a full path on the router."
      },
      "id": {
        "id": "fuse/navigation/pushroutecommand",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/pushroutecommand",
        "href": "fuse/navigation/pushroutecommand"
      },
      "titles": {
        "indexTitle": "PushRouteCommand",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.PushRouteCommand"
      }
    },
    {
      "comment": {
        "brief": "Reporesents a route to be used with @Router.",
        "full": "Reporesents a route to be used with @Router.\n\nThis class represents one element in a linked list, that forms a multi-level route path\nwith optional parameters for each part of the path.\n\nThe instances are immutable."
      },
      "id": {
        "id": "fuse/navigation/route",
        "parentId": "fuse/navigation",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/route",
        "href": "fuse/navigation/route"
      },
      "titles": {
        "indexTitle": "Route",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.Route"
      }
    },
    {
      "id": {
        "id": "fuse/navigation/routemodificationcommand",
        "parentId": "fuse/navigation",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/routemodificationcommand",
        "href": "fuse/navigation/routemodificationcommand"
      },
      "titles": {
        "indexTitle": "RouteModificationCommand",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.RouteModificationCommand"
      }
    },
    {
      "comment": {
        "brief": "Manages routing and navigation history for part or all of a Fuse app.",
        "full": "Manages routing and navigation history for part or all of a Fuse app.\n\n> Note: It is recommended that you first read the [Navigation guide](/docs/navigation/navigation) for a full overview of Fuse's navigation system.\n\nThe `Router` class, along with _router outlets_ such as @Navigator and @PageControl, forms the basis of navigation in Fuse.\nTo navigate in a Fuse app, a _route_ is sent to a `Router` instance. This route consists of one or many parts, which each consist of a string path that\nidentifies a target to navigate to, and optionally, some data to send to this target when navigating to it.\n\nWhen a `Router` receives a route, it will recursively perform navigation for the different parts of the route.\nFor each part, it will search its immediate UX tree to locate a router outlet that will use this part's string path to navigate to part of the app.\nThis could represent, for example, the template key of a template in a @Navigator, or the name of a @Page in a @PageControl.\n\nA router can go directly between routes with `goto`, or navigate heirarchically using `push` and `goBack`.\n\nTypically, an app will use a single, global `Router` instance which will work from the @App root, and represents a single _navigation context_ for the entire app.\nIt's possible, however, to create separate routers for different localized parts of the UX tree, which can be useful if, for example, a different history needs to be\nkept for part of the app.\n\n## Example\n\nThe following example illustrates a basic navigation setup using a @Router and @Navigator.\nFor a complete introduction and proper examples of Fuse's navigation system, see the [Navigation guide](/docs/navigation/navigation).\n\n    <JavaScript>\n        module.exports = {\n            gotoFirst: function() { router.goto(\"firstPage\"); },\n            gotoSecond: function() { router.goto(\"secondPage\"); }\n        };\n    </JavaScript>\n\n    <Router ux:Name=\"router\" />\n\n    <DockPanel>\n        <Navigator DefaultTemplate=\"firstPage\">\n            <Page ux:Template=\"firstPage\">\n                <Text Alignment=\"Center\">This is the first page.</Text>\n            </Page>\n            <Page ux:Template=\"secondPage\">\n                <Text Alignment=\"Center\">This is the second page.</Text>\n            </Page>\n        </Navigator>\n\n        <Grid Dock=\"Bottom\" Columns=\"1*,1*\">\n            <Button Text=\"First page\" Padding=\"20\" Clicked=\"{gotoFirst}\" />\n            <Button Text=\"Second page\" Padding=\"20\" Clicked=\"{gotoSecond}\" />\n        </Grid>\n    </DockPanel>\n\n## Page Navigation Order\n\nThe history of the router follows the standard history ordering, newest routes are at the front of the history, older routes at the back.\n\nThe router however does not decide on the navigation order of the pages in the individual controls, as described in [Navigation Order](articles:navigation/navigationorder.md). This is controlled by each outlet being used."
      },
      "id": {
        "id": "fuse/navigation/router",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/router",
        "href": "fuse/navigation/router"
      },
      "titles": {
        "indexTitle": "Router",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.Router"
      }
    },
    {
      "comment": {
        "brief": "Cancels a partial navigation on the Router.",
        "full": "Cancels a partial navigation on the Router."
      },
      "id": {
        "id": "fuse/navigation/routercancelnavigation",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/routercancelnavigation",
        "href": "fuse/navigation/routercancelnavigation"
      },
      "titles": {
        "indexTitle": "RouterCancelNavigation",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.RouterCancelNavigation"
      }
    },
    {
      "comment": {
        "brief": "Performs a transition on the router with extended options.",
        "full": "Performs a transition on the router with extended options.\n\n> Note: there is also a JavaScript interface for [Router.modify](api:fuse/navigation/router/modify_0f0d575d).\n\nBasic use requires setting the property `Bookmark` to specify the route to navigate to,\nand the `How` property to specify what navigation action will be used, most frequently `Push` or `Goto`.\n\n    <Router ux:Name=\"router\" />\n    ...\n    <JavaScript>\n        router.bookmark({\n            name: \"myBookmark\",\n            path: [\"myPage\", {}, \"mySubpage\", {}]\n        });\n    </JavaScript>\n    ...\n    <Panel>\n        <Clicked>\n            <RouterModify How=\"Push\" Bookmark=\"myBookmark\" />\n        </Clicked>\n        <Text Value=\"Open subpage\" />\n    </Panel>\n\nIf we only need to go back in navigation history, the `Bookmark` property can be omitted:\n\n    <RouterModify How=\"GoBack\" />\n\nWhen using `Navigator` or `PageControl`, the default transitions can be overriden by setting `Transition`\nand `Style` properties on `RouterModify`. This pushes another page without a transition:\n\n    <RouterModify How=\"Push\" Transition=\"Bypass\" Bookmark=\"myBookmark\" />\n\nWe can use the `Style` property to refer to specific `Transition` triggers on target pages, allowing us\nto trigger different transitions for separate use cases:\n\n    <Router ux:Name=\"router\" />\n    ...\n    <JavaScript>\n        router.bookmark({\n            name: \"myBookmark\",\n            path: [\"secondPage\", {}]\n        });\n    </JavaScript>\n    ...\n    <Navigator DefaultPath=\"firstPage\">\n        <StackPanel ux:Template=\"firstPage\">\n            <Panel>\n                <Clicked>\n                    <RouterModify How=\"Push\" Bookmark=\"myBookmark\" Style=\"fromTop\" />\n                </Clicked>\n                <Text Value=\"Transition from top\" />\n            </Panel>\n            <Panel>\n                <Clicked>\n                    <RouterModify How=\"Push\" Bookmark=\"myBookmark\" Style=\"fromBottom\" />\n                </Clicked>\n                <Text Value=\"Transition from bottom\" />\n            </Panel>\n        </StackPanel>\n\n        <Panel ux:Template=\"secondPage\">\n            <Transition Style=\"fromTop\">\n                <Move Y=\"-1\" RelativeTo=\"ParentSize\" Duration=\"0.4\" Easing=\"SinusoidalInOut\" />\n            </Transition>\n            <Transition Style=\"fromBottom\">\n                <Move Y=\"1\" RelativeTo=\"ParentSize\" Duration=\"0.4\" Easing=\"SinusoidalInOut\" />\n            </Transition>\n            <Clicked>\n                <RouterModify How=\"GoBack\" />\n            </Clicked>\n            <Text Value=\"Go back\" />\n        </Panel>\n    </Navigator>"
      },
      "id": {
        "id": "fuse/navigation/routermodify",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/routermodify",
        "href": "fuse/navigation/routermodify"
      },
      "titles": {
        "indexTitle": "RouterModify",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.RouterModify"
      }
    },
    {
      "id": {
        "id": "fuse/navigation/structurednavigation",
        "parentId": "fuse/navigation",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/structurednavigation",
        "href": "fuse/navigation/structurednavigation"
      },
      "titles": {
        "indexTitle": "StructuredNavigation",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.StructuredNavigation"
      }
    },
    {
      "id": {
        "id": "fuse/navigation/swipenavigate",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/swipenavigate",
        "href": "fuse/navigation/swipenavigate"
      },
      "titles": {
        "indexTitle": "SwipeNavigate",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.SwipeNavigate"
      }
    },
    {
      "id": {
        "id": "fuse/navigation/visualnavigation",
        "parentId": "fuse/navigation",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/visualnavigation",
        "href": "fuse/navigation/visualnavigation"
      },
      "titles": {
        "indexTitle": "VisualNavigation",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.VisualNavigation"
      }
    },
    {
      "comment": {
        "brief": "Animates while the page is active.",
        "full": "Animates while the page is active.\n\n## Example\n\nThe following example changes the value of a @Text element to `Active` when the\nfirst page of a @PageControl is active. We set the `Threshold` high to make the\nchange happen later when transitioning to the page.\n\n    <PageControl>\n        <Page>\n            <Panel Alignment=\"Center\">\n                <Text ux:Name=\"text\">Inactive</Text>\n                <WhileActive Threshold=\"0.9\">\n                    <Change text.Value=\"Active\" />\n                </WhileActive>\n            </Panel>\n        </Page>\n        <Page Background=\"Blue\" />\n    </PageControl>\n\nThe progress of this trigger for a page is calculated as `1 - distance_to_active`. So a page progress of 0 will map to `1` for this trigger, and anything more than `1` away from the active page will be `0`. For example, the `Threshold=\"0.9\"` in the above example means the trigger will become active when the page has been swiped 90% of the way to active, instead of waiting to 100%."
      },
      "id": {
        "id": "fuse/navigation/whileactive",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whileactive",
        "href": "fuse/navigation/whileactive"
      },
      "titles": {
        "indexTitle": "WhileActive",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhileActive"
      }
    },
    {
      "comment": {
        "brief": "Active whenever navigating backward is possible.",
        "full": "Active whenever navigating backward is possible.\n\nThis trigger depends on the navigation context."
      },
      "id": {
        "id": "fuse/navigation/whilecangoback",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whilecangoback",
        "href": "fuse/navigation/whilecangoback"
      },
      "titles": {
        "indexTitle": "WhileCanGoBack",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhileCanGoBack"
      }
    },
    {
      "comment": {
        "brief": "Active whenever navigating forward is possible.",
        "full": "Active whenever navigating forward is possible.\n\nThis trigger depends on the navigation context."
      },
      "id": {
        "id": "fuse/navigation/whilecangoforward",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whilecangoforward",
        "href": "fuse/navigation/whilecangoforward"
      },
      "titles": {
        "indexTitle": "WhileCanGoForward",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhileCanGoForward"
      }
    },
    {
      "id": {
        "id": "fuse/navigation/whilehistorytrigger",
        "parentId": "fuse/navigation",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whilehistorytrigger",
        "href": "fuse/navigation/whilehistorytrigger"
      },
      "titles": {
        "indexTitle": "WhileHistoryTrigger",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhileHistoryTrigger"
      }
    },
    {
      "comment": {
        "brief": "Animates while the page is inactive.",
        "full": "Animates while the page is inactive.\n\n## Example\n\nThe following example changes the value of a @Text element to `Inactive` when the\nfirst page of a @PageControl is inactive. We set the `Threshold` low to make the\nchange happen earlier when transitioning from the page.\n\n    <PageControl>\n        <Page>\n            <Panel Alignment=\"Center\">\n                <Text ux:Name=\"text\">Active</Text>\n                <WhileInactive Threshold=\"0.1\">\n                    <Change text.Value=\"Inactive\" />\n                </WhileInactive>\n            </Panel>\n        </Page>\n        <Page Background=\"Blue\" />\n    </PageControl>\n\nThe progress of this trigger is calculated as the page's distance from the active page (or the navigation position for continuous navigation). For example, the active page has a distance of 0, meaning this trigger will not be activated, and a page 1 away from the active has a distance of 1, meaning this trigger will be activated. The `Threshold=0.1` in this example means the trigger activates after the page has been swiped only 10% of the distance away from the active position."
      },
      "id": {
        "id": "fuse/navigation/whileinactive",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whileinactive",
        "href": "fuse/navigation/whileinactive"
      },
      "titles": {
        "indexTitle": "WhileInactive",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhileInactive"
      }
    },
    {
      "comment": {
        "brief": "A directional version of @WhileInactive.",
        "full": "A directional version of @WhileInactive.\n\nThis works like @WhileInactive except remains completely inactive if the page goes behind the current page. It can only be activated while the page is in front of the active one (in the front)."
      },
      "id": {
        "id": "fuse/navigation/whileinenterstate",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whileinenterstate",
        "href": "fuse/navigation/whileinenterstate"
      },
      "titles": {
        "indexTitle": "WhileInEnterState",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhileInEnterState"
      }
    },
    {
      "comment": {
        "brief": "A directional version of @WhileInactive.",
        "full": "A directional version of @WhileInactive.\n\nThis works like @WhileInactive except remains completely inactive if the page goes in front of the current page. It can only be activated while the page is behind the active one (in the back)."
      },
      "id": {
        "id": "fuse/navigation/whileinexitstate",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whileinexitstate",
        "href": "fuse/navigation/whileinexitstate"
      },
      "titles": {
        "indexTitle": "WhileInExitState",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhileInExitState"
      }
    },
    {
      "comment": {
        "brief": "Active while the user is currently navigating between two pages.",
        "full": "Active while the user is currently navigating between two pages.\n\nDoes not provide progress.\n\n# Example\n\nIn this example, the pages become slightly smaller when you are navigating them:\n\n    <App>\n        <Page ux:Class=\"ScalingPanel\">\n            <Scaling ux:Name=\"scale\" Factor=\"1\" />\n            <WhileNavigating>\n                <Change scale.Factor=\".7\" Duration=\".1\" />\n            </WhileNavigating>\n        </Page>\n        <PageControl>\n            <ScalingPanel Color=\"Red\" />\n            <ScalingPanel Color=\"Blue\" />\n        </PageControl>\n    </App>"
      },
      "id": {
        "id": "fuse/navigation/whilenavigating",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whilenavigating",
        "href": "fuse/navigation/whilenavigating"
      },
      "titles": {
        "indexTitle": "WhileNavigating",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhileNavigating"
      }
    },
    {
      "comment": {
        "brief": "These triggers respond to the current \"activation\" state of a page.",
        "full": "These triggers respond to the current \"activation\" state of a page.\n\n[subclass Fuse.Navigation.NavigationAnimation]\n\nThe states of these triggers depends on the page progress of a page, where 0 is active and +/-1 (or higher) is inactive. These values are logically mapped into a range from 0...1 for each trigger, where 0 is the definitive \"off\" state of the trigger and 1 is the \"on\" state.\n\nValues in between are considered to be in transition. The `Threshold` and `Limit` properties can be used to adjust when these triggers flip between active/inactive on continuous navigation.\n\nIf the navigation is discrete, such as with `Navigator` or `DirectNavigation` the `Threshold` will have no effect as pages are either `0` or `1` in progress. The `Limit` property should also not be used since it will also be ineffectual.\n\nSee [Navigation Order](articles:navigation/navigationorder.md)"
      },
      "id": {
        "id": "fuse/navigation/whilenavigationtrigger",
        "parentId": "fuse/navigation",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whilenavigationtrigger",
        "href": "fuse/navigation/whilenavigationtrigger"
      },
      "titles": {
        "indexTitle": "WhileNavigationTrigger",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhileNavigationTrigger"
      }
    },
    {
      "comment": {
        "brief": "Is active while a page, optionally matching given criteria, is active in the navigation.",
        "full": "Is active while a page, optionally matching given criteria, is active in the navigation.\n\nThis trigger checks the `Navigation.Active` page only. During a transition it will consider partial progress, but only for the `Active` page itself."
      },
      "id": {
        "id": "fuse/navigation/whilepageactive",
        "parentId": "fuse/navigation",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/navigation/whilepageactive",
        "href": "fuse/navigation/whilepageactive"
      },
      "titles": {
        "indexTitle": "WhilePageActive",
        "fullyQualifiedIndexTitle": "Fuse.Navigation.WhilePageActive"
      }
    },
    {
      "comment": {
        "brief": "Nodes are the basic building blocks of Fuse apps.",
        "full": "Nodes are the basic building blocks of Fuse apps.\n\nNodes are typically instantiated in UX Markup, and come in many different subclasses.\n\nSubclasses inheriting @Visual have a visual representation on the screen, and/or manages input for a\nspecific visual region.\n\nSubclasses inheriting @Behaviors modify the behavior of @Visuals.",
        "attributes": {
          "topic": "Nodes"
        }
      },
      "id": {
        "id": "fuse/node",
        "parentId": "fuse",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/node",
        "href": "fuse/node"
      },
      "titles": {
        "indexTitle": "Node",
        "fullyQualifiedIndexTitle": "Fuse.Node"
      }
    },
    {
      "comment": {
        "brief": "Allows creating a class that contains several nodes and resources that are added directly to their Parent, as though included directly.",
        "full": "Allows creating a class that contains several nodes and resources that are added directly to their Parent, as though included directly.\n\n    <NodeGroup ux:Class=\"GridLine\">\n        <float4 ux:Property=\"Color\"/>\n        <string ux:Property=\"Title\"/>\n        <string ux:Property=\"Emoji\"/>\n\n        <Rectangle Color=\"{Property this.Color}\"/>\n        <Text Value=\"{Property this.Title}\"/>\n        <Text Value=\"{Property this.Emoji}\"/>\n    </NodeGroup>\n\n    <Grid Columns=\"50,1*,auto\" DefaultRow=\"auto\">\n        <GridLine Color=\"#AFA\" Title=\"Happy One\" Emoji=\"😀\"/>\n        <GridLine Color=\"#FFA\" Title=\"Cry Baby\" Emoji=\"😭\"/>\n        <GridLine Color=\"#FAA\" Title=\"Mr. Angry\" Emoji=\"😠\"/>\n    </Grid>\n\nA `NodeGroup` may be used as a target for `Each.TemplateSource` or `Instance.TemplateSource`. This can be used to create classes that position templated items.\n\n    <NodeGroup ux:Class=\"TitleBar\">\n        <Grid Columns=\"40,1*,40\" Alignment=\"Top\">\n            <Panel>\n                <Instance TemplateSource=\"this\" TemplateKey=\"leftOption\">\n                    <MyMenuButton/>\n                </Instance>\n            </Panel>\n            <Panel>\n                <Instance TemplateSource=\"this\" TemplateKey=\"title\">\n                    <Text Value=\"{Page Title}\"/>\n                </Instance>\n            </Panel>\n            <Panel TemplateSource=\"this\" TemplateKey=\"contextMenu\"/>\n        </Grid>\n    </NodeGroup>\n\n    <Page>\n        <TitleBar>\n            <Panel ux:Template=\"contextMenu\">\n                <MyShareButton/>\n            </Panel>\n        </TitleBar>\n    </Page>\n\n    <Page>\n        <TitleBar>\n            <Panel ux:Template=\"leftOption\"/><!-- leave empty -->\n            <Image File=\"pageTitle.png\" ux:Template=\"title\"/>\n        </TitleBar>\n    </Page>"
      },
      "id": {
        "id": "fuse/nodegroup",
        "parentId": "fuse",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/nodegroup",
        "href": "fuse/nodegroup"
      },
      "titles": {
        "indexTitle": "NodeGroup",
        "fullyQualifiedIndexTitle": "Fuse.NodeGroup"
      }
    },
    {
      "comment": {
        "brief": "A common base class that adds nodes and resources to the parent node while active.",
        "full": "A common base class that adds nodes and resources to the parent node while active.\n\n[subclass Fuse.NodeGroupBase]\n\nBe aware there is no ordering between the Nodes, Resources, and Templates. These are each independent lists which have their own order."
      },
      "id": {
        "id": "fuse/nodegroupbase",
        "parentId": "fuse",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/nodegroupbase",
        "href": "fuse/nodegroupbase"
      },
      "titles": {
        "indexTitle": "NodeGroupBase",
        "fullyQualifiedIndexTitle": "Fuse.NodeGroupBase"
      }
    },
    {
      "id": {
        "id": "fuse/orthographicfrustum",
        "parentId": "fuse",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/orthographicfrustum",
        "href": "fuse/orthographicfrustum"
      },
      "titles": {
        "indexTitle": "OrthographicFrustum",
        "fullyQualifiedIndexTitle": "Fuse.OrthographicFrustum"
      }
    },
    {
      "id": {
        "id": "fuse/pendingremovevisual",
        "parentId": "fuse",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/pendingremovevisual",
        "href": "fuse/pendingremovevisual"
      },
      "titles": {
        "indexTitle": "PendingRemoveVisual",
        "fullyQualifiedIndexTitle": "Fuse.PendingRemoveVisual"
      }
    },
    {
      "id": {
        "id": "fuse/perspectivefrustum",
        "parentId": "fuse",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/perspectivefrustum",
        "href": "fuse/perspectivefrustum"
      },
      "titles": {
        "indexTitle": "PerspectiveFrustum",
        "fullyQualifiedIndexTitle": "Fuse.PerspectiveFrustum"
      }
    },
    {
      "comment": {
        "brief": "a Trigger that pulse when drag has been ended by Draggable Element",
        "full": "a Trigger that pulse when drag has been ended by Draggable Element"
      },
      "id": {
        "id": "fuse/physics/dragended",
        "parentId": "fuse/physics",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/physics/dragended",
        "href": "fuse/physics/dragended"
      },
      "titles": {
        "indexTitle": "DragEnded",
        "fullyQualifiedIndexTitle": "Fuse.Physics.DragEnded"
      }
    },
    {
      "id": {
        "id": "fuse/physics/draggable",
        "parentId": "fuse/physics",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/physics/draggable",
        "href": "fuse/physics/draggable"
      },
      "titles": {
        "indexTitle": "Draggable",
        "fullyQualifiedIndexTitle": "Fuse.Physics.Draggable"
      }
    },
    {
      "id": {
        "id": "fuse/physics/draggableeventargs",
        "parentId": "fuse/physics",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/physics/draggableeventargs",
        "href": "fuse/physics/draggableeventargs"
      },
      "titles": {
        "indexTitle": "DraggableEventArgs",
        "fullyQualifiedIndexTitle": "Fuse.Physics.DraggableEventArgs"
      }
    },
    {
      "id": {
        "id": "fuse/physics/draggableeventtrigger",
        "parentId": "fuse/physics",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/physics/draggableeventtrigger",
        "href": "fuse/physics/draggableeventtrigger"
      },
      "titles": {
        "indexTitle": "DraggableEventTrigger",
        "fullyQualifiedIndexTitle": "Fuse.Physics.DraggableEventTrigger"
      }
    },
    {
      "id": {
        "id": "fuse/physics/draggabletrigger",
        "parentId": "fuse/physics",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/physics/draggabletrigger",
        "href": "fuse/physics/draggabletrigger"
      },
      "titles": {
        "indexTitle": "DraggableTrigger",
        "fullyQualifiedIndexTitle": "Fuse.Physics.DraggableTrigger"
      }
    },
    {
      "comment": {
        "brief": "a Trigger that pulse when drag has been started by Draggable Element",
        "full": "a Trigger that pulse when drag has been started by Draggable Element"
      },
      "id": {
        "id": "fuse/physics/dragstarted",
        "parentId": "fuse/physics",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/physics/dragstarted",
        "href": "fuse/physics/dragstarted"
      },
      "titles": {
        "indexTitle": "DragStarted",
        "fullyQualifiedIndexTitle": "Fuse.Physics.DragStarted"
      }
    },
    {
      "id": {
        "id": "fuse/physics/droppableeventargs",
        "parentId": "fuse/physics",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/physics/droppableeventargs",
        "href": "fuse/physics/droppableeventargs"
      },
      "titles": {
        "indexTitle": "DroppableEventArgs",
        "fullyQualifiedIndexTitle": "Fuse.Physics.DroppableEventArgs"
      }
    },
    {
      "comment": {
        "brief": "a Trigger that pulse when draggable element has been dropped to the target or target element has received draggable element",
        "full": "a Trigger that pulse when draggable element has been dropped to the target or target element has received draggable element",
        "attributes": {
          "experimental": true
        }
      },
      "id": {
        "id": "fuse/physics/dropped",
        "parentId": "fuse/physics",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/physics/dropped",
        "href": "fuse/physics/dropped"
      },
      "titles": {
        "indexTitle": "Dropped",
        "fullyQualifiedIndexTitle": "Fuse.Physics.Dropped"
      }
    },
    {
      "comment": {
        "brief": "Triggers as a draggable element enters the force field.",
        "full": "Triggers as a draggable element enters the force field.\n\nAs it is a pulse trigger, the forward animation will play in one continous run when the trigger is activated, and play the backwards animation continously when deactivated.\n\n## Example\nIn the following example, a circle in the middle of the screen flashes green if a smaller, blue circle, is moved into its force field:\n\n    <Panel>\n        <Panel Width=\"60\" Height=\"60\" Alignment=\"BottomLeft\">\n            <Circle Color=\"#42A5F5\" />\n            <Draggable />\n            <EnteredForceField ForceField=\"centerAttract\">\n                <Change centerCircle.Color=\"#66BB6A\" Duration=\".5\"/>\n            </EnteredForceField>\n        </Panel>\n        <Panel Width=\"200\" Height=\"200\" Alignment=\"Center\" >\n            <Circle ux:Name=\"centerCircle\" Color=\"#EF5350\" />\n            <PointAttractor ux:Name=\"centerAttract\" Radius=\"150\" Strength=\"250\" />\n        </Panel>\n    </Panel>\n    <Panel Alignment=\"BottomLeft\" Width=\"100\" Height=\"100\">\n        <PointAttractor Radius=\"500\" Strength=\"100\" Offset=\"0,0,0\"/>\n    </Panel>"
      },
      "id": {
        "id": "fuse/physics/enteredforcefield",
        "parentId": "fuse/physics",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/physics/enteredforcefield",
        "href": "fuse/physics/enteredforcefield"
      },
      "titles": {
        "indexTitle": "EnteredForceField",
        "fullyQualifiedIndexTitle": "Fuse.Physics.EnteredForceField"
      }
    },
    {
      "comment": {
        "brief": "Triggers as a draggable element leaves the force field.",
        "full": "Triggers as a draggable element leaves the force field.\n\nAs it is a pulse trigger, the forward animation will play in one continous run when the trigger is activated, and play the backwards animation continously when deactivated.\n\n## Example\nIn the following example, a circle with a `PointAttractor` in the middle of the screen flashes green if a smaller, blue circle, is removed from the forcefield.\n\n    <Panel>\n        <Panel Width=\"60\" Height=\"60\" Alignment=\"Center\">\n            <Circle Color=\"#42A5F5\" />\n            <Draggable />\n            <ExitedForceField ForceField=\"centerAttract\">\n                <Change centerCircle.Color=\"#66BB6A\" Duration=\".5\"/>\n            </ExitedForceField>\n        </Panel>\n        <Panel Width=\"200\" Height=\"200\" Alignment=\"Center\" >\n            <Circle ux:Name=\"centerCircle\" Color=\"#EF5350\" />\n            <PointAttractor ux:Name=\"centerAttract\" Radius=\"150\" Strength=\"250\" />\n        </Panel>\n    </Panel>"
      },
      "id": {
        "id": "fuse/physics/exitedforcefield",
        "parentId": "fuse/physics",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/physics/exitedforcefield",
        "href": "fuse/physics/exitedforcefield"
      },
      "titles": {
        "indexTitle": "ExitedForceField",
        "fullyQualifiedIndexTitle": "Fuse.Physics.ExitedForceField"
      }
    },
    {
      "id": {
        "id": "fuse/physics/forcefield",
        "parentId": "fuse/physics",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/physics/forcefield",
        "href": "fuse/physics/forcefield"
      },
      "titles": {
        "indexTitle": "ForceField",
        "fullyQualifiedIndexTitle": "Fuse.Physics.ForceField"
      }
    },
    {
      "id": {
        "id": "fuse/physics/forcefieldeventargs",
        "parentId": "fuse/physics",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/physics/forcefieldeventargs",
        "href": "fuse/physics/forcefieldeventargs"
      },
      "titles": {
        "indexTitle": "ForceFieldEventArgs",
        "fullyQualifiedIndexTitle": "Fuse.Physics.ForceFieldEventArgs"
      }
    },
    {
      "id": {
        "id": "fuse/physics/forcefieldeventtrigger",
        "parentId": "fuse/physics",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/physics/forcefieldeventtrigger",
        "href": "fuse/physics/forcefieldeventtrigger"
      },
      "titles": {
        "indexTitle": "ForceFieldEventTrigger",
        "fullyQualifiedIndexTitle": "Fuse.Physics.ForceFieldEventTrigger"
      }
    },
    {
      "id": {
        "id": "fuse/physics/forcefieldtrigger",
        "parentId": "fuse/physics",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/physics/forcefieldtrigger",
        "href": "fuse/physics/forcefieldtrigger"
      },
      "titles": {
        "indexTitle": "ForceFieldTrigger",
        "fullyQualifiedIndexTitle": "Fuse.Physics.ForceFieldTrigger"
      }
    },
    {
      "comment": {
        "brief": "Animates a draggable element depending on how close it is to a point attractor",
        "full": "Animates a draggable element depending on how close it is to a point attractor\n\nThe animation will animate from 0(outside the forcefield radius), to 1(at the center of the forcefield), unless `From` and `To` are used to specify a custom range. This is the same as using a `RangeAdapter`.\n\n# Example\nIn the following example, a red circle will get smaller as a blue, filled circle nears the center `PointAttract`, `centerAttract`. Because `To` is set to `1.3` on the `InForceFieldAnimation`, the animation will never animate further than `0.77`.\n\n    <Panel>\n        <Panel Width=\"60\" Height=\"60\" Alignment=\"BottomLeft\">\n            <Circle Color=\"#42A5F5\" />\n            <Draggable />\n            <InForceFieldAnimation  ForceField=\"centerAttract\" From=\"0\" To=\"1.3\">\n                <Scale Target=\"centerCircle\" Factor=\".0\" />\n            </InForceFieldAnimation>\n        </Panel>\n        <Panel Width=\"300\" Height=\"300\" Alignment=\"Center\" >\n            <Circle ux:Name=\"centerCircle\" >\n                <Stroke Color=\"#F00\" Width=\"4\"/>\n            </Circle>\n            <PointAttractor ux:Name=\"centerAttract\" Radius=\"150\" Strength=\"250\" />\n        </Panel>\n    </Panel>\n    <Panel Alignment=\"BottomLeft\" Width=\"100\" Height=\"100\">\n        <PointAttractor Radius=\"300\" Strength=\"150\" Offset=\"0,0,0\"/>\n    </Panel>"
      },
      "id": {
        "id": "fuse/physics/inforcefieldanimation",
        "parentId": "fuse/physics",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/physics/inforcefieldanimation",
        "href": "fuse/physics/inforcefieldanimation"
      },
      "titles": {
        "indexTitle": "InForceFieldAnimation",
        "fullyQualifiedIndexTitle": "Fuse.Physics.InForceFieldAnimation"
      }
    },
    {
      "id": {
        "id": "fuse/physics/overlapinfo",
        "parentId": "fuse/physics",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/physics/overlapinfo",
        "href": "fuse/physics/overlapinfo"
      },
      "titles": {
        "indexTitle": "OverlapInfo",
        "fullyQualifiedIndexTitle": "Fuse.Physics.OverlapInfo"
      }
    },
    {
      "id": {
        "id": "fuse/physics/pointattractor",
        "parentId": "fuse/physics",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/physics/pointattractor",
        "href": "fuse/physics/pointattractor"
      },
      "titles": {
        "indexTitle": "PointAttractor",
        "fullyQualifiedIndexTitle": "Fuse.Physics.PointAttractor"
      }
    },
    {
      "id": {
        "id": "fuse/physics/spring",
        "parentId": "fuse/physics",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/physics/spring",
        "href": "fuse/physics/spring"
      },
      "titles": {
        "indexTitle": "Spring",
        "fullyQualifiedIndexTitle": "Fuse.Physics.Spring"
      }
    },
    {
      "comment": {
        "brief": "Active while the element is being dragged.",
        "full": "Active while the element is being dragged."
      },
      "id": {
        "id": "fuse/physics/whiledragging",
        "parentId": "fuse/physics",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/physics/whiledragging",
        "href": "fuse/physics/whiledragging"
      },
      "titles": {
        "indexTitle": "WhileDragging",
        "fullyQualifiedIndexTitle": "Fuse.Physics.WhileDragging"
      }
    },
    {
      "comment": {
        "brief": "a Trigger that activate when Draggable Element is intersected with the `Target` element",
        "full": "a Trigger that activate when Draggable Element is intersected with the `Target` element\n\n#Example:\n\n```\n<App>\n    <JavaScript>\n        var Observable = require(\"FuseJS/Observable\");\n        var dataToTransfer = new Observable(\"Data to transfer\");\n        module.exports = { dataToTransfer, dataReceived: function (args) { console.dir(args.data); } }\n    </JavaScript>\n    <ClientPanel>\n        <Panel ux:Name=\"source\" X=\"40\" Y=\"80\" Size=\"80\">\n            <Rectangle Layer=\"Background\" Color=\"#afa\" ux:Name=\"bg\" />\n            <Draggable />\n            <Shadow Distance=\"0\" Size=\"0\" ux:Name=\"shadow\" />\n            <WhilePressed>\n                <Scale Vector=\"1.2\" Duration=\"0.2\" />\n                <Change shadow.Size=\"5\" Duration=\"0.2\" />\n                <Change shadow.Distance=\"3\" Duration=\"0.2\" />\n                <Change shadow.Color=\"#666\" Duration=\"0.1\" />\n            </WhilePressed>\n            <WhileDragging>\n                <Change shadow.Size=\"10\" Duration=\"0.1\" />\n                <Change shadow.Distance=\"6\" Duration=\"0.1\" />\n                <Change shadow.Color=\"#333\" Duration=\"0.1\" />\n            </WhileDragging>\n            <WhileDraggingOver Target=\"dropPanel\">\n                <Change bg.Color=\"#0f0\" />\n                <Change bg.StrokeWidth=\"2\" Duration=\"0.2\" />\n                <Change bg.StrokeColor=\"#f00\" Duration=\"0.2\" />\n            </WhileDraggingOver>\n            <Dropped To=\"dropPanel\" Data=\"{dataToTransfer}\">\n                <Set source.Size=\"50\" />\n            </Dropped>\n        </Panel>\n\n        <Panel Size=\"80\" X=\"80\" Y=\"500\" Color=\"#ccc\" ux:Name=\"dropPanel\">\n            <WhileDroppingBy Source=\"source\">\n                <Change dropPanel.Color=\"#0ff\" Duration=\"0.2\" />\n            </WhileDroppingBy>\n            <Dropped By=\"source\" Handler=\"{dataReceived}\">\n                <Scale Vector=\"1.2\" Duration=\"0.2\" />\n            </Dropped>\n        </Panel>\n    </ClientPanel>\n</App>\n```",
        "attributes": {
          "experimental": true
        }
      },
      "id": {
        "id": "fuse/physics/whiledraggingover",
        "parentId": "fuse/physics",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/physics/whiledraggingover",
        "href": "fuse/physics/whiledraggingover"
      },
      "titles": {
        "indexTitle": "WhileDraggingOver",
        "fullyQualifiedIndexTitle": "Fuse.Physics.WhileDraggingOver"
      }
    },
    {
      "comment": {
        "brief": "a Trigger that activate when the element that has `WhileDroppedBy` trigger is intersected with `Source` element (Draggable Element)",
        "full": "a Trigger that activate when the element that has `WhileDroppedBy` trigger is intersected with `Source` element (Draggable Element)\n\n#Example:\n\n```\n<App>\n    <JavaScript>\n        var Observable = require(\"FuseJS/Observable\");\n        var dataToTransfer = new Observable(\"Data to transfer\");\n        module.exports = { dataToTransfer, dataReceived: function (args) { console.dir(args.data); } }\n    </JavaScript>\n    <ClientPanel>\n        <Panel ux:Name=\"source\" X=\"40\" Y=\"80\" Size=\"80\">\n            <Rectangle Layer=\"Background\" Color=\"#afa\" ux:Name=\"bg\" />\n            <Draggable />\n            <Shadow Distance=\"0\" Size=\"0\" ux:Name=\"shadow\" />\n            <WhilePressed>\n                <Scale Vector=\"1.2\" Duration=\"0.2\" />\n                <Change shadow.Size=\"5\" Duration=\"0.2\" />\n                <Change shadow.Distance=\"3\" Duration=\"0.2\" />\n                <Change shadow.Color=\"#666\" Duration=\"0.1\" />\n            </WhilePressed>\n            <WhileDragging>\n                <Change shadow.Size=\"10\" Duration=\"0.1\" />\n                <Change shadow.Distance=\"6\" Duration=\"0.1\" />\n                <Change shadow.Color=\"#333\" Duration=\"0.1\" />\n            </WhileDragging>\n            <WhileDraggingOver Target=\"dropPanel\">\n                <Change bg.Color=\"#0f0\" />\n                <Change bg.StrokeWidth=\"2\" Duration=\"0.2\" />\n                <Change bg.StrokeColor=\"#f00\" Duration=\"0.2\" />\n            </WhileDraggingOver>\n            <Dropped To=\"dropPanel\" Data=\"{dataToTransfer}\">\n                <Set source.Size=\"50\" />\n            </Dropped>\n        </Panel>\n\n        <Panel Size=\"80\" X=\"80\" Y=\"500\" Color=\"#ccc\" ux:Name=\"dropPanel\">\n            <WhileDroppingBy Source=\"source\">\n                <Change dropPanel.Color=\"#0ff\" Duration=\"0.2\" />\n            </WhileDroppingBy>\n            <Dropped By=\"source\" Handler=\"{dataReceived}\">\n                <Scale Vector=\"1.2\" Duration=\"0.2\" />\n            </Dropped>\n        </Panel>\n    </ClientPanel>\n</App>",
        "attributes": {
          "experimental": true
        }
      },
      "id": {
        "id": "fuse/physics/whiledroppingby",
        "parentId": "fuse/physics",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/physics/whiledroppingby",
        "href": "fuse/physics/whiledroppingby"
      },
      "titles": {
        "indexTitle": "WhileDroppingBy",
        "fullyQualifiedIndexTitle": "Fuse.Physics.WhileDroppingBy"
      }
    },
    {
      "id": {
        "id": "fuse/physics/world",
        "parentId": "fuse/physics",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/physics/world",
        "href": "fuse/physics/world"
      },
      "titles": {
        "indexTitle": "World",
        "fullyQualifiedIndexTitle": "Fuse.Physics.World"
      }
    },
    {
      "comment": {
        "brief": "Contains information about a new size and location for a visual element.",
        "full": "Contains information about a new size and location for a visual element.\n\nEvent handlers for the [Element.Placed](api:fuse/elements/element/placed) event will be called with\nan instance of `PlacedArgs`, containing the following fields:\n\n    {\n        x,      // X-coordinate of the element's new position\n        y,      // Y-coordinate of the element's new position\n        width,  // The new width of the element.\n        height  // The new height of the element\n    }\n\nAll coordinates are in the parent node's local space, in points."
      },
      "id": {
        "id": "fuse/placedargs",
        "parentId": "fuse",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/placedargs",
        "href": "fuse/placedargs"
      },
      "titles": {
        "indexTitle": "PlacedArgs",
        "fullyQualifiedIndexTitle": "Fuse.PlacedArgs"
      }
    },
    {
      "comment": {
        "brief": "Play bundled .wav files",
        "full": "Play bundled .wav files\n\nThis is intended for playing the small one-shot sounds like button-clicks & notification chimes.\n\nYou'll find this trigger action in the Fuse.Audio package, which have to be referenced from your Uno project file.\nFor example:\n\n    {\n        \"Packages\": [\n            \"Fuse\",\n            \"FuseJS\",\n            \"Fuse.Audio\"\n        ]\n    }\n\n## Example\n\n    <StackPanel Margin=\"20\">\n        <Button Margin=\"10\" Text=\"Test Sound\">\n            <Clicked>\n                <PlaySound File=\"chime.wav\" />\n            </Clicked>\n        </Button>\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/playsound",
        "parentId": "fuse",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/playsound",
        "href": "fuse/playsound"
      },
      "titles": {
        "indexTitle": "PlaySound",
        "fullyQualifiedIndexTitle": "Fuse.PlaySound"
      }
    },
    {
      "id": {
        "id": "fuse/properties",
        "parentId": "fuse",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/properties",
        "href": "fuse/properties"
      },
      "titles": {
        "indexTitle": "Properties",
        "fullyQualifiedIndexTitle": "Fuse.Properties"
      }
    },
    {
      "id": {
        "id": "fuse/propertyhandle",
        "parentId": "fuse",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/propertyhandle",
        "href": "fuse/propertyhandle"
      },
      "titles": {
        "indexTitle": "PropertyHandle",
        "fullyQualifiedIndexTitle": "Fuse.PropertyHandle"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/abs",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/abs",
        "href": "fuse/reactive/abs"
      },
      "titles": {
        "indexTitle": "Abs",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Abs"
      }
    },
    {
      "comment": {
        "brief": "The invserse trigonometric cosine of the input",
        "full": "The invserse trigonometric cosine of the input"
      },
      "id": {
        "id": "fuse/reactive/acos",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/acos",
        "href": "fuse/reactive/acos"
      },
      "titles": {
        "indexTitle": "Acos",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Acos"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/add",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/add",
        "href": "fuse/reactive/add"
      },
      "titles": {
        "indexTitle": "Add",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Add"
      }
    },
    {
      "comment": {
        "brief": "Adjusts the hue of the color.",
        "full": "Adjusts the hue of the color.\n\nThis adds the hue value to the hue in HSL color space. It is wrapped around to remain in the range 0..1."
      },
      "id": {
        "id": "fuse/reactive/adjusthuefunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/adjusthuefunction",
        "href": "fuse/reactive/adjusthuefunction"
      },
      "titles": {
        "indexTitle": "AdjustHueFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.AdjustHueFunction"
      }
    },
    {
      "comment": {
        "brief": "Alternate between true/false values for ranges of integers.",
        "full": "Alternate between true/false values for ranges of integers.\n\n    alternate( value, groupSize )\n\nInput values are rounded to the nearest integer.\n\nExample:\n\n    alternate( value, 3 )\n\nThis will yield true for values 0,1,2, false for 3,4,5, true for 6,7,8, false for 9,10,11, etc."
      },
      "id": {
        "id": "fuse/reactive/alternate",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/alternate",
        "href": "fuse/reactive/alternate"
      },
      "titles": {
        "indexTitle": "Alternate",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Alternate"
      }
    },
    {
      "comment": {
        "brief": "Holds information about an argument to an Expression",
        "full": "Holds information about an argument to an Expression",
        "attributes": {
          "advanced": true
        }
      },
      "id": {
        "id": "fuse/reactive/expression/argument",
        "parentId": "fuse/reactive/expression",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/expression/argument",
        "href": "fuse/reactive/expression/argument"
      },
      "titles": {
        "indexTitle": "Argument",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Argument"
      }
    },
    {
      "comment": {
        "brief": "The invserse trigonometric sine of the input",
        "full": "The invserse trigonometric sine of the input"
      },
      "id": {
        "id": "fuse/reactive/asin",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/asin",
        "href": "fuse/reactive/asin"
      },
      "titles": {
        "indexTitle": "Asin",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Asin"
      }
    },
    {
      "comment": {
        "brief": "The invserse trigonometric tangent of the input",
        "full": "The invserse trigonometric tangent of the input"
      },
      "id": {
        "id": "fuse/reactive/atan",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/atan",
        "href": "fuse/reactive/atan"
      },
      "titles": {
        "indexTitle": "Atan",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Atan"
      }
    },
    {
      "comment": {
        "brief": "The invserse trigonometric tangent of the input components",
        "full": "The invserse trigonometric tangent of the input components\n\n    atan2(y, x)"
      },
      "id": {
        "id": "fuse/reactive/atan2",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/atan2",
        "href": "fuse/reactive/atan2"
      },
      "titles": {
        "indexTitle": "Atan2",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Atan2"
      }
    },
    {
      "comment": {
        "brief": "The inverse trigonometric tangent of the input components. Like `atan2` but uses the input vector for the X and Y values.",
        "full": "The inverse trigonometric tangent of the input components. Like `atan2` but uses the input vector for the X and Y values.\n\n    atanVector( v ) == atan2( v.Y, v.X )"
      },
      "id": {
        "id": "fuse/reactive/atanvector",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/atanvector",
        "href": "fuse/reactive/atanvector"
      },
      "titles": {
        "indexTitle": "AtanVector",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.AtanVector"
      }
    },
    {
      "comment": {
        "brief": "Functions for modifying color values.",
        "full": "Functions for modifying color values.\n\nColors in Fuse are represented as RGBA values. A `float3` converts to a `float4` by having a `1` implicitly added as the alpha value. Hex strings can also convert to color values.\n\nMost of the operations are calculated in HSL color space, first by converting the RGB value to HSL, performing the operation, and converting back to RGB.  The alpha value is not modified by RGB <=> HSL conversions.\n\nClamping is, in general, not done on the inputs, intermediaries, or outputs. This means you may end up with RGB values outside of the 0..1 range. This ensures that color information is not prematurely lost when performing multiplate operations.\n\n[subclass Fuse.Reactive.BinaryColorFunction]\n\nTo work directly with HSL values you can use the `hslaToRgba` and `rgbaToHsla` functions."
      },
      "id": {
        "id": "fuse/reactive/binarycolorfunction",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/binarycolorfunction",
        "href": "fuse/reactive/binarycolorfunction"
      },
      "titles": {
        "indexTitle": "BinaryColorFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.BinaryColorFunction"
      }
    },
    {
      "comment": {
        "brief": "[subclass Fuse.Reactive.BinaryFloatOperator]",
        "full": "[subclass Fuse.Reactive.BinaryFloatOperator]"
      },
      "id": {
        "id": "fuse/reactive/binaryfloatoperator",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/binaryfloatoperator",
        "href": "fuse/reactive/binaryfloatoperator"
      },
      "titles": {
        "indexTitle": "BinaryFloatOperator",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.BinaryFloatOperator"
      }
    },
    {
      "comment": {
        "brief": "Base class for reactive functions/operators that take two arguments/operands.",
        "full": "Base class for reactive functions/operators that take two arguments/operands."
      },
      "id": {
        "id": "fuse/reactive/binaryoperator",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/binaryoperator",
        "href": "fuse/reactive/binaryoperator"
      },
      "titles": {
        "indexTitle": "BinaryOperator",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.BinaryOperator"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/capsobject",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/capsobject",
        "href": "fuse/reactive/capsobject"
      },
      "titles": {
        "indexTitle": "CapsObject",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.CapsObject"
      }
    },
    {
      "comment": {
        "brief": "Specifies a constant and an associated visual tree that will be used with @Match.",
        "full": "Specifies a constant and an associated visual tree that will be used with @Match.\n\nSee @Match for more info."
      },
      "id": {
        "id": "fuse/reactive/case",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/case",
        "href": "fuse/reactive/case"
      },
      "titles": {
        "indexTitle": "Case",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Case"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/ceil",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/ceil",
        "href": "fuse/reactive/ceil"
      },
      "titles": {
        "indexTitle": "Ceil",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Ceil"
      }
    },
    {
      "comment": {
        "brief": "Restricts the range of a value to between two numbers.",
        "full": "Restricts the range of a value to between two numbers.\n\n    clamp( value, min, max)\n\nReturns\n- `min` when `value < min`\n- `max` when `value > max`\n- `value` otherwise\n\nValue may be a 1-4 component value. `min` and `max` must both be a single value."
      },
      "id": {
        "id": "fuse/reactive/clamp",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/clamp",
        "href": "fuse/reactive/clamp"
      },
      "titles": {
        "indexTitle": "Clamp",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Clamp"
      }
    },
    {
      "comment": {
        "brief": "Captures the named UX objects and dependencies in the scope and sends them to a script\nevent when ready.",
        "full": "Captures the named UX objects and dependencies in the scope and sends them to a script\nevent when ready."
      },
      "id": {
        "id": "fuse/reactive/closure",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/closure",
        "href": "fuse/reactive/closure"
      },
      "titles": {
        "indexTitle": "Closure",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Closure"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/closureargs",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/closureargs",
        "href": "fuse/reactive/closureargs"
      },
      "titles": {
        "indexTitle": "ClosureArgs",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.ClosureArgs"
      }
    },
    {
      "comment": {
        "brief": "Base class for UX expression functions that take arguments and compute a value from them.",
        "full": "Base class for UX expression functions that take arguments and compute a value from them.\n\nThis is the preferred base for most functions unless they have special needs to track whether/when arguments are set and/or lost.\n\nOnly a conctructor and the `Compute` method need to be defined."
      },
      "id": {
        "id": "fuse/reactive/computeexpression",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/computeexpression",
        "href": "fuse/reactive/computeexpression"
      },
      "titles": {
        "indexTitle": "ComputeExpression",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.ComputeExpression"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/concat",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/concat",
        "href": "fuse/reactive/concat"
      },
      "titles": {
        "indexTitle": "Concat",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Concat"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/conditional",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/conditional",
        "href": "fuse/reactive/conditional"
      },
      "titles": {
        "indexTitle": "Conditional",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Conditional"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/constant",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/constant",
        "href": "fuse/reactive/constant"
      },
      "titles": {
        "indexTitle": "Constant",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Constant"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/constantexpression",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/constantexpression",
        "href": "fuse/reactive/constantexpression"
      },
      "titles": {
        "indexTitle": "ConstantExpression",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.ConstantExpression"
      }
    },
    {
      "comment": {
        "brief": "The trigonometric cosine of the input angle (in radians)",
        "full": "The trigonometric cosine of the input angle (in radians)"
      },
      "id": {
        "id": "fuse/reactive/cos",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/cos",
        "href": "fuse/reactive/cos"
      },
      "titles": {
        "indexTitle": "Cos",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Cos"
      }
    },
    {
      "comment": {
        "brief": "Reduces the lightness of a color.",
        "full": "Reduces the lightness of a color.\n\nThis subtracts the lightness value in HSL color space.\n\nThe result is not clamped; refer to @BinaryColorFunction."
      },
      "id": {
        "id": "fuse/reactive/darkenfunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/darkenfunction",
        "href": "fuse/reactive/darkenfunction"
      },
      "titles": {
        "indexTitle": "DarkenFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.DarkenFunction"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/data",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/data",
        "href": "fuse/reactive/data"
      },
      "titles": {
        "indexTitle": "Data",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Data"
      }
    },
    {
      "comment": {
        "brief": "Data bindings allow you to bind properties on UX markup objects to values coming from\na @JavaScript or other data context.",
        "full": "Data bindings allow you to bind properties on UX markup objects to values coming from\na @JavaScript or other data context.\n\nData bindings are most easily expressed in UX Markup using the `{expression}` syntax, where `expression` is\nthe binding path, like so:\n\n    <Text Value=\"{textKey}\" />\n\nData bindings can also be declared explicitly. Explicit databindings allow you\nto specify a default value that is used before the data binding is resolved:\n\n    <Panel ux:Name=\"panel1\" Width=\"100\" />\n    <DataBinding Target=\"panel1.Width\" Key=\"panelWidth\" />\n\n> Note: The expression passed to `Key` in explicit mode is by default in the data scope. To reference global names, escape it using `{= }`\n\nThe above code will use `100` as the default value for `panel1.Width` until the `panelWidth`\ndata is resolved.",
        "attributes": {
          "topic": "Data binding"
        }
      },
      "id": {
        "id": "fuse/reactive/databinding",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/databinding",
        "href": "fuse/reactive/databinding"
      },
      "titles": {
        "indexTitle": "DataBinding",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.DataBinding"
      }
    },
    {
      "comment": {
        "brief": "Binds to the prime context data of this node.",
        "full": "Binds to the prime context data of this node.\n\nBehaviors like @With, @Each, and @Instance introduce a prime data context for their children.  @JavaScript and the `Model` tag do not introduce a prime data context.\n\nUse `data()` when you wish to bind directly to the prime data context. This is for when your data contains a simple value rather than a data structure.\n\n    <JavaScript>\n        exports.items = Observable(1,2,3)\n    </JavaScript>\n    <Each Items=\"{items}\">\n        <Text Value=\"{= data() }\"/>\n    </Each>"
      },
      "id": {
        "id": "fuse/reactive/datafunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/datafunction",
        "href": "fuse/reactive/datafunction"
      },
      "titles": {
        "indexTitle": "DataFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.DataFunction"
      }
    },
    {
      "comment": {
        "brief": "Binds to a resource with the key provided in a context variable. This allows selecting resources from @JavaScript by key name.",
        "full": "Binds to a resource with the key provided in a context variable. This allows selecting resources from @JavaScript by key name.\n\nIn this example three different fonts are created as resources. The font is selected by name in the exported JavaScript items.\n\n    <Font File=\"../../Assets/fonts/Roboto-Bold.ttf\" ux:Key=\"Bold\"/>\n    <Font File=\"../../Assets/fonts/Roboto-Regular.ttf\" ux:Key=\"Regular\"/>\n    <Font File=\"../../Assets/fonts/Roboto-Italic.ttf\" ux:Key=\"Italic\"/>\n\n    <JavaScript>\n        exports.items = [\n            { font: \"Bold\" },\n            { font: \"Regular\" },\n            { font: \"Italic\" },\n        ]\n    </JavaScript>\n    <StackPanel>\n        <Each Items=\"{items}\">\n            <Text Value=\"Sample Text\" Font=\"{DataToResource font}\"/>\n        </Each>\n    </StackPanel>\n\n`{DataToResource variableKey}` is similar to `{Resource key}`, except it allows a variable key name instead of a static one."
      },
      "id": {
        "id": "fuse/reactive/datatoresource",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/datatoresource",
        "href": "fuse/reactive/datatoresource"
      },
      "titles": {
        "indexTitle": "DataToResource",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.DataToResource"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/degreestoradians",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/degreestoradians",
        "href": "fuse/reactive/degreestoradians"
      },
      "titles": {
        "indexTitle": "DegreesToRadians",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.DegreesToRadians"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/javascript/dependency",
        "parentId": "fuse/reactive/javascript",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/javascript/dependency",
        "href": "fuse/reactive/javascript/dependency"
      },
      "titles": {
        "indexTitle": "Dependency",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Dependency"
      }
    },
    {
      "comment": {
        "brief": "Decreases the saturation of a color.",
        "full": "Decreases the saturation of a color.\n\nThis subtracts the saturation value in HSL color space.\n\nThe result is not clamped; refer to @BinaryColorFunction."
      },
      "id": {
        "id": "fuse/reactive/desaturatefunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/desaturatefunction",
        "href": "fuse/reactive/desaturatefunction"
      },
      "titles": {
        "indexTitle": "DesaturateFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.DesaturateFunction"
      }
    },
    {
      "comment": {
        "brief": "Provides information about the device.",
        "full": "Provides information about the device.\n\nUse the global `Device` variable to access these reactive variables. For example, to include something only on Android:\n\n    <Instance IsEnabled=\"Device.isAndroid\">\n        <CameraView/>\n    </Instance>\n\nThe properties are:\n    - `isAndroid` (bool): True if running on Android OS, false otherwise\n    - `isIOS` (bool): True if running on iOS OS, false otherwise\n    - `isMac` (bool): True if running on Mac OS, false otherwise\n    - `isWindows` (bool): True if running on Windows OS, false otherwise\n    - `isPreview` (bool): True if running inside Preview\n\nOn iOS and Android the following are also available:\n    - `osVersion` (int3): (major, minor, revision) Version of the operating system. (Android: This is for information, stats, and/or debug purposes only. As it doesn't reliably reflect any system features it should not be used for any conditionals.)\n\nOn Android:\n    - `apiLevel` (int): API Level supported by the device"
      },
      "id": {
        "id": "fuse/reactive/devicecaps",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/devicecaps",
        "href": "fuse/reactive/devicecaps"
      },
      "titles": {
        "indexTitle": "DeviceCaps",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.DeviceCaps"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/divide",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/divide",
        "href": "fuse/reactive/divide"
      },
      "titles": {
        "indexTitle": "Divide",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Divide"
      }
    },
    {
      "comment": {
        "brief": "Displays a collection of objects using the given template(s) for each item.",
        "full": "Displays a collection of objects using the given template(s) for each item.\n\nThe children of an `Each` tag represent a template that will be \"projected\" for each item in the collection\nspecified by the `Items` property. The projected item then becomes the data context for that instance, so\ndata-binding can be specified relative to the item itself rather than having to index the collection explicitly.\n\nNote that each subtree projected by `Each` lives in its own scope.\nThis means that the children of an `Each` cannot be accessed from outside it.\nYou can, however, access nodes declared outside the `Each` from the inside.\n\n## Example\n\n    <JavaScript>\n        module.exports = {\n            items: [\n                { name: \"Jake\", age: 24 },\n                { name: \"Julie\", age: 25 },\n                { name: \"Jerard\", age: 26 }\n            ]\n        };\n    </JavaScript>\n    <StackPanel>\n        <Each Items=\"{items}\">\n            <StackPanel>\n                <Text Value=\"{name}\" />\n                <Text Value=\"{age}\" />\n            </StackPanel>\n        </Each>\n    </StackPanel>\n\n# Using `Each` with `ux:Template`\n\nIf you are using `Each` in a custom made component, you can increase the cusomizability of that component by allowing it to take in custom template objects which it can use instead of the default template the `Each` is using. To do this, you need to do two things:\n\n * Give the `TemplateSource` property an element that can recieve templates (in the case of custom made components, that would be your custom component's class)\n * Specify the template name `Each` will be looking for, using the property `TemplateKey`\n\nIf a template isn't specified, the child element of `Each` will be used as a de-facto template.\n\n## Example\nThe following example demonstrates passing custom templates into a class for an `Each` to use:\n\n    <StackPanel ux:Class=\"CoolRepeater\" Background=\"#FAD\">\n        <Each TemplateSource=\"this\" TemplateKey=\"Item\" Count=\"20\">\n            <Text>No template is given</Text>\n        </Each>\n    </StackPanel>\n    <CoolRepeater>\n        <Text ux:Template=\"Item\">Hello, world!</Text>\n    </CoolRepeater>\n\nNotice that if you remove the \"Hello, world!\" text that is our custom template, the `Each` will fall back to using the child as the template.\n\nIf you want the ability to control the template on a per-item basis, the similar `MatchKey`-property can be used:\n\n    <JavaScript>\n        var Observable = require(\"FuseJS/Observable\");\n\n        module.exports.posts = Observable(\n            {postType: \"text\", body: \"Lorem ipsum\", title: \"Hello, world\"},\n            {postType: \"quote\", quote: \"Stuff\", title: \"A quote\"}\n        );\n    </JavaScript>\n\n    <ScrollView>\n        <StackPanel>\n            <Each Items=\"{posts}\" MatchKey=\"postType\">\n                <StackPanel ux:Template=\"text\" Height=\"100\" Color=\"#FFF\" Margin=\"10\" Padding=\"10\">\n                    <Shadow Distance=\"3\" />\n                    <Text FontSize=\"25\" Value=\"{title}\" />\n                    <Text FontSize=\"15\" Value=\"{body}\" TextWrapping=\"Wrap\" />\n                </StackPanel>\n                <DockPanel ux:Template=\"quote\" Height=\"200\" Color=\"#FFF\" Margin=\"10\" Padding=\"10\">\n                    <Shadow Distance=\"3\" />\n                    <Text FontSize=\"25\" Value=\"{title}\" Dock=\"Top\" />\n                    <Text FontSize=\"50\" Value=\"”\" Dock=\"Left\" />\n                    <Text FontSize=\"15\" Margin=\"10\" Value=\"{quote}\" />\n                </DockPanel>\n            </Each>\n        </StackPanel>\n    </ScrollView>\n\n`MatchKey` works by looking for a property in the data context of each item from `Items`.\nThe value of this property is then used to determine the template to use for the current item.\nIn the above example, we store the template we want to use in the property `postType`, which will appear in the data context of each item being iterated."
      },
      "id": {
        "id": "fuse/reactive/each",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/each",
        "href": "fuse/reactive/each"
      },
      "titles": {
        "indexTitle": "Each",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Each"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/endswith",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/endswith",
        "href": "fuse/reactive/endswith"
      },
      "titles": {
        "indexTitle": "EndsWith",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.EndsWith"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/equal",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/equal",
        "href": "fuse/reactive/equal"
      },
      "titles": {
        "indexTitle": "Equal",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Equal"
      }
    },
    {
      "comment": {
        "brief": "True if the rounded value is even, false otherwise",
        "full": "True if the rounded value is even, false otherwise"
      },
      "id": {
        "id": "fuse/reactive/even",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/even",
        "href": "fuse/reactive/even"
      },
      "titles": {
        "indexTitle": "Even",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Even"
      }
    },
    {
      "comment": {
        "brief": "Event bindings allows binding events to to JavaScript functions.",
        "full": "Event bindings allows binding events to to JavaScript functions.\n\nYou can hook up event handlers to call JavaScript functions with similar syntax to data bindings:\n\n    <JavaScript>\n        module.exports = {\n            clickHandler: function (args) {\n                console.log(\"I was clicked: \" + JSON.stringify(args));\n            }\n        };\n    </JavaScript>\n    <Button Clicked=\"{clickHandler}\" Text=\"Click me!\" />\n\nFor more information, see @DataBinding.",
        "attributes": {
          "topic": "Event binding"
        }
      },
      "id": {
        "id": "fuse/reactive/eventbinding",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/eventbinding",
        "href": "fuse/reactive/eventbinding"
      },
      "titles": {
        "indexTitle": "EventBinding",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.EventBinding"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/exp",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/exp",
        "href": "fuse/reactive/exp"
      },
      "titles": {
        "indexTitle": "Exp",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Exp"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/exp2",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/exp2",
        "href": "fuse/reactive/exp2"
      },
      "titles": {
        "indexTitle": "Exp2",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Exp2"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/expression",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/expression",
        "href": "fuse/reactive/expression"
      },
      "titles": {
        "indexTitle": "Expression",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Expression"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/expressionbinding",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/expressionbinding",
        "href": "fuse/reactive/expressionbinding"
      },
      "titles": {
        "indexTitle": "ExpressionBinding",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.ExpressionBinding"
      }
    },
    {
      "comment": {
        "brief": "A base class for common expression subscriptions. This handles the basic bookkeeping. Derived classes should implement `OnArguments` (coming from the base class). The members `ClearData` and `SetData` should be called to set the output state.",
        "full": "A base class for common expression subscriptions. This handles the basic bookkeeping. Derived classes should implement `OnArguments` (coming from the base class). The members `ClearData` and `SetData` should be called to set the output state.\n\nUsing this directly is unsual, consider `ComputeExpression` instead.\n\nDerived classes should implement `OnArguments`",
        "attributes": {
          "advanced": true
        }
      },
      "id": {
        "id": "fuse/reactive/expressionlistener",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/expressionlistener",
        "href": "fuse/reactive/expressionlistener"
      },
      "titles": {
        "indexTitle": "ExpressionListener",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.ExpressionListener"
      }
    },
    {
      "comment": {
        "brief": "Subscribes to many argument expressions used in higher level functions. This collects common\nbehaviour and means to simplify higher-level code.",
        "full": "Subscribes to many argument expressions used in higher level functions. This collects common\nbehaviour and means to simplify higher-level code.\n\nNOTE: The use of InnerListener is questionable but unavoidable at this time.\nhttps://github.com/fuse-open/fuselibs/issues/785\n\n@hide"
      },
      "id": {
        "id": "fuse/reactive/expressionsubscriber",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/expressionsubscriber",
        "href": "fuse/reactive/expressionsubscriber"
      },
      "titles": {
        "indexTitle": "ExpressionSubscriber",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.ExpressionSubscriber"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/floor",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/floor",
        "href": "fuse/reactive/floor"
      },
      "titles": {
        "indexTitle": "Floor",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Floor"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/fract",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/fract",
        "href": "fuse/reactive/fract"
      },
      "titles": {
        "indexTitle": "Fract",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Fract"
      }
    },
    {
      "comment": {
        "brief": "An internal module providing the Uno callback for the `Diagnostics.js` module.",
        "full": "An internal module providing the Uno callback for the `Diagnostics.js` module."
      },
      "id": {
        "id": "fuse/reactive/fusejs/diagnosticsimplmodule",
        "parentId": "fuse/reactive/fusejs",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/fusejs/diagnosticsimplmodule",
        "href": "fuse/reactive/fusejs/diagnosticsimplmodule"
      },
      "titles": {
        "indexTitle": "DiagnosticsImplModule",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.FuseJS.DiagnosticsImplModule"
      }
    },
    {
      "comment": {
        "brief": "@hide",
        "full": "@hide"
      },
      "id": {
        "id": "fuse/reactive/fusejs/http",
        "parentId": "fuse/reactive/fusejs",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/fusejs/http",
        "href": "fuse/reactive/fusejs/http"
      },
      "titles": {
        "indexTitle": "Http",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.FuseJS.Http"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/greaterorequal",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/greaterorequal",
        "href": "fuse/reactive/greaterorequal"
      },
      "titles": {
        "indexTitle": "GreaterOrEqual",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.GreaterOrEqual"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/greaterthan",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/greaterthan",
        "href": "fuse/reactive/greaterthan"
      },
      "titles": {
        "indexTitle": "GreaterThan",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.GreaterThan"
      }
    },
    {
      "comment": {
        "brief": "Converts a color from HSLA to RGBA.",
        "full": "Converts a color from HSLA to RGBA.\n\nSee @RgbaToHslaFunction for notes on the format."
      },
      "id": {
        "id": "fuse/reactive/hslatorgbafunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/hslatorgbafunction",
        "href": "fuse/reactive/hslatorgbafunction"
      },
      "titles": {
        "indexTitle": "HslaToRgbaFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.HslaToRgbaFunction"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/indexfunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/indexfunction",
        "href": "fuse/reactive/indexfunction"
      },
      "titles": {
        "indexTitle": "IndexFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.IndexFunction"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/indexof",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/indexof",
        "href": "fuse/reactive/indexof"
      },
      "titles": {
        "indexTitle": "IndexOf",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.IndexOf"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/infixoperator",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/infixoperator",
        "href": "fuse/reactive/infixoperator"
      },
      "titles": {
        "indexTitle": "InfixOperator",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.InfixOperator"
      }
    },
    {
      "comment": {
        "brief": "Using this class directly is unusual. `ComputeExpression` is the preferred option for functions, and `ExpressionListener` for when that doesn't apply.",
        "full": "Using this class directly is unusual. `ComputeExpression` is the preferred option for functions, and `ExpressionListener` for when that doesn't apply.\n\nRelying on this behaviour is bad. The Observable support was only intended for bindings. All other\nvalues should use IExpression's facilities. The unintended support may be removed in the future.\n\nImplements `IListener`, and forward incoming values to the protected `OnNewData` method.\nIf the incoming value is an observable, a subscription is created and the value of that observable\nis forwarded to the `OnNewData` method instead.\n\nExtenders should override `OnNewData()`, `OnLostData` and `Dispose()`.\n\n@hide"
      },
      "id": {
        "id": "fuse/reactive/innerlistener",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/innerlistener",
        "href": "fuse/reactive/innerlistener"
      },
      "titles": {
        "indexTitle": "InnerListener",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.InnerListener"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/insert",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/insert",
        "href": "fuse/reactive/insert"
      },
      "titles": {
        "indexTitle": "Insert",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Insert"
      }
    },
    {
      "comment": {
        "brief": "Creates and inserts an instance of the given template(s).  The templates are only created when the node is rooted.",
        "full": "Creates and inserts an instance of the given template(s).  The templates are only created when the node is rooted.\n\nYou may optionally assign an `Item` to the instance, making this function similar to `Each` with a single item."
      },
      "id": {
        "id": "fuse/reactive/instance",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/instance",
        "href": "fuse/reactive/instance"
      },
      "titles": {
        "indexTitle": "Instance",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Instance"
      }
    },
    {
      "comment": {
        "brief": "Base class for behaviors that can instantiate templates from a source.",
        "full": "Base class for behaviors that can instantiate templates from a source.\n\nThis class can not be directly instantiated or inherited because its constructors are internal. Use one of the\nprovided derived classes instead: @Each or @Instance."
      },
      "id": {
        "id": "fuse/reactive/instantiator",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/instantiator",
        "href": "fuse/reactive/instantiator"
      },
      "titles": {
        "indexTitle": "Instantiator",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Instantiator"
      }
    },
    {
      "comment": {
        "brief": "Common base for functions that work with an item in an instantiator",
        "full": "Common base for functions that work with an item in an instantiator"
      },
      "id": {
        "id": "fuse/reactive/instantiatorfunction",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/instantiatorfunction",
        "href": "fuse/reactive/instantiatorfunction"
      },
      "titles": {
        "indexTitle": "InstantiatorFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.InstantiatorFunction"
      }
    },
    {
      "comment": {
        "brief": "`true` if running on an Android device",
        "full": "`true` if running on an Android device"
      },
      "id": {
        "id": "fuse/reactive/isandroidfunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/isandroidfunction",
        "href": "fuse/reactive/isandroidfunction"
      },
      "titles": {
        "indexTitle": "IsAndroidFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.IsAndroidFunction"
      }
    },
    {
      "comment": {
        "brief": "Test if a value is defined the context, returning `true` or `false`.",
        "full": "Test if a value is defined the context, returning `true` or `false`.\n\nThis can be used to check if a value is available yet in the data context, for example `isDefined({a})`.\n\nIf the value exists but is null then `true` will still be returned. Consider using `isNull` if you wish to exclude null as well.",
        "attributes": {
          "advanced": true
        }
      },
      "id": {
        "id": "fuse/reactive/isdefined",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/isdefined",
        "href": "fuse/reactive/isdefined"
      },
      "titles": {
        "indexTitle": "IsDefined",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.IsDefined"
      }
    },
    {
      "comment": {
        "brief": "`true` if running on a desktop",
        "full": "`true` if running on a desktop"
      },
      "id": {
        "id": "fuse/reactive/isdesktopfunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/isdesktopfunction",
        "href": "fuse/reactive/isdesktopfunction"
      },
      "titles": {
        "indexTitle": "IsDesktopFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.IsDesktopFunction"
      }
    },
    {
      "comment": {
        "brief": "`true` if running on an iOS device",
        "full": "`true` if running on an iOS device"
      },
      "id": {
        "id": "fuse/reactive/isiosfunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/isiosfunction",
        "href": "fuse/reactive/isiosfunction"
      },
      "titles": {
        "indexTitle": "IsIOSFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.IsIOSFunction"
      }
    },
    {
      "comment": {
        "brief": "`true` if running on an Mobile device",
        "full": "`true` if running on an Mobile device"
      },
      "id": {
        "id": "fuse/reactive/ismobilefunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/ismobilefunction",
        "href": "fuse/reactive/ismobilefunction"
      },
      "titles": {
        "indexTitle": "IsMobileFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.IsMobileFunction"
      }
    },
    {
      "comment": {
        "brief": "Returns false if the value exists and is non-null, true otherwise.",
        "full": "Returns false if the value exists and is non-null, true otherwise.\n\nThis is the same condition used in the NullCoalesce operator:\n\n    expr ?? res\n\nIs the same as:\n\n    isNull(expr) ? res : expr"
      },
      "id": {
        "id": "fuse/reactive/isnull",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/isnull",
        "href": "fuse/reactive/isnull"
      },
      "titles": {
        "indexTitle": "IsNull",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.IsNull"
      }
    },
    {
      "comment": {
        "brief": "`true` if running on OSX",
        "full": "`true` if running on OSX"
      },
      "id": {
        "id": "fuse/reactive/isosxfunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/isosxfunction",
        "href": "fuse/reactive/isosxfunction"
      },
      "titles": {
        "indexTitle": "IsOSXFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.IsOSXFunction"
      }
    },
    {
      "comment": {
        "brief": "`true` if running on Windows",
        "full": "`true` if running on Windows"
      },
      "id": {
        "id": "fuse/reactive/iswindowsfunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/iswindowsfunction",
        "href": "fuse/reactive/iswindowsfunction"
      },
      "titles": {
        "indexTitle": "IsWindowsFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.IsWindowsFunction"
      }
    },
    {
      "comment": {
        "brief": "The `JavaScript` tag is used to run JavaScript and assigns its `module.exports` as data context for the parent visual.",
        "full": "The `JavaScript` tag is used to run JavaScript and assigns its `module.exports` as data context for the parent visual.\n\n**Note:** ECMAScript 5.1 is the only JavaScript version that is supported across all platforms.\nWhile newer JavaScript features might work on some devices, this can't be guaranteed (particularly for earlier iOS versions).\n\n## Getting started\n\nJavaScript can be used in UX markup through the `JavaScript` class, either by pointing to external JavaScript files, like this:\n\n\t<JavaScript File=\"SomeCode.js\" />\n\nOr by inlining the JavaScript code in the tag, like this:\n\n\t<JavaScript>\n\t\tconsole.log(\"Hello, FuseJS!\");\n\t</JavaScript>\n\n## About FuseJS \n\nFuseJS is a JavaScript framework for writing cross-platform mobile app business logic. It consists of a bunch of classes that covers\nthe basic functionality required for creating native mobile apps, as well as the @Observable class which lets you expose data to the UI in a functional reactive way.\n\n## Modules\n\nFuseJS implements the <a href=\"http://www.commonjs.org/\">CommonJS</a> module system. Each code file or inline snippet is a _module_.\n\nIn order to expose data and functions to other modules, one can add them to the `module.exports` object:\n\n\t<JavaScript>\n\t\tmodule.exports = {\n\t\t\texportedSymbol: \"Hello, rest of the world!\"\n\t\t};\n\t</JavaScript>\n\nFailing to export from modules will make it impossible to reach defined data inside the module:\n\n\t<JavaScript>\n\t\tvar data = [1, 2, 3];\n\t\tvar invisible = \"I'm invisible\";\n\n\t\tmodule.exports = {\n\t\t\tdata: data\n\t\t};\n\t</JavaScript>\n\nThis is good for hiding implementation details from other calling JavaScript modules and UX code.\n\n## Importing modules\n\nEach code file (or inline snippet) defines a module.\n\nYou can import JavaScript modules by their file name. To do this, make sure your JavaScript files are included in your .unoproj file as \"Bundle\" files:\n\n\t\"Includes\": [\n\t\t\"yourJavaScriptFile.js:Bundle\"\n\t\t..other files ..\n\t]\n\nor if you want to make all JavaScript files be includes as bundled files:\n\n\t\"Includes\": [\n\t\t\"**.js:Bundle\"\n\t]\n\nThen, you can require using the JavaScript file name:\n\n\tvar myModule = require('/someJavaScriptFile.js');\n\nNote that prefixing the file name with a \"/\" means that we are looking for the file relative to the project root directory. To name a file relative to the current file, prefix with \"./\". By omitting the prefixes, the file name is relative to the project root, or the global module it's in.\n\n\tvar relativeToProjectRoot = require('/SomeComponent');\n\tvar relativeFile = require('./MainView');\n\tvar relativeToRootOrGlobalModule = require('SomeOtherComponent.js');\n\n> Note that you may omit the .js file extension in the file name if you wish\n\n## Module instancing\n\nFuse's treatment of the `<JavaScript>` tag has some important differences from how modules work in the <a href=\"http://www.commonjs.org/\">CommonJS</a> module system.\n\nA module inside a `<JavaScript>` tag (or pointed to in an external file) will be instantiated once *for each time* the surrounding UX scope is instantiated. This means that if the `<JavaScript>` tag is part of a component, each instance of that component will initialise the code and have a separate set of the local variables and exports.\n\n### Cleaning up after modules\n\nIn Fuse, a JavaScript module can correspond to multiple module instances that get created and destroyed on the fly. If your module allocates resources that need manual cleanup, such as creating explicit `Observable` subscriptions, you can assign a handler to `module.disposed` and clean up after yourself there.\n\nExample:\n\n\tvar foo = getSomeGlobalObservable();\n\n\tfunction fooChanged() { ... }\n\t\n\tfoo.addSubscriber(fooChanged);\n\n\t...\n\n\tmodule.disposed = function () {\n\t\tfoo.removeSubscriber(fooChanged)\n\t}\n\n## Design and motivation\n\nThe key design goal of FuseJS is to keep your JavaScript code small, clean and only concerned with the practical functions of your application. Meanwhile\nall things related to UX, such as layout, data presentation, animation and gesture response, is left to declarative UX markup and native UI components.\n\nThe way Fuse separates JavaScript business logic from UX markup presentation has some clear benefits:\n\n* Performance - all the performance critical bits are handled in native code and based on native UI components.\n* Easy - declarative code is easy to read, write and understand even with limited programming knowledge\n* Less error prone - fewer states means fewer things can go wrong\n  * Visual tooling - UX markup can be edited by Fuse tools such as inspectors, timelines and generally cool drag & droppy stuff.\n\nNote that Fuse has tons of declarative APIs (designed for UX markup) that replace the need for controlling animation from JavaScript (i.e. imperatively).\n\nMany other JavaScript frameworks mix imperative UI code, animation and performance critical tasks into JavaScript, hence many people new to FuseJS tend to try\ndoing things this way in the beginning. While most of these things are technically possible in FuseJS, it is discouraged. We recommend taking some\ntime to study the Fuse examples to get a feel for the new way of doing things.\n\nPurifying your code by separating view and logic into UX markup and JavaScript can shrink your code base significantly, make it more maintainable, and allow\nmore effective collaboration between UX designers and developers.\n\nIf you need to write performance-critical business logic, we recommend doing that in native code or alternatively in Uno code instead of in JavaScript.",
        "attributes": {
          "topic": "JavaScript"
        }
      },
      "id": {
        "id": "fuse/reactive/javascript",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/javascript",
        "href": "fuse/reactive/javascript"
      },
      "titles": {
        "indexTitle": "JavaScript",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.JavaScript"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/length",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/length",
        "href": "fuse/reactive/length"
      },
      "titles": {
        "indexTitle": "Length",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Length"
      }
    },
    {
      "comment": {
        "brief": "Calculates the linear interpolation between two values.",
        "full": "Calculates the linear interpolation between two values.\n\n    lerp( from, to, step )\n\nWhen step==0 the result is `from`, when step==1 the result is `to`. Partial values are linearly interpolated. Step values <0 and >1 are also supported.\n\nThe input supports a 1-4 component value for `from` and `to`. The result will be same size.\n`step` must always be a single value."
      },
      "id": {
        "id": "fuse/reactive/lerp",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/lerp",
        "href": "fuse/reactive/lerp"
      },
      "titles": {
        "indexTitle": "Lerp",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Lerp"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/lessorequal",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/lessorequal",
        "href": "fuse/reactive/lessorequal"
      },
      "titles": {
        "indexTitle": "LessOrEqual",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.LessOrEqual"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/lessthan",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/lessthan",
        "href": "fuse/reactive/lessthan"
      },
      "titles": {
        "indexTitle": "LessThan",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.LessThan"
      }
    },
    {
      "comment": {
        "brief": "Binds an expression or value to a name in the data context. This simplifies repeated calculations and allows introduction of new variables.",
        "full": "Binds an expression or value to a name in the data context. This simplifies repeated calculations and allows introduction of new variables.\n\nTo introduce a new value:\n\n    <Let ux:Name=\"a\" Value=\"5\"/>\n\nThe value is now part of the data context:\n\n    <Slider Value=\"{a}\"/>\n\nIt can also be accessed directly outside of the context:\n\n    <Slider Value=\"{Property a.Value}\"/>\n\nIf you are using an expression it's recommended now to use `Expression` instead of `Value`:\n\n    <Let ux:Name=\"p\" Expression=\"{pos} + 5\"/>\n\nThis ensures proper propagation of undefined values.  (This is part of the reason this is an experimental API, since we don't really want to distinguish between Expression and Value, but have no choice at the moment).\n\n## LetType\n\nIf you are creating a value of a specific type, and/or need to use `Change` or other animators, consider using one of the @LetType classes instead, such as @LetFloat or @LetString. They have a cleaner conversion mechanism, leading to fewer surprises.\n\nExperimental since there are some fine details about handling observables, nulls, and expressions that aren't quite defined and might subtlely alter the behaviour. For typical use-cases it should be okay though.",
        "attributes": {
          "experimental": true
        }
      },
      "id": {
        "id": "fuse/reactive/let",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/let",
        "href": "fuse/reactive/let"
      },
      "titles": {
        "indexTitle": "Let",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Let"
      }
    },
    {
      "comment": {
        "brief": "Provides an implementation for `Let` and the various `LetType` forms.\n@hide",
        "full": "Provides an implementation for `Let` and the various `LetType` forms.\n@hide"
      },
      "id": {
        "id": "fuse/reactive/letbase",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/letbase",
        "href": "fuse/reactive/letbase"
      },
      "titles": {
        "indexTitle": "LetBase",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.LetBase"
      }
    },
    {
      "comment": {
        "brief": "A @LetType that specifies a `bool` value.",
        "full": "A @LetType that specifies a `bool` value."
      },
      "id": {
        "id": "fuse/reactive/letbool",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/letbool",
        "href": "fuse/reactive/letbool"
      },
      "titles": {
        "indexTitle": "LetBool",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.LetBool"
      }
    },
    {
      "comment": {
        "brief": "A @LetType that specifies a `float` value.",
        "full": "A @LetType that specifies a `float` value."
      },
      "id": {
        "id": "fuse/reactive/letfloat",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/letfloat",
        "href": "fuse/reactive/letfloat"
      },
      "titles": {
        "indexTitle": "LetFloat",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.LetFloat"
      }
    },
    {
      "comment": {
        "brief": "A @LetType that specifies a `float2` value.",
        "full": "A @LetType that specifies a `float2` value."
      },
      "id": {
        "id": "fuse/reactive/letfloat2",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/letfloat2",
        "href": "fuse/reactive/letfloat2"
      },
      "titles": {
        "indexTitle": "LetFloat2",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.LetFloat2"
      }
    },
    {
      "comment": {
        "brief": "A @LetType that specifies a `float3` value.",
        "full": "A @LetType that specifies a `float3` value."
      },
      "id": {
        "id": "fuse/reactive/letfloat3",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/letfloat3",
        "href": "fuse/reactive/letfloat3"
      },
      "titles": {
        "indexTitle": "LetFloat3",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.LetFloat3"
      }
    },
    {
      "comment": {
        "brief": "A @LetType that specifies a `float4` value.",
        "full": "A @LetType that specifies a `float4` value."
      },
      "id": {
        "id": "fuse/reactive/letfloat4",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/letfloat4",
        "href": "fuse/reactive/letfloat4"
      },
      "titles": {
        "indexTitle": "LetFloat4",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.LetFloat4"
      }
    },
    {
      "comment": {
        "brief": "A @LetType that specifies a `Size` value.",
        "full": "A @LetType that specifies a `Size` value."
      },
      "id": {
        "id": "fuse/reactive/letsize",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/letsize",
        "href": "fuse/reactive/letsize"
      },
      "titles": {
        "indexTitle": "LetSize",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.LetSize"
      }
    },
    {
      "comment": {
        "brief": "A @LetType that specifies a `Size2` value.",
        "full": "A @LetType that specifies a `Size2` value."
      },
      "id": {
        "id": "fuse/reactive/letsize2",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/letsize2",
        "href": "fuse/reactive/letsize2"
      },
      "titles": {
        "indexTitle": "LetSize2",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.LetSize2"
      }
    },
    {
      "comment": {
        "brief": "A @LetType that specifies a `string` value.",
        "full": "A @LetType that specifies a `string` value."
      },
      "id": {
        "id": "fuse/reactive/letstring",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/letstring",
        "href": "fuse/reactive/letstring"
      },
      "titles": {
        "indexTitle": "LetString",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.LetString"
      }
    },
    {
      "comment": {
        "brief": "Provides a bindable value for use in UX. This assists in combining animations and transitions in the UX without needing to use JavaScript intermediates. It is not meant to store application state, being intended only for UI level changes and effects.",
        "full": "Provides a bindable value for use in UX. This assists in combining animations and transitions in the UX without needing to use JavaScript intermediates. It is not meant to store application state, being intended only for UI level changes and effects.\n\nUnlike @Let this enforces a specific value type and is suitable for use with `Change`, `Set`, and other property bindings.\n\nThese values are two-way bindable (like Observables), for example:\n\n    <LetString Value=\"hello\" ux:Name=\"a\"/>\n    <TextInput Value=\"{a}\"/>\n    <Text Value=\"{a}\"/>\n\nTyping in the `TextInput` will modify the value of `a` and update the `Text` value.\n\n## Available types\n\n[subclass Fuse.Reactive.LetType]",
        "attributes": {
          "experimental": true
        }
      },
      "id": {
        "id": "fuse/reactive/lettype_1",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/lettype_1",
        "href": "fuse/reactive/lettype_1"
      },
      "titles": {
        "indexTitle": "LetType<T>",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.LetType<T>"
      }
    },
    {
      "comment": {
        "brief": "Increases the lightness of a color.",
        "full": "Increases the lightness of a color.\n\nThis adds the lightness value in HSL color space.\n\nThe result is not clamped; refer to @BinaryColorFunction."
      },
      "id": {
        "id": "fuse/reactive/lightenfunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/lightenfunction",
        "href": "fuse/reactive/lightenfunction"
      },
      "titles": {
        "indexTitle": "LightenFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.LightenFunction"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/log",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/log",
        "href": "fuse/reactive/log"
      },
      "titles": {
        "indexTitle": "Log",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Log"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/log2",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/log2",
        "href": "fuse/reactive/log2"
      },
      "titles": {
        "indexTitle": "Log2",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Log2"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/logicaland",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/logicaland",
        "href": "fuse/reactive/logicaland"
      },
      "titles": {
        "indexTitle": "LogicalAnd",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.LogicalAnd"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/logicalnot",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/logicalnot",
        "href": "fuse/reactive/logicalnot"
      },
      "titles": {
        "indexTitle": "LogicalNot",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.LogicalNot"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/logicalor",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/logicalor",
        "href": "fuse/reactive/logicalor"
      },
      "titles": {
        "indexTitle": "LogicalOr",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.LogicalOr"
      }
    },
    {
      "comment": {
        "brief": "Represents a reactive look-up operation, with a computed index (number) or key (string).",
        "full": "Represents a reactive look-up operation, with a computed index (number) or key (string).\n\nIndex can be either a number (for IArray lookups) or a string (for IObject lookups).\n\nDiagnostic erros are reported in the following cases:\n* If the collection is an `IArray` and the index is not convertible to a number.\n* If the collection is an `IArray` and the index is not within the bounds of the array.\n* If the colleciton is an `IObject` and the key is not present in the object.\n* If the collection is neither an `IArray` or `IObject`."
      },
      "id": {
        "id": "fuse/reactive/lookup",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/lookup",
        "href": "fuse/reactive/lookup"
      },
      "titles": {
        "indexTitle": "LookUp",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.LookUp"
      }
    },
    {
      "comment": {
        "brief": "Compares a value with a set of constants, and activates/deactivates visual trees associated with those constants.",
        "full": "Compares a value with a set of constants, and activates/deactivates visual trees associated with those constants.\n\n`Match` (in conjunction with @Case) is useful when you want to display one of a number of different visuals\nbased on a certain value. You can think of it like pattern matching and/or switch/case constructs from your\nfavorite programming language.\n\n## Example\n\n    <JavaScript>\n        module.exports = {\n            active: \"blue\"\n        };\n    </JavaScript>\n    <Match Value=\"{active}\">\n        <Case String=\"red\">\n            <Rectangle Fill=\"#f00\" Height=\"50\" Width=\"50\" />\n        </Case>\n        <Case String=\"blue\">\n            <Rectangle Fill=\"#00f\" Height=\"50\" Width=\"50\" />\n        </Case>\n    </Match>"
      },
      "id": {
        "id": "fuse/reactive/match",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/match",
        "href": "fuse/reactive/match"
      },
      "titles": {
        "indexTitle": "Match",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Match"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/max",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/max",
        "href": "fuse/reactive/max"
      },
      "titles": {
        "indexTitle": "Max",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Max"
      }
    },
    {
      "comment": {
        "brief": "Represents a reactive object-member look-up operation.",
        "full": "Represents a reactive object-member look-up operation."
      },
      "id": {
        "id": "fuse/reactive/member",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/member",
        "href": "fuse/reactive/member"
      },
      "titles": {
        "indexTitle": "Member",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Member"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/min",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/min",
        "href": "fuse/reactive/min"
      },
      "titles": {
        "indexTitle": "Min",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Min"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/mod",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/mod",
        "href": "fuse/reactive/mod"
      },
      "titles": {
        "indexTitle": "Mod",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Mod"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/multiply",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/multiply",
        "href": "fuse/reactive/multiply"
      },
      "titles": {
        "indexTitle": "Multiply",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Multiply"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/namedfunctioncall",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/namedfunctioncall",
        "href": "fuse/reactive/namedfunctioncall"
      },
      "titles": {
        "indexTitle": "NamedFunctionCall",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.NamedFunctionCall"
      }
    },
    {
      "comment": {
        "brief": "Creates a `Fuse.NameValuePair` from a name and a value.",
        "full": "Creates a `Fuse.NameValuePair` from a name and a value."
      },
      "id": {
        "id": "fuse/reactive/namevaluepair",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/namevaluepair",
        "href": "fuse/reactive/namevaluepair"
      },
      "titles": {
        "indexTitle": "NameValuePair",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.NameValuePair"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/negate",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/negate",
        "href": "fuse/reactive/negate"
      },
      "titles": {
        "indexTitle": "Negate",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Negate"
      }
    },
    {
      "comment": {
        "brief": "Returns the value if it isn't null otherwise doesn't evaluate.",
        "full": "Returns the value if it isn't null otherwise doesn't evaluate.\n\nThis is a special use function in cases where you need to deal temporarily with null values that later become non-null. Instead of the null creating errors in an expression chain, this causes the expression to not evaluate at all.",
        "attributes": {
          "advanced": true
        }
      },
      "id": {
        "id": "fuse/reactive/nonnull",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/nonnull",
        "href": "fuse/reactive/nonnull"
      },
      "titles": {
        "indexTitle": "NonNull",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.NonNull"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/notequal",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/notequal",
        "href": "fuse/reactive/notequal"
      },
      "titles": {
        "indexTitle": "NotEqual",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.NotEqual"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/nullcoalesce",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/nullcoalesce",
        "href": "fuse/reactive/nullcoalesce"
      },
      "titles": {
        "indexTitle": "NullCoalesce",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.NullCoalesce"
      }
    },
    {
      "comment": {
        "brief": "Creates an `IObject` from an arbitrary number of NameValuePairs.",
        "full": "Creates an `IObject` from an arbitrary number of NameValuePairs.\n\nThe returned object also implements `IArray` with the original ordering of the NameValuePairs.\n\nIn UX expressions, objects are denoted as lists of NameValuePair: `{name1: value1, name2: value2}`.\n\nA single `NameValuePair` also implements `IObject` (but doesn't need this `Object` operator)."
      },
      "id": {
        "id": "fuse/reactive/object",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/object",
        "href": "fuse/reactive/object"
      },
      "titles": {
        "indexTitle": "Object",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Object"
      }
    },
    {
      "comment": {
        "brief": "True if the rounded value is odd, false otherwise",
        "full": "True if the rounded value is odd, false otherwise"
      },
      "id": {
        "id": "fuse/reactive/odd",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/odd",
        "href": "fuse/reactive/odd"
      },
      "titles": {
        "indexTitle": "Odd",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Odd"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/offsetindexfunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/offsetindexfunction",
        "href": "fuse/reactive/offsetindexfunction"
      },
      "titles": {
        "indexTitle": "OffsetIndexFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.OffsetIndexFunction"
      }
    },
    {
      "comment": {
        "brief": "Returns the parameter of the given page (visual), parsed from a JSON string.",
        "full": "Returns the parameter of the given page (visual), parsed from a JSON string.\n\nUsage:\n\n    <Text Value=\"parameter(this).title\" />\n\nThe parameter can be ommited"
      },
      "id": {
        "id": "fuse/reactive/parameter",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/parameter",
        "href": "fuse/reactive/parameter"
      },
      "titles": {
        "indexTitle": "Parameter",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Parameter"
      }
    },
    {
      "comment": {
        "brief": "A series of functions to check the device platform.",
        "full": "A series of functions to check the device platform.\n\n[subclass Fuse.Reactive.PlatformFunction]"
      },
      "id": {
        "id": "fuse/reactive/platformfunction",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/platformfunction",
        "href": "fuse/reactive/platformfunction"
      },
      "titles": {
        "indexTitle": "PlatformFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.PlatformFunction"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/pow",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/pow",
        "href": "fuse/reactive/pow"
      },
      "titles": {
        "indexTitle": "Pow",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Pow"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/property",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/property",
        "href": "fuse/reactive/property"
      },
      "titles": {
        "indexTitle": "Property",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Property"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/propertybinding",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/propertybinding",
        "href": "fuse/reactive/propertybinding"
      },
      "titles": {
        "indexTitle": "PropertyBinding",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.PropertyBinding"
      }
    },
    {
      "comment": {
        "brief": "Base class for reactive functions/operators that take four arguments/operands.",
        "full": "Base class for reactive functions/operators that take four arguments/operands."
      },
      "id": {
        "id": "fuse/reactive/quaternaryoperator",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/quaternaryoperator",
        "href": "fuse/reactive/quaternaryoperator"
      },
      "titles": {
        "indexTitle": "QuaternaryOperator",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.QuaternaryOperator"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/radianstodegrees",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/radianstodegrees",
        "href": "fuse/reactive/radianstodegrees"
      },
      "titles": {
        "indexTitle": "RadiansToDegrees",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.RadiansToDegrees"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/replace",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/replace",
        "href": "fuse/reactive/replace"
      },
      "titles": {
        "indexTitle": "Replace",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Replace"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/resource",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/resource",
        "href": "fuse/reactive/resource"
      },
      "titles": {
        "indexTitle": "Resource",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Resource"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/resourcebinding",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/resourcebinding",
        "href": "fuse/reactive/resourcebinding"
      },
      "titles": {
        "indexTitle": "ResourceBinding",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.ResourceBinding"
      }
    },
    {
      "comment": {
        "brief": "Converts a color from RGBA to HSLA color space.",
        "full": "Converts a color from RGBA to HSLA color space.\n\nThe result is a float4 with this format:\n\n    float4( hue, saturation, lightness, alpha )\n\nValues in HSL are normalized just like in RGB. Hue is 0..1, covering the range 0° to 360°. Saturation and lightness are 0..1. Alpha is 0..1 is copied from the input RGBA value."
      },
      "id": {
        "id": "fuse/reactive/rgbatohslafunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/rgbatohslafunction",
        "href": "fuse/reactive/rgbatohslafunction"
      },
      "titles": {
        "indexTitle": "RgbaToHslaFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.RgbaToHslaFunction"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/round",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/round",
        "href": "fuse/reactive/round"
      },
      "titles": {
        "indexTitle": "Round",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Round"
      }
    },
    {
      "comment": {
        "brief": "Increases the saturation of a color.",
        "full": "Increases the saturation of a color.\n\nThis adds the saturation value in HSL color space.\n\nThe result is not clamped; refer to @BinaryColorFunction."
      },
      "id": {
        "id": "fuse/reactive/saturatefunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/saturatefunction",
        "href": "fuse/reactive/saturatefunction"
      },
      "titles": {
        "indexTitle": "SaturateFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.SaturateFunction"
      }
    },
    {
      "comment": {
        "brief": "Scales the lightness of the color towards white or black.",
        "full": "Scales the lightness of the color towards white or black.\n\nPositive values from 0..1 lerp between the current lightness and `1`.\nNegative values from 0..1 lerp between the current ligthness and `0`.\n\nThe scaling is done in HSL color space."
      },
      "id": {
        "id": "fuse/reactive/scalelightnessfunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/scalelightnessfunction",
        "href": "fuse/reactive/scalelightnessfunction"
      },
      "titles": {
        "indexTitle": "ScaleLightnessFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.ScaleLightnessFunction"
      }
    },
    {
      "comment": {
        "brief": "Scales the saturation of the color towards full or none.",
        "full": "Scales the saturation of the color towards full or none.\n\nPositive values from 0..1 lerp between the current saturation and `1`.\nNegative values from 0..1 lerp between the current saturation and `0`.\n\nThe scaling is done in HSL color space."
      },
      "id": {
        "id": "fuse/reactive/scalesaturationfunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/scalesaturationfunction",
        "href": "fuse/reactive/scalesaturationfunction"
      },
      "titles": {
        "indexTitle": "ScaleSaturationFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.ScaleSaturationFunction"
      }
    },
    {
      "comment": {
        "brief": "Deprecated (< 2017-01-01)",
        "full": "Deprecated (< 2017-01-01)"
      },
      "id": {
        "id": "fuse/reactive/select",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/select",
        "href": "fuse/reactive/select"
      },
      "titles": {
        "indexTitle": "Select",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Select"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/sign",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/sign",
        "href": "fuse/reactive/sign"
      },
      "titles": {
        "indexTitle": "Sign",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Sign"
      }
    },
    {
      "comment": {
        "brief": "For VarArg functions that do not need a custom subscription and can work directly with the\nvalues of the arguments.",
        "full": "For VarArg functions that do not need a custom subscription and can work directly with the\nvalues of the arguments."
      },
      "id": {
        "id": "fuse/reactive/simplevarargfunction",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/simplevarargfunction",
        "href": "fuse/reactive/simplevarargfunction"
      },
      "titles": {
        "indexTitle": "SimpleVarArgFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.SimpleVarArgFunction"
      }
    },
    {
      "comment": {
        "brief": "The trigonometric sine of the input angle (in radians)",
        "full": "The trigonometric sine of the input angle (in radians)"
      },
      "id": {
        "id": "fuse/reactive/sin",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/sin",
        "href": "fuse/reactive/sin"
      },
      "titles": {
        "indexTitle": "Sin",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Sin"
      }
    },
    {
      "comment": {
        "brief": "Returns the first value to propagate from the source expression, and then stops listening.",
        "full": "Returns the first value to propagate from the source expression, and then stops listening."
      },
      "id": {
        "id": "fuse/reactive/snapshot",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/snapshot",
        "href": "fuse/reactive/snapshot"
      },
      "titles": {
        "indexTitle": "Snapshot",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Snapshot"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/split",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/split",
        "href": "fuse/reactive/split"
      },
      "titles": {
        "indexTitle": "Split",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Split"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/sqrt",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/sqrt",
        "href": "fuse/reactive/sqrt"
      },
      "titles": {
        "indexTitle": "Sqrt",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Sqrt"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/startswith",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/startswith",
        "href": "fuse/reactive/startswith"
      },
      "titles": {
        "indexTitle": "StartsWith",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.StartsWith"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/substring",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/substring",
        "href": "fuse/reactive/substring"
      },
      "titles": {
        "indexTitle": "Substring",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Substring"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/subtract",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/subtract",
        "href": "fuse/reactive/subtract"
      },
      "titles": {
        "indexTitle": "Subtract",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Subtract"
      }
    },
    {
      "comment": {
        "brief": "The trigonometric tangent of the input angle (in radians)",
        "full": "The trigonometric tangent of the input angle (in radians)"
      },
      "id": {
        "id": "fuse/reactive/tan",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/tan",
        "href": "fuse/reactive/tan"
      },
      "titles": {
        "indexTitle": "Tan",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Tan"
      }
    },
    {
      "comment": {
        "brief": "Base class for reactive functions/operators that take three arguments/operands.",
        "full": "Base class for reactive functions/operators that take three arguments/operands."
      },
      "id": {
        "id": "fuse/reactive/ternaryoperator",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/ternaryoperator",
        "href": "fuse/reactive/ternaryoperator"
      },
      "titles": {
        "indexTitle": "TernaryOperator",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.TernaryOperator"
      }
    },
    {
      "comment": {
        "brief": "Forces a conversion to floating point. This supports any 1-4 component float vector.",
        "full": "Forces a conversion to floating point. This supports any 1-4 component float vector."
      },
      "id": {
        "id": "fuse/reactive/tofloat",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/tofloat",
        "href": "fuse/reactive/tofloat"
      },
      "titles": {
        "indexTitle": "ToFloat",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.ToFloat"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/tolower",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/tolower",
        "href": "fuse/reactive/tolower"
      },
      "titles": {
        "indexTitle": "ToLower",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.ToLower"
      }
    },
    {
      "comment": {
        "brief": "Forces conversion to a Size or Size2 depending on input size.",
        "full": "Forces conversion to a Size or Size2 depending on input size.\n\nThis is useful when using operators that may not be able to infer the desired types. For example:\n\n    <JavaScript>\n        exports.jsArray = [0.2, 0.4]\n    </JavaScript>\n    <Panel Offset=\"size({jsArray}) * 100%\"/>\n\nThis function follows the conversion rules as though the operand was being converted directly to a `Size` or `Size2` property type. If the input is a `float2`, array, or already a Size2, then it will be converted to a `Size2`, otherwise a `Size` type."
      },
      "id": {
        "id": "fuse/reactive/tosize",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/tosize",
        "href": "fuse/reactive/tosize"
      },
      "titles": {
        "indexTitle": "ToSize",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.ToSize"
      }
    },
    {
      "comment": {
        "brief": "Forces conversion to a string value.",
        "full": "Forces conversion to a string value."
      },
      "id": {
        "id": "fuse/reactive/tostring",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/tostring",
        "href": "fuse/reactive/tostring"
      },
      "titles": {
        "indexTitle": "ToString",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.ToString"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/toupper",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/toupper",
        "href": "fuse/reactive/toupper"
      },
      "titles": {
        "indexTitle": "ToUpper",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.ToUpper"
      }
    },
    {
      "id": {
        "id": "fuse/reactive/trim",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/trim",
        "href": "fuse/reactive/trim"
      },
      "titles": {
        "indexTitle": "Trim",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Trim"
      }
    },
    {
      "comment": {
        "brief": "Rounds to the next whole integer closer to zero",
        "full": "Rounds to the next whole integer closer to zero"
      },
      "id": {
        "id": "fuse/reactive/trunc",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/trunc",
        "href": "fuse/reactive/trunc"
      },
      "titles": {
        "indexTitle": "Trunc",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Trunc"
      }
    },
    {
      "comment": {
        "brief": "Common base for floating point operations",
        "full": "Common base for floating point operations\n\nAll the derived expressions support 1-4 component input values and will return a value of the same size.\n\n[subclass Fuse.Reactive.UnaryFloatOperator]"
      },
      "id": {
        "id": "fuse/reactive/unaryfloatoperator",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/unaryfloatoperator",
        "href": "fuse/reactive/unaryfloatoperator"
      },
      "titles": {
        "indexTitle": "UnaryFloatOperator",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.UnaryFloatOperator"
      }
    },
    {
      "comment": {
        "brief": "Optimized base class for reactive functions/operators that take a single argument/operand.",
        "full": "Optimized base class for reactive functions/operators that take a single argument/operand."
      },
      "id": {
        "id": "fuse/reactive/unaryoperator",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/unaryoperator",
        "href": "fuse/reactive/unaryoperator"
      },
      "titles": {
        "indexTitle": "UnaryOperator",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.UnaryOperator"
      }
    },
    {
      "comment": {
        "brief": "Base class for UX functions that accept a variable number of arguments.",
        "full": "Base class for UX functions that accept a variable number of arguments.\n\nDerived classes must override exaclty one of either `OnNewPartialArguments` or `OnNewArguments`."
      },
      "id": {
        "id": "fuse/reactive/varargfunction",
        "parentId": "fuse/reactive",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/varargfunction",
        "href": "fuse/reactive/varargfunction"
      },
      "titles": {
        "indexTitle": "VarArgFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.VarArgFunction"
      }
    },
    {
      "comment": {
        "brief": "Creates an `IArray` from an arbitrary number of arguments.\nAn `IArray` can be automatically marshalled to any Uno vector type (e.g. `float4`)",
        "full": "Creates an `IArray` from an arbitrary number of arguments.\nAn `IArray` can be automatically marshalled to any Uno vector type (e.g. `float4`)"
      },
      "id": {
        "id": "fuse/reactive/vector",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/vector",
        "href": "fuse/reactive/vector"
      },
      "titles": {
        "indexTitle": "Vector",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.Vector"
      }
    },
    {
      "comment": {
        "brief": "Returns the `W` value of a `float4` value.",
        "full": "Returns the `W` value of a `float4` value."
      },
      "id": {
        "id": "fuse/reactive/vectorw",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/vectorw",
        "href": "fuse/reactive/vectorw"
      },
      "titles": {
        "indexTitle": "VectorW",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.VectorW"
      }
    },
    {
      "comment": {
        "brief": "Returns the `Z` value of a `float3` or `float4` value.",
        "full": "Returns the `Z` value of a `float3` or `float4` value."
      },
      "id": {
        "id": "fuse/reactive/vectorz",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/vectorz",
        "href": "fuse/reactive/vectorz"
      },
      "titles": {
        "indexTitle": "VectorZ",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.VectorZ"
      }
    },
    {
      "comment": {
        "brief": "Active when the number of items in a collection fulfills some criteria.",
        "full": "Active when the number of items in a collection fulfills some criteria.\n\nThe collection is specified with `Items`.\n\n`WhileCount` accepts a combination of properties that form an open or closed range of numbers to test against. The trigger is active while the count of items matches.\n\n- `EqualTo` is used on its own and the item count must match this number.\n- Using just `LessThan` or `LessThanEqual` the count of items must be less than, or less than or equal to, this number.\n- Using juse `GreaterThan` or `GreaterThanEqual` the count of items must be greater than, or greater than or equal to, this number.\n- Using both a `LessThan` or `LessThanEqual` and `GreaterThan` or `GreaterThanEqual` creates a closed range to compare. The number of items must be within this range.\n\nThis example shows how to use @WhileCount and @WhileEmpty with an @Observable:\n\n    <JavaScript>\n        var Observable = require(\"FuseJS/Observable\");\n        module.exports = {\n            friends: Observable(\"Alice\", \"Bob\", \"Courtney\")\n        }\n    </JavaScript>\n    <WhileEmpty Items=\"{friends}\">\n        <Text>Your friends list is empty.</Text>\n    </WhileEmpty>\n    <WhileCount Items=\"{friends}\" EqualTo=\"1\">\n        <Text>Your have 1 friend.</Text>\n    </WhileCount>\n    <WhileCount Items=\"{friends}\" GreaterThan=\"3\" >\n        <Text>You have more than 3 friends.</Text>\n    </WhileCount>\n    <WhileCount Items=\"{friends}\" GreaterThanEqual=\"1\" LessThanEqual=\"3\" >\n        <Text>You have 1-3 friends.</Text>\n    </WhileCount>\n    <WhileCount Items=\"{friends}\" GreaterThanEqual=\"2\" LessThanEqual=\"5\" Invert=\"true\">\n        <Text>You do not have 2-5 friends.</Text>\n    </WhileCount>"
      },
      "id": {
        "id": "fuse/reactive/whilecount",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/whilecount",
        "href": "fuse/reactive/whilecount"
      },
      "titles": {
        "indexTitle": "WhileCount",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.WhileCount"
      }
    },
    {
      "comment": {
        "brief": "Active when the number of items in a collection is 0.",
        "full": "Active when the number of items in a collection is 0.\n\nThis is equivalent to using @WhileCount with `EqualTo=\"0\"`.\n\n## Example\n\nThis example displays the text `Your friends list is empty.` using `WhileEmpty`:\n\n    <JavaScript>\n        var Observable = require(\"FuseJS/Observable\");\n        module.exports = {\n            friends: Observable()\n        }\n    </JavaScript>\n    <WhileEmpty Items=\"{friends}\">\n        <Text>Your friends list is empty.</Text>\n    </WhileEmpty>"
      },
      "id": {
        "id": "fuse/reactive/whileempty",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/whileempty",
        "href": "fuse/reactive/whileempty"
      },
      "titles": {
        "indexTitle": "WhileEmpty",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.WhileEmpty"
      }
    },
    {
      "comment": {
        "brief": "Active when the number of items in a collection is greater than 0.",
        "full": "Active when the number of items in a collection is greater than 0.\n\nThis is opposite of using @WhileEmpty.\n\n## Example\n\nThis example displays the text `You have at least one friend!` using `WhileNotEmpty`:\n\n    <JavaScript>\n        var Observable = require(\"FuseJS/Observable\");\n        module.exports = {\n            friends: Observable(\"Jake\")\n        }\n    </JavaScript>\n    <WhileNotEmpty Items=\"{friends}\">\n        <Text>You have at least one friend!</Text>\n    </WhileNotEmpty>"
      },
      "id": {
        "id": "fuse/reactive/whilenotempty",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/whilenotempty",
        "href": "fuse/reactive/whilenotempty"
      },
      "titles": {
        "indexTitle": "WhileNotEmpty",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.WhileNotEmpty"
      }
    },
    {
      "comment": {
        "brief": "Provides details about the device and view needed for layout.",
        "full": "Provides details about the device and view needed for layout.\n\nThe `window()` function returns an object with reactive properties. \"Window\" is a common term that refers to the entire area the application is using on the device, which is not always the entire screen.\n    - `width` (float):  the width of the window\n    - `height` (float): the height of the window\n    -  `size` (float2): the combined width and height of the window\n    - `safeMargins` (float4): Margins needed on the content of the window to exclude it from all device UI and reserved areas.\n    - `staticMargins` (float4): Like `safeMargins` but does not adjust for popup controls like the soft keyboard.\n    - `deviceMargins` (float4): (Experimental) The margins the device reports as not being complete safe for drawing as something may obstruct the view (such as the rounded corners of an iPhone X)\n\nDrawing anythng but a background (image or brush fill) in the gradient areas is not recommended as it may be obscured by the system UI or the hardware.\n\nRefer to @SafeEdgePanel and [Safe Layout](articles:layout/safe-layout.md) for more information about safe layouts and device margins."
      },
      "id": {
        "id": "fuse/reactive/windowfunction",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/windowfunction",
        "href": "fuse/reactive/windowfunction"
      },
      "titles": {
        "indexTitle": "WindowFunction",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.WindowFunction"
      }
    },
    {
      "comment": {
        "brief": "Represents a scope in which the current data context is narrowed down.",
        "full": "Represents a scope in which the current data context is narrowed down.\n\n`With` is useful when you have a complex data context and you'd like to simplify data-binding. This is\nparticularly useful for \"viewing\" part of a deeply-nested object graph.\n\n## Example\n\n    <JavaScript>\n        module.exports = {\n            complex: {\n                item1: {\n                    subitem1: { name: \"Spongebob\", age: 32 }\n                }\n            }\n        };\n    </JavaScript>\n    <With Data=\"{complex.item1.subitem1}\">\n        <Text Value=\"{name}\" />\n        <Text Value=\"{age}\" />\n    </With>"
      },
      "id": {
        "id": "fuse/reactive/with",
        "parentId": "fuse/reactive",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/reactive/with",
        "href": "fuse/reactive/with"
      },
      "titles": {
        "indexTitle": "With",
        "fullyQualifiedIndexTitle": "Fuse.Reactive.With"
      }
    },
    {
      "comment": {
        "brief": "A common base that provides for translation relative to other nodes.",
        "full": "A common base that provides for translation relative to other nodes."
      },
      "id": {
        "id": "fuse/relativetransform_1",
        "parentId": "fuse",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/relativetransform_1",
        "href": "fuse/relativetransform_1"
      },
      "titles": {
        "indexTitle": "RelativeTransform<TransformMode>",
        "fullyQualifiedIndexTitle": "Fuse.RelativeTransform<TransformMode>"
      }
    },
    {
      "comment": {
        "brief": "Successive events cancel each other out. Only one thing in the tree can be brought into\nview a time/per-frame. This also means that `Node` could be null, indicating this frame\nthere is no more request (in case a request was sent and needs to be cancelled).",
        "full": "Successive events cancel each other out. Only one thing in the tree can be brought into\nview a time/per-frame. This also means that `Node` could be null, indicating this frame\nthere is no more request (in case a request was sent and needs to be cancelled)."
      },
      "id": {
        "id": "fuse/requestbringintoviewargs",
        "parentId": "fuse",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/requestbringintoviewargs",
        "href": "fuse/requestbringintoviewargs"
      },
      "titles": {
        "indexTitle": "RequestBringIntoViewArgs",
        "fullyQualifiedIndexTitle": "Fuse.RequestBringIntoViewArgs"
      }
    },
    {
      "id": {
        "id": "fuse/requiresrootedexception",
        "parentId": "fuse",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/requiresrootedexception",
        "href": "fuse/requiresrootedexception"
      },
      "titles": {
        "indexTitle": "RequiresRootedException",
        "fullyQualifiedIndexTitle": "Fuse.RequiresRootedException"
      }
    },
    {
      "comment": {
        "brief": "Specifies an image file as a data source to be displayed by an @Image element.",
        "full": "Specifies an image file as a data source to be displayed by an @Image element.\n\nThe file pointed to by the `File` property will be added to the app as a bundle file automatically.\n\n## Example\nThis example displays an image from the file `kitten.jpg`:\n\n    <Image>\n        <FileImageSource File=\"kitten.jpg\" />\n    </Image>\n\n## Referencing from JavaScript\n\nWhen building your project, Fuse needs to know which files to bundle with the app.\nSince UX is statically compiled, it will automatically bundle files whose path is hard-coded in one of the UX files in your project.\n\nHowever, if the path comes from JavaScript or some other dynamic data source, it cannot automatically be inferred by the compiler.\nThus, we need to explicitly specify it as a [bundle file](articles:assets/bundle) in our `.unoproj`:\n\n    \"Includes\": [\n        \"assets/kitten.jpg:Bundle\"\n    ]\n\nWe can now use JavaScript to specify the path to the image:\n\n    <JavaScript>\n        module.exports = {\n            image: \"assets/kitten.jpg\"\n        }\n    </JavaScript>\n\n    <Image>\n        <FileImageSource File=\"{image}\" />\n    </Image>"
      },
      "id": {
        "id": "fuse/resources/fileimagesource",
        "parentId": "fuse/resources",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/resources/fileimagesource",
        "href": "fuse/resources/fileimagesource"
      },
      "titles": {
        "indexTitle": "FileImageSource",
        "fullyQualifiedIndexTitle": "Fuse.Resources.FileImageSource"
      }
    },
    {
      "id": {
        "id": "fuse/resources/fileresource",
        "parentId": "fuse/resources",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/resources/fileresource",
        "href": "fuse/resources/fileresource"
      },
      "titles": {
        "indexTitle": "FileResource",
        "fullyQualifiedIndexTitle": "Fuse.Resources.FileResource"
      }
    },
    {
      "comment": {
        "brief": "Provides an image fetched via HTTP which can be displayed by the @Image control.",
        "full": "Provides an image fetched via HTTP which can be displayed by the @Image control.\n\n> *Note* @Image provides a shorthand for this, using its [Url](api:fuse/controls/image/url) property.\n\n## Example\n\n    <Image>\n        <HttpImageSource Url=\"https://upload.wikimedia.org/wikipedia/commons/0/06/Kitten_in_Rizal_Park%2C_Manila.jpg\" />\n    </Image>\n\nTo cache the image to the disk, you can add `DiskCache` attribute and set it to `true` so that the next time we display an image it will no longer be downloaded from the network but use from disk instead."
      },
      "id": {
        "id": "fuse/resources/httpimagesource",
        "parentId": "fuse/resources",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/resources/httpimagesource",
        "href": "fuse/resources/httpimagesource"
      },
      "titles": {
        "indexTitle": "HttpImageSource",
        "fullyQualifiedIndexTitle": "Fuse.Resources.HttpImageSource"
      }
    },
    {
      "comment": {
        "brief": "Provides an image from a source such as a file, url, or other source.",
        "full": "Provides an image from a source such as a file, url, or other source.\n\n## Example\n\nThe following example displays an @Image from a @FileImageSource:\n\n    <Image>\n        <FileImageSource File=\"fuse.png\" />\n    </Image>\n\nA common pattern is to declare `ImageSource`s as global resources, as shown below.\n\n    <FileImageSource ux:Global=\"FuseLogo\" File=\"fuse.png\" />\n\n    <Image Source=\"FuseLogo\" />\n\n## Available image source types:\n\n[subclass Fuse.Resources.ImageSource]"
      },
      "id": {
        "id": "fuse/resources/imagesource",
        "parentId": "fuse/resources",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/resources/imagesource",
        "href": "fuse/resources/imagesource"
      },
      "titles": {
        "indexTitle": "ImageSource",
        "fullyQualifiedIndexTitle": "Fuse.Resources.ImageSource"
      }
    },
    {
      "id": {
        "id": "fuse/resources/imagesourceerrorargs",
        "parentId": "fuse/resources",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/resources/imagesourceerrorargs",
        "href": "fuse/resources/imagesourceerrorargs"
      },
      "titles": {
        "indexTitle": "ImageSourceErrorArgs",
        "fullyQualifiedIndexTitle": "Fuse.Resources.ImageSourceErrorArgs"
      }
    },
    {
      "comment": {
        "brief": "Specifies a hint for how a resource should be managed in memory.",
        "full": "Specifies a hint for how a resource should be managed in memory.\n\nThese settings are suggestions for how a resource may be loaded into memory, how it may be kept in memory, and when it can be unloaded. How these suggestions are interpreted will ultimately depend on the specific resource and what type it is."
      },
      "id": {
        "id": "fuse/resources/memorypolicy",
        "parentId": "fuse/resources",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/resources/memorypolicy",
        "href": "fuse/resources/memorypolicy"
      },
      "titles": {
        "indexTitle": "MemoryPolicy",
        "fullyQualifiedIndexTitle": "Fuse.Resources.MemoryPolicy"
      }
    },
    {
      "comment": {
        "brief": "Used to specify multiple image sources that an @Image element can display at different pixel densities.",
        "full": "Used to specify multiple image sources that an @Image element can display at different pixel densities.\n\nIn order to ensure a given image looks best across multiple screens with different pixel densities,\nit's often useful to be able to specify different pre-scaled versions of an image, instead of just\nspecifying one and relying on image scaling while rendering. This allows Fuse to pick the one that's\nbest suited for a particular screen.\n\n## Example\n\n    <Image StretchMode=\"PointPrefer\">\n        <MultiDensityImageSource>\n            <FileImageSource File=\"Icon.png\" Density=\"1\"/>\n            <FileImageSource File=\"Icon.png@2x.png\" Density=\"2\"/>\n        </MultiDensityImageSource>\n    </Image>"
      },
      "id": {
        "id": "fuse/resources/multidensityimagesource",
        "parentId": "fuse/resources",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/resources/multidensityimagesource",
        "href": "fuse/resources/multidensityimagesource"
      },
      "titles": {
        "indexTitle": "MultiDensityImageSource",
        "fullyQualifiedIndexTitle": "Fuse.Resources.MultiDensityImageSource"
      }
    },
    {
      "id": {
        "id": "fuse/resources/resourcebool",
        "parentId": "fuse/resources",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/resources/resourcebool",
        "href": "fuse/resources/resourcebool"
      },
      "titles": {
        "indexTitle": "ResourceBool",
        "fullyQualifiedIndexTitle": "Fuse.Resources.ResourceBool"
      }
    },
    {
      "id": {
        "id": "fuse/resources/resourcefloat",
        "parentId": "fuse/resources",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/resources/resourcefloat",
        "href": "fuse/resources/resourcefloat"
      },
      "titles": {
        "indexTitle": "ResourceFloat",
        "fullyQualifiedIndexTitle": "Fuse.Resources.ResourceFloat"
      }
    },
    {
      "id": {
        "id": "fuse/resources/resourcefloat2",
        "parentId": "fuse/resources",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/resources/resourcefloat2",
        "href": "fuse/resources/resourcefloat2"
      },
      "titles": {
        "indexTitle": "ResourceFloat2",
        "fullyQualifiedIndexTitle": "Fuse.Resources.ResourceFloat2"
      }
    },
    {
      "id": {
        "id": "fuse/resources/resourcefloat3",
        "parentId": "fuse/resources",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/resources/resourcefloat3",
        "href": "fuse/resources/resourcefloat3"
      },
      "titles": {
        "indexTitle": "ResourceFloat3",
        "fullyQualifiedIndexTitle": "Fuse.Resources.ResourceFloat3"
      }
    },
    {
      "id": {
        "id": "fuse/resources/resourcefloat4",
        "parentId": "fuse/resources",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/resources/resourcefloat4",
        "href": "fuse/resources/resourcefloat4"
      },
      "titles": {
        "indexTitle": "ResourceFloat4",
        "fullyQualifiedIndexTitle": "Fuse.Resources.ResourceFloat4"
      }
    },
    {
      "id": {
        "id": "fuse/resources/resourceobject",
        "parentId": "fuse/resources",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/resources/resourceobject",
        "href": "fuse/resources/resourceobject"
      },
      "titles": {
        "indexTitle": "ResourceObject",
        "fullyQualifiedIndexTitle": "Fuse.Resources.ResourceObject"
      }
    },
    {
      "comment": {
        "brief": "Creates or overrides a resource with the given key.",
        "full": "Creates or overrides a resource with the given key.\n\nNote that static resources are better declared with `ux:Key`. The `ResourceSetter` types are to be used when a dynamic value is needed, or one that cannot be expressed with `ux:Key`.\n\n    <Panel>\n        <string Value=\"Static Page Title\" ux:Key=\"Title\"/>\n    </Panel>\n    <Each Items=\"{items}\">\n        <Panel>\n            <ResourceString Key=\"Title\" Value=\"{pageTitle}\"/>\n        </Panel>\n    </Each>\n\nThe resources created via `ResourceSetter` are local to where they are defined (this is also true of `ux:Key`). Bindings in this node, and its descendents, can bind to the them. Descendents may also provide a new resource with the same `Key`, which overrides it for that part of the UI tree."
      },
      "id": {
        "id": "fuse/resources/resourcesetter_1",
        "parentId": "fuse/resources",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/resources/resourcesetter_1",
        "href": "fuse/resources/resourcesetter_1"
      },
      "titles": {
        "indexTitle": "ResourceSetter<T>",
        "fullyQualifiedIndexTitle": "Fuse.Resources.ResourceSetter<T>"
      }
    },
    {
      "id": {
        "id": "fuse/resources/resourcestring",
        "parentId": "fuse/resources",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/resources/resourcestring",
        "href": "fuse/resources/resourcestring"
      },
      "titles": {
        "indexTitle": "ResourceString",
        "fullyQualifiedIndexTitle": "Fuse.Resources.ResourceString"
      }
    },
    {
      "comment": {
        "brief": "Specifies a @texture2D object to be displayed by an @Image element.",
        "full": "Specifies a @texture2D object to be displayed by an @Image element.\n\n## Example\n\n    <Image>\n        <TextureImageSource Texture=\"MyTexture\" />\n    </Image>"
      },
      "id": {
        "id": "fuse/resources/textureimagesource",
        "parentId": "fuse/resources",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/resources/textureimagesource",
        "href": "fuse/resources/textureimagesource"
      },
      "titles": {
        "indexTitle": "TextureImageSource",
        "fullyQualifiedIndexTitle": "Fuse.Resources.TextureImageSource"
      }
    },
    {
      "id": {
        "id": "fuse/rootviewport",
        "parentId": "fuse",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/rootviewport",
        "href": "fuse/rootviewport"
      },
      "titles": {
        "indexTitle": "RootViewport",
        "fullyQualifiedIndexTitle": "Fuse.RootViewport"
      }
    },
    {
      "comment": {
        "brief": "Rotates the element by the degrees specified.",
        "full": "Rotates the element by the degrees specified.\n\n# Example\nThe following example rotates a rectangle 45 degrees\n\n    <Rectangle Width=\"100\" Height=\"50\">\n        <Rotation Degrees=\"90\"/>\n    </Rectangle>\n\nFor animated rotations, consider using a @Rotate animator instead of animating\nthe properties of this class."
      },
      "id": {
        "id": "fuse/rotation",
        "parentId": "fuse",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/rotation",
        "href": "fuse/rotation"
      },
      "titles": {
        "indexTitle": "Rotation",
        "fullyQualifiedIndexTitle": "Fuse.Rotation"
      }
    },
    {
      "comment": {
        "brief": "Enlarges or shrinks the element by the factor specified.",
        "full": "Enlarges or shrinks the element by the factor specified.\n\n# Example\nThe following example will make the `Rectangle` twice as big as the original size:\n\n    <Rectangle Width=\"100\" Height=\"100\">\n        <Scaling Factor=\"2\"/>\n    </Rectangle>\n\nFor animated scaling, consider using a @Scale animator instead of animating the properties of this class.\n\nThe standard options for `RelativeTo` are:\n\n* `Identity`: The default. This treats `Factor` as a multiplier. For example, `Factor=\"2\"` scales a Visual to twice its size\n*  `SizeFactor`: Scales relative to the target size of `RelativeNode` multiplied by `Factor`. The actual scaling is then the required amount to scale the source element to that target size.\n* `SizeChange`: Scales relative to the previous size of the visual prior to a layout change. The actual scaling is then the required amount to scale the source element to that target size."
      },
      "id": {
        "id": "fuse/scaling",
        "parentId": "fuse",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/scaling",
        "href": "fuse/scaling"
      },
      "titles": {
        "indexTitle": "Scaling",
        "fullyQualifiedIndexTitle": "Fuse.Scaling"
      }
    },
    {
      "comment": {
        "brief": "A JavaScript array handle.",
        "full": "A JavaScript array handle.",
        "attributes": {
          "advanced": true
        }
      },
      "id": {
        "id": "fuse/scripting/array",
        "parentId": "fuse/scripting",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/array",
        "href": "fuse/scripting/array"
      },
      "titles": {
        "indexTitle": "Array",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.Array"
      }
    },
    {
      "id": {
        "id": "fuse/scripting/boolchangedargs",
        "parentId": "fuse/scripting",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/boolchangedargs",
        "href": "fuse/scripting/boolchangedargs"
      },
      "titles": {
        "indexTitle": "BoolChangedArgs",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.BoolChangedArgs"
      }
    },
    {
      "id": {
        "id": "fuse/scripting/codemodule",
        "parentId": "fuse/scripting",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/codemodule",
        "href": "fuse/scripting/codemodule"
      },
      "titles": {
        "indexTitle": "CodeModule",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.CodeModule"
      }
    },
    {
      "id": {
        "id": "fuse/scripting/context",
        "parentId": "fuse/scripting",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/context",
        "href": "fuse/scripting/context"
      },
      "titles": {
        "indexTitle": "Context",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.Context"
      }
    },
    {
      "id": {
        "id": "fuse/scripting/doublechangedargs",
        "parentId": "fuse/scripting",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/doublechangedargs",
        "href": "fuse/scripting/doublechangedargs"
      },
      "titles": {
        "indexTitle": "DoubleChangedArgs",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.DoubleChangedArgs"
      }
    },
    {
      "comment": {
        "brief": "An Uno error catchable in JavaScript.",
        "full": "An Uno error catchable in JavaScript.",
        "attributes": {
          "advanced": true
        }
      },
      "id": {
        "id": "fuse/scripting/error",
        "parentId": "fuse/scripting",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/error",
        "href": "fuse/scripting/error"
      },
      "titles": {
        "indexTitle": "Error",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.Error"
      }
    },
    {
      "comment": {
        "brief": "An Uno object wrapped for being passed to and from JavaScript.",
        "full": "An Uno object wrapped for being passed to and from JavaScript.",
        "attributes": {
          "advanced": true
        }
      },
      "id": {
        "id": "fuse/scripting/external",
        "parentId": "fuse/scripting",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/external",
        "href": "fuse/scripting/external"
      },
      "titles": {
        "indexTitle": "External",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.External"
      }
    },
    {
      "id": {
        "id": "fuse/scripting/filemodule",
        "parentId": "fuse/scripting",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/filemodule",
        "href": "fuse/scripting/filemodule"
      },
      "titles": {
        "indexTitle": "FileModule",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.FileModule"
      }
    },
    {
      "comment": {
        "brief": "A JavaScript function handle.",
        "full": "A JavaScript function handle.",
        "attributes": {
          "advanced": true
        }
      },
      "id": {
        "id": "fuse/scripting/function",
        "parentId": "fuse/scripting",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/function",
        "href": "fuse/scripting/function"
      },
      "titles": {
        "indexTitle": "Function",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.Function"
      }
    },
    {
      "id": {
        "id": "fuse/scripting/javascript/jscontext",
        "parentId": "fuse/scripting/javascript",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/javascript/jscontext",
        "href": "fuse/scripting/javascript/jscontext"
      },
      "titles": {
        "indexTitle": "JSContext",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.JavaScript.JSContext"
      }
    },
    {
      "id": {
        "id": "fuse/scripting/javascript/test/jstest",
        "parentId": "fuse/scripting/javascript/test",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/javascript/test/jstest",
        "href": "fuse/scripting/javascript/test/jstest"
      },
      "titles": {
        "indexTitle": "JSTest",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.JavaScript.Test.JSTest"
      }
    },
    {
      "id": {
        "id": "fuse/scripting/module",
        "parentId": "fuse/scripting",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/module",
        "href": "fuse/scripting/module"
      },
      "titles": {
        "indexTitle": "Module",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.Module"
      }
    },
    {
      "id": {
        "id": "fuse/scripting/moduleresult",
        "parentId": "fuse/scripting",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/moduleresult",
        "href": "fuse/scripting/moduleresult"
      },
      "titles": {
        "indexTitle": "ModuleResult",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.ModuleResult"
      }
    },
    {
      "id": {
        "id": "fuse/scripting/nativeevent",
        "parentId": "fuse/scripting",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/nativeevent",
        "href": "fuse/scripting/nativeevent"
      },
      "titles": {
        "indexTitle": "NativeEvent",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.NativeEvent"
      }
    },
    {
      "comment": {
        "brief": "A NativeModule that's an instance of @EventEmitter.",
        "full": "A NativeModule that's an instance of @EventEmitter."
      },
      "id": {
        "id": "fuse/scripting/nativeeventemittermodule",
        "parentId": "fuse/scripting",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/nativeeventemittermodule",
        "href": "fuse/scripting/nativeeventemittermodule"
      },
      "titles": {
        "indexTitle": "NativeEventEmitterModule",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.NativeEventEmitterModule"
      }
    },
    {
      "id": {
        "id": "fuse/scripting/nativefunction",
        "parentId": "fuse/scripting",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/nativefunction",
        "href": "fuse/scripting/nativefunction"
      },
      "titles": {
        "indexTitle": "NativeFunction",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.NativeFunction"
      }
    },
    {
      "id": {
        "id": "fuse/scripting/nativemember",
        "parentId": "fuse/scripting",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/nativemember",
        "href": "fuse/scripting/nativemember"
      },
      "titles": {
        "indexTitle": "NativeMember",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.NativeMember"
      }
    },
    {
      "id": {
        "id": "fuse/scripting/nativemodule",
        "parentId": "fuse/scripting",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/nativemodule",
        "href": "fuse/scripting/nativemodule"
      },
      "titles": {
        "indexTitle": "NativeModule",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.NativeModule"
      }
    },
    {
      "id": {
        "id": "fuse/scripting/nativepromise_2",
        "parentId": "fuse/scripting",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/nativepromise_2",
        "href": "fuse/scripting/nativepromise_2"
      },
      "titles": {
        "indexTitle": "NativePromise<T, TJSResult>",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.NativePromise<T, TJSResult>"
      }
    },
    {
      "id": {
        "id": "fuse/scripting/nativeproperty_2",
        "parentId": "fuse/scripting",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/nativeproperty_2",
        "href": "fuse/scripting/nativeproperty_2"
      },
      "titles": {
        "indexTitle": "NativeProperty<T, TJSValue>",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.NativeProperty<T, TJSValue>"
      }
    },
    {
      "comment": {
        "brief": "A JavaScript object handle.",
        "full": "A JavaScript object handle.",
        "attributes": {
          "advanced": true
        }
      },
      "id": {
        "id": "fuse/scripting/object",
        "parentId": "fuse/scripting",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/object",
        "href": "fuse/scripting/object"
      },
      "titles": {
        "indexTitle": "Object",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.Object"
      }
    },
    {
      "id": {
        "id": "fuse/scripting/scriptclass",
        "parentId": "fuse/scripting",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/scriptclass",
        "href": "fuse/scripting/scriptclass"
      },
      "titles": {
        "indexTitle": "ScriptClass",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.ScriptClass"
      }
    },
    {
      "id": {
        "id": "fuse/scripting/scripteventargs",
        "parentId": "fuse/scripting",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/scripteventargs",
        "href": "fuse/scripting/scripteventargs"
      },
      "titles": {
        "indexTitle": "ScriptEventArgs",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.ScriptEventArgs"
      }
    },
    {
      "id": {
        "id": "fuse/scripting/scriptexception",
        "parentId": "fuse/scripting",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/scriptexception",
        "href": "fuse/scripting/scriptexception"
      },
      "titles": {
        "indexTitle": "ScriptException",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.ScriptException"
      }
    },
    {
      "id": {
        "id": "fuse/scripting/scriptmember",
        "parentId": "fuse/scripting",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/scriptmember",
        "href": "fuse/scripting/scriptmember"
      },
      "titles": {
        "indexTitle": "ScriptMember",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.ScriptMember"
      }
    },
    {
      "id": {
        "id": "fuse/scripting/scriptmethod",
        "parentId": "fuse/scripting",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/scriptmethod",
        "href": "fuse/scripting/scriptmethod"
      },
      "titles": {
        "indexTitle": "ScriptMethod",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.ScriptMethod"
      }
    },
    {
      "id": {
        "id": "fuse/scripting/scriptmethod_1",
        "parentId": "fuse/scripting",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/scriptmethod_1",
        "href": "fuse/scripting/scriptmethod_1"
      },
      "titles": {
        "indexTitle": "ScriptMethod<T>",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.ScriptMethod<T>"
      }
    },
    {
      "id": {
        "id": "fuse/scripting/scriptmethodinline",
        "parentId": "fuse/scripting",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/scriptmethodinline",
        "href": "fuse/scripting/scriptmethodinline"
      },
      "titles": {
        "indexTitle": "ScriptMethodInline",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.ScriptMethodInline"
      }
    },
    {
      "id": {
        "id": "fuse/scripting/scriptmodule",
        "parentId": "fuse/scripting",
        "type": "Class",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/scriptmodule",
        "href": "fuse/scripting/scriptmodule"
      },
      "titles": {
        "indexTitle": "ScriptModule",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.ScriptModule"
      }
    },
    {
      "id": {
        "id": "fuse/scripting/scriptpromise_3",
        "parentId": "fuse/scripting",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/scriptpromise_3",
        "href": "fuse/scripting/scriptpromise_3"
      },
      "titles": {
        "indexTitle": "ScriptPromise<TSelf, TResult, TJSResult>",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.ScriptPromise<TSelf, TResult, TJSResult>"
      }
    },
    {
      "id": {
        "id": "fuse/scripting/scriptproperty",
        "parentId": "fuse/scripting",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/scriptproperty",
        "href": "fuse/scripting/scriptproperty"
      },
      "titles": {
        "indexTitle": "ScriptProperty",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.ScriptProperty"
      }
    },
    {
      "id": {
        "id": "fuse/scripting/scriptproperty_2",
        "parentId": "fuse/scripting",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/scriptproperty_2",
        "href": "fuse/scripting/scriptproperty_2"
      },
      "titles": {
        "indexTitle": "ScriptProperty<TOwner, TValue>",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.ScriptProperty<TOwner, TValue>"
      }
    },
    {
      "id": {
        "id": "fuse/scripting/scriptreadonlyproperty",
        "parentId": "fuse/scripting",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/scriptreadonlyproperty",
        "href": "fuse/scripting/scriptreadonlyproperty"
      },
      "titles": {
        "indexTitle": "ScriptReadonlyProperty",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.ScriptReadonlyProperty"
      }
    },
    {
      "id": {
        "id": "fuse/scripting/stringchangedargs",
        "parentId": "fuse/scripting",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/scripting/stringchangedargs",
        "href": "fuse/scripting/stringchangedargs"
      },
      "titles": {
        "indexTitle": "StringChangedArgs",
        "fullyQualifiedIndexTitle": "Fuse.Scripting.StringChangedArgs"
      }
    },
    {
      "comment": {
        "brief": "Fired when the @Selectable is removed from the @Selection.",
        "full": "Fired when the @Selectable is removed from the @Selection."
      },
      "id": {
        "id": "fuse/selection/deselected",
        "parentId": "fuse/selection",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/selection/deselected",
        "href": "fuse/selection/deselected"
      },
      "titles": {
        "indexTitle": "Deselected",
        "fullyQualifiedIndexTitle": "Fuse.Selection.Deselected"
      }
    },
    {
      "comment": {
        "brief": "`true` while the @Selectable is currently selected.",
        "full": "`true` while the @Selectable is currently selected.\n\nThis expression attaches to the first @Selectable node that is an ancestory of the expression node. Optionally,  you may specify an argument to get a different selectable `isSelected( myPanel )`."
      },
      "id": {
        "id": "fuse/selection/isselectedfunction",
        "parentId": "fuse/selection",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/selection/isselectedfunction",
        "href": "fuse/selection/isselectedfunction"
      },
      "titles": {
        "indexTitle": "IsSelectedFunction",
        "fullyQualifiedIndexTitle": "Fuse.Selection.IsSelectedFunction"
      }
    },
    {
      "comment": {
        "brief": "`Selectable` makes a Visual selectable. Selectable visuals are what can be selected in  a @Selection control.",
        "full": "`Selectable` makes a Visual selectable. Selectable visuals are what can be selected in  a @Selection control.\n\nThe `Value` property is used by the @Selection to track what is selected. It is a string value to make it easy to work with from JavaScript.\n\n## Changing the selected state\n\nThere is no default behavior that changes a visuals selected state. In order to select a @(Selectable:selectable), you need to use @(ToggleSelection). A normal use of this would be inside a @(Clicked) trigger, like this:\n\n    <Panel>\n        <Selection />\n        <Panel>\n            <Selectable />\n            <Clicked>\n                <ToggleSelection />\n            </Clicked>\n        </Panel>\n    </Panel>\n\n## Reacting to a change in selected state\n\nYou can react to changes in the state of a @(Selectable) element using @(Selected), which pulses when the element is selected, or @(WhileSelected), which is true as long as the element is selected."
      },
      "id": {
        "id": "fuse/selection/selectable",
        "parentId": "fuse/selection",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/selection/selectable",
        "href": "fuse/selection/selectable"
      },
      "titles": {
        "indexTitle": "Selectable",
        "fullyQualifiedIndexTitle": "Fuse.Selection.Selectable"
      }
    },
    {
      "comment": {
        "brief": "Fired when the @Selectable is assed to the @Selection.",
        "full": "Fired when the @Selectable is assed to the @Selection."
      },
      "id": {
        "id": "fuse/selection/selected",
        "parentId": "fuse/selection",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/selection/selected",
        "href": "fuse/selection/selected"
      },
      "titles": {
        "indexTitle": "Selected",
        "fullyQualifiedIndexTitle": "Fuse.Selection.Selected"
      }
    },
    {
      "comment": {
        "brief": "@Selection is used to create a selection control, such as an item list, radio buttons, or picker. The @Selection itself defines the selection, managing the high-level behaviour and tracking the current value. A variety of @Selectable objects define which items can be selected.",
        "full": "@Selection is used to create a selection control, such as an item list, radio buttons, or picker. The @Selection itself defines the selection, managing the high-level behaviour and tracking the current value. A variety of @Selectable objects define which items can be selected.\n\n## Introduction to the Selection API\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Ngil94H-Mk4\" frameborder=\"0\" allowfullscreen></iframe>\n\nThe selection is associated with the node in which it appears. For example:\n\n    <Panel>\n        <Selection/>\n    </Panel>\n\nThe @Panel is now considered to be a selection control. Behaviours and triggers, such as @Selectable and @Selected, that are descendents of this panel will find this `Selection` behavior.\n\nThe @(Selectable) node is used to make a child of a selection control selectable. When assigned to a nodes, it will iterate through the controls parents until it finds a selection control.\n\nThe Selection API's functions are split between user-interaction and programming APIs. The user interaction functions are constrained to the requirements of the Selection, such as `MaxCount` and `MinCount`. The programmatic functions can set whatever state they want; they are not constrained. This makes it easy to create value bindings and JavaScript driven behaviour without worrying about initialization order.\n\n## Example"
      },
      "id": {
        "id": "fuse/selection/selection",
        "parentId": "fuse/selection",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/selection/selection",
        "href": "fuse/selection/selection"
      },
      "titles": {
        "indexTitle": "Selection",
        "fullyQualifiedIndexTitle": "Fuse.Selection.Selection"
      }
    },
    {
      "id": {
        "id": "fuse/selection/selectionevent",
        "parentId": "fuse/selection",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/selection/selectionevent",
        "href": "fuse/selection/selectionevent"
      },
      "titles": {
        "indexTitle": "SelectionEvent",
        "fullyQualifiedIndexTitle": "Fuse.Selection.SelectionEvent"
      }
    },
    {
      "id": {
        "id": "fuse/selection/selectioneventargs",
        "parentId": "fuse/selection",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/selection/selectioneventargs",
        "href": "fuse/selection/selectioneventargs"
      },
      "titles": {
        "indexTitle": "SelectionEventArgs",
        "fullyQualifiedIndexTitle": "Fuse.Selection.SelectionEventArgs"
      }
    },
    {
      "comment": {
        "brief": "Modifies the selection state of a selectable in a selection.",
        "full": "Modifies the selection state of a selectable in a selection.\n\nThis looks for an ancestor node that is @Selectable.\n\nThis obeys the user-interaction constraints of the @Selection. For example, it will not exceed `MaxCount`, nor go under `MinCount`. It is meant to create the high-level user interaction in a selection control."
      },
      "id": {
        "id": "fuse/selection/toggleselection",
        "parentId": "fuse/selection",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/selection/toggleselection",
        "href": "fuse/selection/toggleselection"
      },
      "titles": {
        "indexTitle": "ToggleSelection",
        "fullyQualifiedIndexTitle": "Fuse.Selection.ToggleSelection"
      }
    },
    {
      "comment": {
        "brief": "This trigger is active while the @Selectable is currently selected in the @Selection",
        "full": "This trigger is active while the @Selectable is currently selected in the @Selection\n\nThis attaches to the first @Selectable node that is an ancestor of this one.\n\nConsider also the `isSelected()` function for use in expressions."
      },
      "id": {
        "id": "fuse/selection/whileselected",
        "parentId": "fuse/selection",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/selection/whileselected",
        "href": "fuse/selection/whileselected"
      },
      "titles": {
        "indexTitle": "WhileSelected",
        "fullyQualifiedIndexTitle": "Fuse.Selection.WhileSelected"
      }
    },
    {
      "id": {
        "id": "fuse/sensor/accelerometertracker",
        "parentId": "fuse/sensor",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/sensor/accelerometertracker",
        "href": "fuse/sensor/accelerometertracker"
      },
      "titles": {
        "indexTitle": "AccelerometerTracker",
        "fullyQualifiedIndexTitle": "Fuse.Sensor.AccelerometerTracker"
      }
    },
    {
      "id": {
        "id": "fuse/sensor/basetracker",
        "parentId": "fuse/sensor",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/sensor/basetracker",
        "href": "fuse/sensor/basetracker"
      },
      "titles": {
        "indexTitle": "BaseTracker",
        "fullyQualifiedIndexTitle": "Fuse.Sensor.BaseTracker"
      }
    },
    {
      "id": {
        "id": "fuse/sensor/batterydata",
        "parentId": "fuse/sensor",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/sensor/batterydata",
        "href": "fuse/sensor/batterydata"
      },
      "titles": {
        "indexTitle": "BatteryData",
        "fullyQualifiedIndexTitle": "Fuse.Sensor.BatteryData"
      }
    },
    {
      "id": {
        "id": "fuse/sensor/batterytracker",
        "parentId": "fuse/sensor",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/sensor/batterytracker",
        "href": "fuse/sensor/batterytracker"
      },
      "titles": {
        "indexTitle": "BatteryTracker",
        "fullyQualifiedIndexTitle": "Fuse.Sensor.BatteryTracker"
      }
    },
    {
      "id": {
        "id": "fuse/sensor/connectionstatedata",
        "parentId": "fuse/sensor",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/sensor/connectionstatedata",
        "href": "fuse/sensor/connectionstatedata"
      },
      "titles": {
        "indexTitle": "ConnectionStateData",
        "fullyQualifiedIndexTitle": "Fuse.Sensor.ConnectionStateData"
      }
    },
    {
      "id": {
        "id": "fuse/sensor/connectiontracker",
        "parentId": "fuse/sensor",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/sensor/connectiontracker",
        "href": "fuse/sensor/connectiontracker"
      },
      "titles": {
        "indexTitle": "ConnectionTracker",
        "fullyQualifiedIndexTitle": "Fuse.Sensor.ConnectionTracker"
      }
    },
    {
      "id": {
        "id": "fuse/sensor/gravitytracker",
        "parentId": "fuse/sensor",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/sensor/gravitytracker",
        "href": "fuse/sensor/gravitytracker"
      },
      "titles": {
        "indexTitle": "GravityTracker",
        "fullyQualifiedIndexTitle": "Fuse.Sensor.GravityTracker"
      }
    },
    {
      "id": {
        "id": "fuse/sensor/gyroscopetracker",
        "parentId": "fuse/sensor",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/sensor/gyroscopetracker",
        "href": "fuse/sensor/gyroscopetracker"
      },
      "titles": {
        "indexTitle": "GyroscopeTracker",
        "fullyQualifiedIndexTitle": "Fuse.Sensor.GyroscopeTracker"
      }
    },
    {
      "id": {
        "id": "fuse/sensor/magnetometertracker",
        "parentId": "fuse/sensor",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/sensor/magnetometertracker",
        "href": "fuse/sensor/magnetometertracker"
      },
      "titles": {
        "indexTitle": "MagnetometerTracker",
        "fullyQualifiedIndexTitle": "Fuse.Sensor.MagnetometerTracker"
      }
    },
    {
      "id": {
        "id": "fuse/sensor/pedometertracker",
        "parentId": "fuse/sensor",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/sensor/pedometertracker",
        "href": "fuse/sensor/pedometertracker"
      },
      "titles": {
        "indexTitle": "PedometerTracker",
        "fullyQualifiedIndexTitle": "Fuse.Sensor.PedometerTracker"
      }
    },
    {
      "id": {
        "id": "fuse/sensor/pressuretracker",
        "parentId": "fuse/sensor",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/sensor/pressuretracker",
        "href": "fuse/sensor/pressuretracker"
      },
      "titles": {
        "indexTitle": "PressureTracker",
        "fullyQualifiedIndexTitle": "Fuse.Sensor.PressureTracker"
      }
    },
    {
      "id": {
        "id": "fuse/sensor/rotationtracker",
        "parentId": "fuse/sensor",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/sensor/rotationtracker",
        "href": "fuse/sensor/rotationtracker"
      },
      "titles": {
        "indexTitle": "RotationTracker",
        "fullyQualifiedIndexTitle": "Fuse.Sensor.RotationTracker"
      }
    },
    {
      "id": {
        "id": "fuse/sensor/sensordata",
        "parentId": "fuse/sensor",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/sensor/sensordata",
        "href": "fuse/sensor/sensordata"
      },
      "titles": {
        "indexTitle": "SensorData",
        "fullyQualifiedIndexTitle": "Fuse.Sensor.SensorData"
      }
    },
    {
      "id": {
        "id": "fuse/sensor/spoofsensorprovider",
        "parentId": "fuse/sensor",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/sensor/spoofsensorprovider",
        "href": "fuse/sensor/spoofsensorprovider"
      },
      "titles": {
        "indexTitle": "SpoofSensorProvider",
        "fullyQualifiedIndexTitle": "Fuse.Sensor.SpoofSensorProvider"
      }
    },
    {
      "id": {
        "id": "fuse/sensor/useraccelerationtracker",
        "parentId": "fuse/sensor",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/sensor/useraccelerationtracker",
        "href": "fuse/sensor/useraccelerationtracker"
      },
      "titles": {
        "indexTitle": "UserAccelerationTracker",
        "fullyQualifiedIndexTitle": "Fuse.Sensor.UserAccelerationTracker"
      }
    },
    {
      "comment": {
        "brief": "Applies a shear to the visual (skews it). If you wish to animate the shear use a @Skew animator instead.",
        "full": "Applies a shear to the visual (skews it). If you wish to animate the shear use a @Skew animator instead.\n\nA shear is 2D, applying to only the X, and Y axes."
      },
      "id": {
        "id": "fuse/shear",
        "parentId": "fuse",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/shear",
        "href": "fuse/shear"
      },
      "titles": {
        "indexTitle": "Shear",
        "fullyQualifiedIndexTitle": "Fuse.Shear"
      }
    },
    {
      "id": {
        "id": "fuse/storage/desktopusersettingsimpl",
        "parentId": "fuse/storage",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/storage/desktopusersettingsimpl",
        "href": "fuse/storage/desktopusersettingsimpl"
      },
      "titles": {
        "indexTitle": "DesktopUserSettingsImpl",
        "fullyQualifiedIndexTitle": "Fuse.Storage.DesktopUserSettingsImpl"
      }
    },
    {
      "comment": {
        "brief": "A system-specific typeface from the target device.",
        "full": "A system-specific typeface from the target device.\n\nThis allows us to get fonts available on the target system on Android and iOS.\nBy using this we can save space by not bundling fonts that are known to be available on the target system with our app.\n\nReturns the default font if no matching font is found.\n\n## Example\n\nThe following example shows how to use a bold font from the Baskerville font family:\n\n    <SystemFont Family=\"Baskerville\" Style=\"Normal\" Weight=\"Bold\" ux:Global=\"BaskervilleBold\" />\n    <Text Font=\"BaskervilleBold\">Hello, world!</Text>\n\nAndroid typically uses abstract font families (e.g. `sans-serif`),\nwhereas iOS uses concrete (e.g. `Helvetica Neue`), so it is often the case that\nwe want to specify different font families that are depending on the target. To do this,\nwe can use local resources:\n\n    <Android>\n        <SystemFont Family=\"monospace\" Style=\"Normal\" Weight=\"Normal\" ux:Key=\"Monospace\" />\n    </Android>\n    <iOS>\n        <SystemFont Family=\"Courier\" Style=\"Normal\" Weight=\"Normal\" ux:Key=\"Monospace\" />\n    </iOS>\n    <Text Font=\"{Resource Monospace}\">Hello, world!</Text>\n\nNote that this only works on iOS and Android, and that it is not guaranteed to\nbe consistent across devices, OSes, or OS versions."
      },
      "id": {
        "id": "fuse/systemfont",
        "parentId": "fuse",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/systemfont",
        "href": "fuse/systemfont"
      },
      "titles": {
        "indexTitle": "SystemFont",
        "fullyQualifiedIndexTitle": "Fuse.SystemFont"
      }
    },
    {
      "id": {
        "id": "fuse/testing/javascripttest",
        "parentId": "fuse/testing",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/testing/javascripttest",
        "href": "fuse/testing/javascripttest"
      },
      "titles": {
        "indexTitle": "JavaScriptTest",
        "fullyQualifiedIndexTitle": "Fuse.Testing.JavaScriptTest"
      }
    },
    {
      "comment": {
        "brief": "Bootstrapper for ux:Test",
        "full": "Bootstrapper for ux:Test\n\nThis class does not serve any general-purpose purpose, and\nshouldn't be used by applications.",
        "attributes": {
          "advanced": true,
          "experimental": true
        }
      },
      "id": {
        "id": "fuse/testing/testrootpanel",
        "parentId": "fuse/testing",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/testing/testrootpanel",
        "href": "fuse/testing/testrootpanel"
      },
      "titles": {
        "indexTitle": "TestRootPanel",
        "fullyQualifiedIndexTitle": "Fuse.Testing.TestRootPanel"
      }
    },
    {
      "id": {
        "id": "fuse/testing/unotestinghelper",
        "parentId": "fuse/testing",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/testing/unotestinghelper",
        "href": "fuse/testing/unotestinghelper"
      },
      "titles": {
        "indexTitle": "UnoTestingHelper",
        "fullyQualifiedIndexTitle": "Fuse.Testing.UnoTestingHelper"
      }
    },
    {
      "id": {
        "id": "fuse/text/fallingbackfont",
        "parentId": "fuse/text",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/text/fallingbackfont",
        "href": "fuse/text/fallingbackfont"
      },
      "titles": {
        "indexTitle": "FallingBackFont",
        "fullyQualifiedIndexTitle": "Fuse.Text.FallingBackFont"
      }
    },
    {
      "id": {
        "id": "fuse/text/fallingbackfontface",
        "parentId": "fuse/text",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/text/fallingbackfontface",
        "href": "fuse/text/fallingbackfontface"
      },
      "titles": {
        "indexTitle": "FallingBackFontFace",
        "fullyQualifiedIndexTitle": "Fuse.Text.FallingBackFontFace"
      }
    },
    {
      "id": {
        "id": "fuse/text/font",
        "parentId": "fuse/text",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/text/font",
        "href": "fuse/text/font"
      },
      "titles": {
        "indexTitle": "Font",
        "fullyQualifiedIndexTitle": "Fuse.Text.Font"
      }
    },
    {
      "id": {
        "id": "fuse/text/fontface",
        "parentId": "fuse/text",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/text/fontface",
        "href": "fuse/text/fontface"
      },
      "titles": {
        "indexTitle": "FontFace",
        "fullyQualifiedIndexTitle": "Fuse.Text.FontFace"
      }
    },
    {
      "id": {
        "id": "fuse/text/glyphatlas",
        "parentId": "fuse/text",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/text/glyphatlas",
        "href": "fuse/text/glyphatlas"
      },
      "titles": {
        "indexTitle": "GlyphAtlas",
        "fullyQualifiedIndexTitle": "Fuse.Text.GlyphAtlas"
      }
    },
    {
      "id": {
        "id": "fuse/text/lazyfont",
        "parentId": "fuse/text",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/text/lazyfont",
        "href": "fuse/text/lazyfont"
      },
      "titles": {
        "indexTitle": "LazyFont",
        "fullyQualifiedIndexTitle": "Fuse.Text.LazyFont"
      }
    },
    {
      "id": {
        "id": "fuse/text/lazyfontface",
        "parentId": "fuse/text",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/text/lazyfontface",
        "href": "fuse/text/lazyfontface"
      },
      "titles": {
        "indexTitle": "LazyFontFace",
        "fullyQualifiedIndexTitle": "Fuse.Text.LazyFontFace"
      }
    },
    {
      "id": {
        "id": "fuse/text/positionedrun",
        "parentId": "fuse/text",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/text/positionedrun",
        "href": "fuse/text/positionedrun"
      },
      "titles": {
        "indexTitle": "PositionedRun",
        "fullyQualifiedIndexTitle": "Fuse.Text.PositionedRun"
      }
    },
    {
      "id": {
        "id": "fuse/text/renderer",
        "parentId": "fuse/text",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/text/renderer",
        "href": "fuse/text/renderer"
      },
      "titles": {
        "indexTitle": "Renderer",
        "fullyQualifiedIndexTitle": "Fuse.Text.Renderer"
      }
    },
    {
      "id": {
        "id": "fuse/text/shapedrun",
        "parentId": "fuse/text",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/text/shapedrun",
        "href": "fuse/text/shapedrun"
      },
      "titles": {
        "indexTitle": "ShapedRun",
        "fullyQualifiedIndexTitle": "Fuse.Text.ShapedRun"
      }
    },
    {
      "id": {
        "id": "fuse/text/substring",
        "parentId": "fuse/text",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/text/substring",
        "href": "fuse/text/substring"
      },
      "titles": {
        "indexTitle": "Substring",
        "fullyQualifiedIndexTitle": "Fuse.Text.Substring"
      }
    },
    {
      "id": {
        "id": "fuse/text/textureatlas",
        "parentId": "fuse/text",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/text/textureatlas",
        "href": "fuse/text/textureatlas"
      },
      "titles": {
        "indexTitle": "TextureAtlas",
        "fullyQualifiedIndexTitle": "Fuse.Text.TextureAtlas"
      }
    },
    {
      "comment": {
        "brief": "Provides callback services on the UI thread based on elapsed time.",
        "full": "Provides callback services on the UI thread based on elapsed time."
      },
      "id": {
        "id": "fuse/timer",
        "parentId": "fuse",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/timer",
        "href": "fuse/timer"
      },
      "titles": {
        "indexTitle": "Timer",
        "fullyQualifiedIndexTitle": "Fuse.Timer"
      }
    },
    {
      "id": {
        "id": "fuse/toast",
        "parentId": "fuse",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/toast",
        "href": "fuse/toast"
      },
      "titles": {
        "indexTitle": "Toast",
        "fullyQualifiedIndexTitle": "Fuse.Toast"
      }
    },
    {
      "comment": {
        "brief": "Transforms are used to move, rotate, scale and skew elements beyond their assigned placement by the Fuse layout engine.",
        "full": "Transforms are used to move, rotate, scale and skew elements beyond their assigned placement by the Fuse layout engine.\n\nTransforms are added to elements just like other elements and triggers.\n\n# Example\nIn this example, we scale a circle to become three times its original size:\n\n    <Circle Color=\"Green\" Width=\"50\" Height=\"50\">\n        <Scaling Factor=\"3\" />\n    </Circle>\n\n## Available transforms\n[subclass Fuse.Transform]",
        "attributes": {
          "topic": "Transforms"
        }
      },
      "id": {
        "id": "fuse/transform",
        "parentId": "fuse",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/transform",
        "href": "fuse/transform"
      },
      "titles": {
        "indexTitle": "Transform",
        "fullyQualifiedIndexTitle": "Fuse.Transform"
      }
    },
    {
      "comment": {
        "brief": "Represents a linear offset in space.\nFor animated translation, consider using a @Move animator instead of\nanimating the properties of this class.",
        "full": "Represents a linear offset in space.\nFor animated translation, consider using a @Move animator instead of\nanimating the properties of this class."
      },
      "id": {
        "id": "fuse/translation",
        "parentId": "fuse",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/translation",
        "href": "fuse/translation"
      },
      "titles": {
        "indexTitle": "Translation",
        "fullyQualifiedIndexTitle": "Fuse.Translation"
      }
    },
    {
      "comment": {
        "brief": "Scrolls a @fuse/controls/scrollview so that the target element becomes visible",
        "full": "Scrolls a @fuse/controls/scrollview so that the target element becomes visible\n\n## Example\n\n        <ScrollView>\n            <Grid Rows=\"auto, 400, 400, 400, auto\" Margin=\"10\">\n                <Button Text=\"Go to Bottom\" Alignment=\"Bottom\">\n                    <Clicked>\n                        <BringIntoView TargetNode=\"bottomRect\" />\n                    </Clicked>\n                </Button>\n                <Rectangle Margin=\"10\" CornerRadius=\"4\" ux:Name=\"topRect\">\n                    <SolidColor Color=\"#a542db\" />\n                </Rectangle>\n                <Rectangle Margin=\"10\" CornerRadius=\"4\">\n                    <LinearGradient>\n                        <GradientStop Offset=\"0\" Color=\"#a542db\" />\n                        <GradientStop Offset=\"1\" Color=\"#3579e6\" />\n                    </LinearGradient>\n                </Rectangle>\n                <Rectangle Margin=\"10\" CornerRadius=\"4\" ux:Name=\"bottomRect\">\n                    <Stroke Offset=\"4\" Width=\"1\" Color=\"#3579e6\" />\n                    <SolidColor Color=\"#3579e6\" />\n                </Rectangle>\n                <Button Text=\"Go to Top\" Alignment=\"Bottom\">\n                    <Clicked>\n                        <BringIntoView TargetNode=\"topRect\" />\n                    </Clicked>\n                </Button>\n            </Grid>\n        </ScrollView>"
      },
      "id": {
        "id": "fuse/triggers/actions/bringintoview",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/bringintoview",
        "href": "fuse/triggers/actions/bringintoview"
      },
      "titles": {
        "indexTitle": "BringIntoView",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.BringIntoView"
      }
    },
    {
      "comment": {
        "brief": "Reorders the siblings of a @Visual so that the @Visual will be rendered on top.",
        "full": "Reorders the siblings of a @Visual so that the @Visual will be rendered on top.\n\n> Note that it doesn't affect the @Visual's `ZOffset`. Instead, it reorders the @Visual amongst its siblings so that it will be drawn on top.\n> This means that using `ZOffset` can still cause this @Visual to be rendered underneath its siblings.\n\n## Example\n\n    <ScrollView>\n        <Grid Rows=\"400, 1*\" Margin=\"10\">\n            <Panel>\n                <Rectangle Margin=\"10\" CornerRadius=\"4\" ux:Name=\"topRect\">\n                    <LinearGradient>\n                        <GradientStop Offset=\"0\" Color=\"#a542db\" />\n                        <GradientStop Offset=\"1\" Color=\"#3579e6\" />\n                    </LinearGradient>\n                </Rectangle>\n                <TextBlock ux:Name=\"textBehind\" Alignment=\"Center\" FontSize=\"20\" Color=\"#fff\">I was brought to the front!</TextBlock>\n            </Panel>\n            <Rectangle Margin=\"10\">\n                <Stroke Offset=\"4\" Width=\"1\" Color=\"#3579e6\" />\n                <Button Text=\"Bring element to front\" Alignment=\"Bottom\">\n                    <Clicked>\n                        <BringToFront Target=\"textBehind\" />\n                    </Clicked>\n                </Button>\n            </Rectangle>\n        </Grid>\n    </ScrollView>"
      },
      "id": {
        "id": "fuse/triggers/actions/bringtofront",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/bringtofront",
        "href": "fuse/triggers/actions/bringtofront"
      },
      "titles": {
        "indexTitle": "BringToFront",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.BringToFront"
      }
    },
    {
      "comment": {
        "brief": "Calls a phone number",
        "full": "Calls a phone number\n\nYou'll find this trigger action in the Fuse.Launcher package, which have to be referenced from your uno project.\nFor example:\n\n    {\n        \"Packages\": [\n            \"Fuse\",\n            \"FuseJS\",\n            \"Fuse.Launcher\"\n        ]\n    }\n\n## Example\n\n    <StackPanel Margin=\"20\">\n        <TextInput PlaceholderText=\"Enter the number here\" ux:Name=\"numberInput\" />\n        <Button Margin=\"10\" Text=\"Call\" Alignment=\"Bottom\">\n            <Clicked>\n                <Call Number=\"{ReadProperty numberInput.Value}\" />\n            </Clicked>\n        </Button>\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/triggers/actions/call",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/call",
        "href": "fuse/triggers/actions/call"
      },
      "titles": {
        "indexTitle": "Call",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.Call"
      }
    },
    {
      "comment": {
        "brief": "Calls a JavaScript function when a trigger is activated.",
        "full": "Calls a JavaScript function when a trigger is activated.\n\n## Example\n\nThis example calls the JavaScript function `someJSFunction` when a @Button is @Clicked.\n\n    <JavaScript>\n        var someJSFunction = function () {\n            console.log(\"some function called\");\n        }\n        module.exports = { someJSFunction: someJSFunction };\n    </JavaScript>\n\n    <Button Text=\"Do something\">\n        <Clicked>\n            <Callback Handler=\"{someJSFunction}\"/>\n        </Clicked>\n    </Button>"
      },
      "id": {
        "id": "fuse/triggers/actions/callback",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/callback",
        "href": "fuse/triggers/actions/callback"
      },
      "titles": {
        "indexTitle": "Callback",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.Callback"
      }
    },
    {
      "id": {
        "id": "fuse/triggers/actions/cancelinteractions",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/cancelinteractions",
        "href": "fuse/triggers/actions/cancelinteractions"
      },
      "titles": {
        "indexTitle": "CancelInteractions",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.CancelInteractions"
      }
    },
    {
      "comment": {
        "brief": "Collapses an @Element by setting `Visibilty` to `Collapsed`.",
        "full": "Collapses an @Element by setting `Visibilty` to `Collapsed`.\n\nWhen an element is collapsed, it won't take up any space in the layout.\nUse @Hide if you want the element to be invisible, but still take up space.\n\n## Basic syntax\n\n    <Collapse TargetNode=\"myElement\" />\n\n## Example\n\n    <Button Text=\"Collapse the element\">\n        <Clicked>\n            <Collapse TargetNode=\"visibleElement\" />\n        </Clicked>\n    </Button>\n\n    <Panel ux:Name=\"visibleElement\" Visibility=\"Visible\" Background=\"Blue\" />"
      },
      "id": {
        "id": "fuse/triggers/actions/collapse",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/collapse",
        "href": "fuse/triggers/actions/collapse"
      },
      "titles": {
        "indexTitle": "Collapse",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.Collapse"
      }
    },
    {
      "comment": {
        "brief": "Log a message, which is useful for debugging",
        "full": "Log a message, which is useful for debugging\n\n## Example\n\n    <StackPanel Margin=\"20\">\n        <Button Margin=\"10\" Text=\"Log 'Hello World!'\">\n            <Clicked>\n                <DebugAction Message=\"Hello World!\" />\n            </Clicked>\n        </Button>\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/triggers/actions/debugaction",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/debugaction",
        "href": "fuse/triggers/actions/debugaction"
      },
      "titles": {
        "indexTitle": "DebugAction",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.DebugAction"
      }
    },
    {
      "id": {
        "id": "fuse/triggers/actions/debugframe",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/debugframe",
        "href": "fuse/triggers/actions/debugframe"
      },
      "titles": {
        "indexTitle": "DebugFrame",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.DebugFrame"
      }
    },
    {
      "id": {
        "id": "fuse/triggers/actions/debugproperty_1",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/debugproperty_1",
        "href": "fuse/triggers/actions/debugproperty_1"
      },
      "titles": {
        "indexTitle": "DebugProperty<T>",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.DebugProperty<T>"
      }
    },
    {
      "id": {
        "id": "fuse/triggers/actions/debugtime",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/debugtime",
        "href": "fuse/triggers/actions/debugtime"
      },
      "titles": {
        "indexTitle": "DebugTime",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.DebugTime"
      }
    },
    {
      "comment": {
        "brief": "Evaluate a JavaScript snippet on a WebView and optionally get the result",
        "full": "Evaluate a JavaScript snippet on a WebView and optionally get the result\n\nThe WebView offers limited execution of arbitrary JavaScript in the currently loaded web environment. This is done with the `<EvaluateJS/>` action. Let's look at a simplified example.\n\n```XML\n<EvaluateJS Handler=\"{onPageLoaded}\">\n    var result = {\n        url : document.location.href\n    };\n    return result;\n</EvaluateJS>\n```\n\nNote the use of a `return` statement in the script body. Implementations of JavaScript evaluation APIs generally act like a JavaScript [REPL](https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop), and when evaluating multiple lines of JS the result of the last statement of the script becomes the returned value. For instance, \"1+5\" is completely valid JS when evaluated and returns the expected value of \"6\".\n\nThis can result in odd-feeling JS, where referencing an object becomes an implicit return statement, whereas an explicit return is not allowed.\n\n```JavaScript\nvar result = {};\nresult.foo = \"bar\";\nresult; // using return here is invalid JS\n```\n\nTo make this feel better and allow return, we currently inject the user's JS in the form of a function:\n\n```JavaScript\n(function() { USER_JS })();\n```\n\n#### Reading the result value\n\nWhen we evaluate the JavaScript we are currently bound by platform restrictions in a key way: String is the only allowed return value type on Android, our lowest common denominator.\nWhat this means is that any return value passed from the evaluated script must by necessity be returned as JSON and parsed back from it on the Fuse end. Even if all you want is the result of some arithmetic, you'd still receive it as a string and require a cast. Instead of forcing you to routinely `return JSON.stringify(foo)` from your own JS we handle this by *always* wrapping your JS in JSON.stringify before evaluation:\n\n```JavaScript\nJSON.stringify( (function() { USER_JS })() );\n```\n\nThe returned JSON string here is then put into a result object with the `json` key. This is for clarity, so you never forget that the data you are receiving is a JSON string that you will need to parse.\n\n```XML\n<JavaScript>\n    module.exports = {\n        onPageLoaded : function(result)\n        {\n            var url = JSON.parse(result.json).url;\n        }\n    };\n</JavaScript>\n```\n\nNote that of course return is optional. If you don't return anything from your evaluated JS the return value of the expression will simply be \"null\".\n\n## Example\n\n    <Grid Rows=\"0.15*, 1*\">\n        <JavaScript>\n            var Observable = require('FuseJS/Observable');\n            var webViewTitle = Observable(\"<Unknown>\");\n\n            function updateTitle(args) {\n                webViewTitle.value = JSON.parse(args.json);\n            };\n\n            module.exports = {\n                webViewTitle: webViewTitle.map(function(title) { return \"HTML Title: \" + title; }),\n                updateTitle: updateTitle\n            }\n        </JavaScript>\n        <Text Value=\"{webViewTitle}\" Alignment=\"Center\" />\n        <NativeViewHost>\n            <WebView Url=\"https://www.fusetools.com\">\n                <PageLoaded>\n                    <EvaluateJS JavaScript=\"return window.document.title;\" Handler=\"{updateTitle}\" />\n                </PageLoaded>\n            </WebView>\n        </NativeViewHost>\n    </Grid>"
      },
      "id": {
        "id": "fuse/triggers/actions/evaluatejs",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/evaluatejs",
        "href": "fuse/triggers/actions/evaluatejs"
      },
      "titles": {
        "indexTitle": "EvaluateJS",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.EvaluateJS"
      }
    },
    {
      "comment": {
        "brief": "Gives focus to its containing @Element when activated.",
        "full": "Gives focus to its containing @Element when activated.\n\nIt also accepts a `Target` property, which specifies which element to give focus to.\n\n# Example\nIn the following example, focus is given to a `TextInput` when a button is clicked.\n\n    <StackPanel>\n        <TextInput ux:Name=\"input\" Height=\"50\" Value=\"Filler text\"/>\n        <Button Text=\"Button\">\n            <Clicked>\n                <GiveFocus Target=\"input\" />\n            </Clicked>\n        </Button>\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/triggers/actions/givefocus",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/givefocus",
        "href": "fuse/triggers/actions/givefocus"
      },
      "titles": {
        "indexTitle": "GiveFocus",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.GiveFocus"
      }
    },
    {
      "comment": {
        "brief": "Hides an @Element by setting `Visibility` to `Hidden`.",
        "full": "Hides an @Element by setting `Visibility` to `Hidden`.\n\nWhen an element is hidden, it will not be drawn, but still take up space in the layout.\nUse @Collapse if you don't want the element to take up any space.\n\n## Basic syntax\n\n    <Hide TargetNode=\"myElement\" />\n\n## Example\n\n    <Button Text=\"Hide the element\">\n        <Clicked>\n            <Hide TargetNode=\"visibleElement\" />\n        </Clicked>\n    </Button>\n\n    <Panel ux:Name=\"visibleElement\" Visibility=\"Visible\" Background=\"Blue\" />"
      },
      "id": {
        "id": "fuse/triggers/actions/hide",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/hide",
        "href": "fuse/triggers/actions/hide"
      },
      "titles": {
        "indexTitle": "Hide",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.Hide"
      }
    },
    {
      "id": {
        "id": "fuse/triggers/actions/jseventargs",
        "parentId": "fuse/triggers/actions",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/jseventargs",
        "href": "fuse/triggers/actions/jseventargs"
      },
      "titles": {
        "indexTitle": "JSEventArgs",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.JSEventArgs"
      }
    },
    {
      "id": {
        "id": "fuse/triggers/actions/launchapp",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/launchapp",
        "href": "fuse/triggers/actions/launchapp"
      },
      "titles": {
        "indexTitle": "LaunchApp",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.LaunchApp"
      }
    },
    {
      "comment": {
        "brief": "Launch the default email application with an optional template",
        "full": "Launch the default email application with an optional template\n\nYou'll find this trigger action in the Fuse.Launcher package, which have to be referenced from your uno project.\nFor example:\n\n    {\n        \"Packages\": [\n            \"Fuse\",\n            \"FuseJS\",\n            \"Fuse.Launcher\"\n        ]\n    }\n\n> Note it's expected that the 'To' parameter is set\n\n## Example\n\n    <StackPanel Margin=\"20\">\n        <Button Margin=\"10\" Text=\"Send email\">\n            <Clicked>\n                <LaunchEmail To=\"email@example.com\" Subject=\"Test\" CarbonCopy=\"\" BlindCarbonCopy=\"\" Message=\"Hello world!\" />\n            </Clicked>\n        </Button>\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/triggers/actions/launchemail",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/launchemail",
        "href": "fuse/triggers/actions/launchemail"
      },
      "titles": {
        "indexTitle": "LaunchEmail",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.LaunchEmail"
      }
    },
    {
      "comment": {
        "brief": "Launch the default map app",
        "full": "Launch the default map app\n\nYou'll find this trigger action in the Fuse.Launcher package, which have to be referenced from your uno project.\nFor example:\n\n    {\n        \"Packages\": [\n            \"Fuse\",\n            \"FuseJS\",\n            \"Fuse.Launcher\"\n        ]\n    }\n\n## Example\n\n    <StackPanel Margin=\"20\">\n        <Button Margin=\"10\" Text=\"Launch Maps\">\n            <Clicked>\n                <LaunchMaps Latitude=\"59.9139\" Longitude=\"10.7522\" />\n            </Clicked>\n        </Button>\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/triggers/actions/launchmaps",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/launchmaps",
        "href": "fuse/triggers/actions/launchmaps"
      },
      "titles": {
        "indexTitle": "LaunchMaps",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.LaunchMaps"
      }
    },
    {
      "comment": {
        "brief": "Launch the default browser for an URL or open files with its corresponding default application",
        "full": "Launch the default browser for an URL or open files with its corresponding default application\n\nYou'll find this trigger action in the Fuse.Launcher package, which have to be referenced from your uno project.\nFor example:\n```JSON\n    {\n        \"Packages\": [\n            \"Fuse\",\n            \"FuseJS\",\n            \"Fuse.Launcher\"\n        ]\n    }\n```\n\n## Example\n```XML\n    <StackPanel Margin=\"20\">\n        <Button Margin=\"10\" Text=\"Go to Fusetools\">\n            <Clicked>\n                <LaunchUri Uri=\"https://www.fusetools.com/\" />\n            </Clicked>\n        </Button>\n    </StackPanel>\n```\n\nNote: you can pass any URI string to `LaunchUri`, but how it is handled will depend on the target platform and particular device settings.\n\nThere are several common URI schemes that you can use on both Android and iOS:\n    http://<website address>\n    https://<website address>\n    tel:<phone number>\n    sms:<phone number>\n\nOther platform-specific URI schemes are known to be working fine, for example `geo:<parameters>` launches Maps application on Android\nand `facetime:<parameters>` launches a Facetime video call on iOS.\nMore information on supported URI schemes: [on Android](https://developer.android.com/guide/components/intents-common.html) and [on iOS](https://developer.apple.com/library/content/featuredarticles/iPhoneURLScheme_Reference/Introduction/Introduction.html)."
      },
      "id": {
        "id": "fuse/triggers/actions/launchuri",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/launchuri",
        "href": "fuse/triggers/actions/launchuri"
      },
      "titles": {
        "indexTitle": "LaunchUri",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.LaunchUri"
      }
    },
    {
      "comment": {
        "brief": "Load arbitrary HTML into the webview.",
        "full": "Load arbitrary HTML into the webview.\n\n```HTML\n<WebView ux:Name=\"webview\"/>\n<Button>\n    <Clicked>\n        <LoadHtml TargetNode=\"webview\">\n            <HTML>\n                <![CDATA[\n                    <h1>Hello world!</h1>\n                ]]>\n            </HTML>\n        </LoadHtml>\n    </Clicked\n</Button>\n```\n\nYou may optionally specify a base URL to use when resolving relative links and enforcing JavaScript's\n[same origin policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy).\n\n    <LoadHtml BaseUrl=\"https://example.com/\">\n        <HTML>\n            ...\n        </HTML>\n    </LoadHtml>"
      },
      "id": {
        "id": "fuse/triggers/actions/loadhtml",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/loadhtml",
        "href": "fuse/triggers/actions/loadhtml"
      },
      "titles": {
        "indexTitle": "LoadHtml",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.LoadHtml"
      }
    },
    {
      "comment": {
        "brief": "Loads a new URL into the WebView",
        "full": "Loads a new URL into the WebView"
      },
      "id": {
        "id": "fuse/triggers/actions/loadurl",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/loadurl",
        "href": "fuse/triggers/actions/loadurl"
      },
      "titles": {
        "indexTitle": "LoadUrl",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.LoadUrl"
      }
    },
    {
      "comment": {
        "brief": "Pause a video or timeline",
        "full": "Pause a video or timeline\n\nThis stops playback but does not change the current position.\n\n## Example\n\n    <Grid Rows=\"3*,1*\" >\n        <Video ux:Name=\"video\" Url=\"http://download.blender.org/peach/bigbuckbunny_movies/BigBuckBunny_320x180.mp4\" AutoPlay=\"true\" StretchMode=\"Uniform\" />\n        <Grid Columns=\"1*,1*\">\n            <Button Text=\"Resume\">\n                <Clicked>\n                    <Resume Target=\"video\" />\n                </Clicked>\n            </Button>\n            <Button Text=\"Pause\">\n                <Clicked>\n                    <Pause Target=\"video\" />\n                </Clicked>\n            </Button>\n        </Grid>\n    </Grid>"
      },
      "id": {
        "id": "fuse/triggers/actions/pause",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/pause",
        "href": "fuse/triggers/actions/pause"
      },
      "titles": {
        "indexTitle": "Pause",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.Pause"
      }
    },
    {
      "comment": {
        "brief": "Resume or start a video or timeline",
        "full": "Resume or start a video or timeline\n\nThis continues playing from where the video or timeline was paused (or from the start if `Stop` was called).\n\nA timeline will play either forward or backward, depending on the last play direction.\n\n## Video Example\n\n    <Grid Rows=\"3*,1*\" >\n        <Video ux:Name=\"video\" Url=\"http://download.blender.org/peach/bigbuckbunny_movies/BigBuckBunny_320x180.mp4\" StretchMode=\"Uniform\" />\n        <Button Text=\"Play\">\n            <Clicked>\n                <Play Target=\"video\" />\n            </Clicked>\n        </Button>\n    </Grid>\n\n## Timeline Example\n\n    <StackPanel>\n        <Rectangle Width=\"150\" Height=\"150\" Margin=\"60\" ux:Name=\"rect\" CornerRadius=\"10\" >\n            <Stroke ux:Name=\"rectStroke\" Offset=\"10\" Width=\"3\" Color=\"#3579e6\" />\n\n            <Timeline  ux:Name=\"timeline\" TimeMultiplier=\"0.4\">\n                <Rotate>\n                    <Keyframe DegreesZ=\"360\" Time=\"1\" />\n                </Rotate>\n                <Change Target=\"rect.Color\">\n                    <Keyframe Value=\"#3579e6\" Time=\"1\" />\n                </Change>\n            </Timeline>\n        </Rectangle>\n\n        <Slider Width=\"250\" ux:Name=\"targetProgress\" Value=\"0.5\" Minimum=\"0\" Maximum=\"1\" />\n        <Button Text=\"Animate to\" Alignment=\"Bottom\">\n            <Clicked>\n                <PlayTo Target=\"timeline\" Progress=\"{Property targetProgress.Value}\" />\n            </Clicked>\n        </Button>\n\n        <Button ux:Name=\"play\" Text=\"Play\" Alignment=\"Bottom\">\n            <Clicked>\n                <Play Target=\"timeline\" />\n            </Clicked>\n        </Button>\n\n        <Button Text=\"Pause\" Alignment=\"Bottom\">\n            <Clicked>\n                <Pause Target=\"timeline\" />\n            </Clicked>\n        </Button>\n\n        <Button Text=\"Stop\" Alignment=\"Bottom\">\n            <Clicked>\n                <Stop Target=\"timeline\" />\n            </Clicked>\n        </Button>\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/triggers/actions/play",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/play",
        "href": "fuse/triggers/actions/play"
      },
      "titles": {
        "indexTitle": "Play",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.Play"
      }
    },
    {
      "id": {
        "id": "fuse/triggers/actions/playbackaction",
        "parentId": "fuse/triggers/actions",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/playbackaction",
        "href": "fuse/triggers/actions/playbackaction"
      },
      "titles": {
        "indexTitle": "PlaybackAction",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.PlaybackAction"
      }
    },
    {
      "comment": {
        "brief": "Play to a specific point in a timeline",
        "full": "Play to a specific point in a timeline\n\n## Example\n\n    <StackPanel>\n        <Rectangle Width=\"150\" Height=\"150\" Margin=\"60\" ux:Name=\"rect\" CornerRadius=\"10\" >\n            <Stroke ux:Name=\"rectStroke\" Offset=\"10\" Width=\"3\" Color=\"#3579e6\" />\n\n            <Timeline  ux:Name=\"timeline\" TimeMultiplier=\"0.4\">\n                <Rotate>\n                    <Keyframe DegreesZ=\"360\" Time=\"1\" />\n                </Rotate>\n                <Change Target=\"rect.Color\">\n                    <Keyframe Value=\"#3579e6\" Time=\"1\" />\n                </Change>\n            </Timeline>\n        </Rectangle>\n\n        <Slider Width=\"250\" ux:Name=\"targetProgress\" Value=\"0.5\" Minimum=\"0\" Maximum=\"1\" />\n        <Button Text=\"Animate to\" Alignment=\"Bottom\">\n            <Clicked>\n                <PlayTo Target=\"timeline\" Progress=\"{ReadProperty targetProgress.Value}\" />\n            </Clicked>\n        </Button>\n\n        <Button ux:Name=\"resume\" Text=\"Resume\" Alignment=\"Bottom\">\n            <Clicked>\n                <Resume Target=\"timeline\" />\n            </Clicked>\n        </Button>\n\n        <Button Text=\"Pause\" Alignment=\"Bottom\">\n            <Clicked>\n                <Pause Target=\"timeline\" />\n            </Clicked>\n        </Button>\n\n        <Button Text=\"Stop\" Alignment=\"Bottom\">\n            <Clicked>\n                <Stop Target=\"timeline\" />\n            </Clicked>\n        </Button>\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/triggers/actions/playto",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/playto",
        "href": "fuse/triggers/actions/playto"
      },
      "titles": {
        "indexTitle": "PlayTo",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.PlayTo"
      }
    },
    {
      "comment": {
        "brief": "Momentarily triggers a @WhileTrue, @WhileFalse or @Timeline.",
        "full": "Momentarily triggers a @WhileTrue, @WhileFalse or @Timeline.\n\n# Example\nIn this example, a pulse activated by pressing a `Button` scales the button by 1.5 over 0.2 seconds, then scales it back to 1 over the same duration.\n\n    <Button Text=\"Pulse\">\n        <WhileTrue ux:Name=\"pulseMe\" Value=\"false\">\n            <Scale Factor=\"1.5\" Duration=\"0.2\" />\n        </WhileTrue>\n\n        <Clicked>\n            <Pulse Target=\"pulseMe\" />\n        </Clicked>\n    </Button>"
      },
      "id": {
        "id": "fuse/triggers/actions/pulse",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/pulse",
        "href": "fuse/triggers/actions/pulse"
      },
      "titles": {
        "indexTitle": "Pulse",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.Pulse"
      }
    },
    {
      "id": {
        "id": "fuse/triggers/actions/pulsebackward",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/pulsebackward",
        "href": "fuse/triggers/actions/pulsebackward"
      },
      "titles": {
        "indexTitle": "PulseBackward",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.PulseBackward"
      }
    },
    {
      "id": {
        "id": "fuse/triggers/actions/pulseforward",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/pulseforward",
        "href": "fuse/triggers/actions/pulseforward"
      },
      "titles": {
        "indexTitle": "PulseForward",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.PulseForward"
      }
    },
    {
      "comment": {
        "brief": "Raises a UserEvent specified by name.",
        "full": "Raises a UserEvent specified by name.\n\nThe @UserEvent must exist higher up in the tree than this action.\n\n> *Note:* See [this article](/docs/basics/creating-components#events-userevent)\n> for a more complete explanation of user events.\n\n# Examples\n\nThe following example shows a button which raises a @UserEvent when\nclicked.\n\n    <UserEvent ux:Name=\"myEvent\" />\n    <Button>\n        <Clicked>\n            <RaiseUserEvent EventName=\"myEvent\" />\n        </Clicked>\n    </Button>\n\nYou can also pass arguments using @UserEventArg.\nWhen using a JavaScript function to handle the event, the arguments will\nbe passed to that function.\n\n    <UserEvent ux:Name=\"myEvent\" />\n    <Button>\n        <Clicked>\n            <RaiseUserEvent EventName=\"myEvent\">\n                <UserEventArg Name=\"name\" StringValue=\"james\" />\n                <UserEventArg Name=\"isAdmin\" BoolValue=\"false\" />\n            </RaiseUserEvent>\n        </Clicked>\n    </Button>"
      },
      "id": {
        "id": "fuse/triggers/actions/raiseuserevent",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/raiseuserevent",
        "href": "fuse/triggers/actions/raiseuserevent"
      },
      "titles": {
        "indexTitle": "RaiseUserEvent",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.RaiseUserEvent"
      }
    },
    {
      "comment": {
        "brief": "Releases focus from the currently focused Element when activated.",
        "full": "Releases focus from the currently focused Element when activated.\n\n# Example\nIn this example, a `TextInput` will release its focus when the Enter key on the keyboard is pressed.\n\n    <TextInput ux:Name=\"input\" Height=\"50\" Value=\"Filler text\">\n        <TextInputActionTriggered>\n            <ReleaseFocus />\n        </TextInputActionTriggered>\n    </TextInput>"
      },
      "id": {
        "id": "fuse/triggers/actions/releasefocus",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/releasefocus",
        "href": "fuse/triggers/actions/releasefocus"
      },
      "titles": {
        "indexTitle": "ReleaseFocus",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.ReleaseFocus"
      }
    },
    {
      "comment": {
        "brief": "For navigation this indicates the page (Visual) is no longer required and can be reused, or discarded,\nby the container.",
        "full": "For navigation this indicates the page (Visual) is no longer required and can be reused, or discarded,\nby the container.\n\n    <ExitingAnimation>\n        <Move X=\"1\" RelativeTo=\"Size\" Duration=\"0.3\"/>\n        <ReleasePage AtProgress=\"1\"/>\n    </ExitingAnimation>\n\nThis is currently only necessary in a `Navigator` and `PageView`. You can safely call it on transitions used potentially also in a `PageControl`."
      },
      "id": {
        "id": "fuse/triggers/actions/releasepage",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/releasepage",
        "href": "fuse/triggers/actions/releasepage"
      },
      "titles": {
        "indexTitle": "ReleasePage",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.ReleasePage"
      }
    },
    {
      "comment": {
        "brief": "Reloads the currently loaded URL",
        "full": "Reloads the currently loaded URL"
      },
      "id": {
        "id": "fuse/triggers/actions/reload",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/reload",
        "href": "fuse/triggers/actions/reload"
      },
      "titles": {
        "indexTitle": "Reload",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.Reload"
      }
    },
    {
      "comment": {
        "attributes": {
          "deprecated": true
        }
      },
      "id": {
        "id": "fuse/triggers/actions/resume",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/resume",
        "href": "fuse/triggers/actions/resume"
      },
      "titles": {
        "indexTitle": "Resume",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.Resume"
      }
    },
    {
      "comment": {
        "brief": "Reorders the siblings of a @Visual so that the @Visual will be rendered underneath.",
        "full": "Reorders the siblings of a @Visual so that the @Visual will be rendered underneath.\n\n> Note that it doesn't affect the @Visual's `ZOffset`. Instead, it reorders the @Visual amongst its siblings so that it will be drawn underneath.\n> This means that using `ZOffset` can still cause this @Visual to be rendered on top of its siblings.\n\n## Example\n\n    <ScrollView>\n        <Grid Rows=\"400, 1*\" Margin=\"10\">\n            <Panel>\n                <TextBlock ux:Name=\"textInFront\" Alignment=\"Center\" FontSize=\"20\" Color=\"#fff\">I'll be sent to the back!</TextBlock>\n                <Rectangle Margin=\"10\" CornerRadius=\"4\" ux:Name=\"topRect\">\n                    <LinearGradient>\n                        <GradientStop Offset=\"0\" Color=\"#a542db\" />\n                        <GradientStop Offset=\"1\" Color=\"#3579e6\" />\n                    </LinearGradient>\n                </Rectangle>\n            </Panel>\n            <Rectangle Margin=\"10\">\n                <Stroke Offset=\"4\" Width=\"1\" Color=\"#3579e6\" />\n                <Button Text=\"Send element to back\" Alignment=\"Bottom\">\n                    <Clicked>\n                        <SendToBack Target=\"textInFront\" />\n                    </Clicked>\n                </Button>\n            </Rectangle>\n        </Grid>\n    </ScrollView>"
      },
      "id": {
        "id": "fuse/triggers/actions/sendtoback",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/sendtoback",
        "href": "fuse/triggers/actions/sendtoback"
      },
      "titles": {
        "indexTitle": "SendToBack",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.SendToBack"
      }
    },
    {
      "comment": {
        "brief": "Permanently changes the value of a property.",
        "full": "Permanently changes the value of a property.\n\n> **Note:** If you wish to temporarily change the value of a property, use @Change instead.\n\nThe basic syntax of `Set` is as follows:\n\n    <Set myNode.MyProperty=\"MyValue\" />\n\nHowever, this is just syntactic sugar. The following is equivalent:\n\n    <Set Target=\"myNode.MyProperty\" Value=\"MyValue\" />\n\n## Example\n\nThe following example consists of a red @Rectangle that, once clicked, changes its color to blue.\n\n    <Rectangle ux:Name=\"myRectangle\" Color=\"Red\">\n        <Clicked>\n            <Set myRectangle.Color=\"Blue\" />\n        </Clicked>\n    </Rectangle>"
      },
      "id": {
        "id": "fuse/triggers/actions/set_1",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/set_1",
        "href": "fuse/triggers/actions/set_1"
      },
      "titles": {
        "indexTitle": "Set<T>",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.Set<T>"
      }
    },
    {
      "comment": {
        "brief": "Set Status Bar UI",
        "full": "Set Status Bar UI\n\n## Example\n\n    <Page>\n        <Activated>\n            <SetStatusBarUI Style=\"Dark\" Color=\"#FFF\" IsVisible=\"true\" />\n        </Activated>\n    </Page>"
      },
      "id": {
        "id": "fuse/triggers/actions/setstatusbarui",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/setstatusbarui",
        "href": "fuse/triggers/actions/setstatusbarui"
      },
      "titles": {
        "indexTitle": "SetStatusBarUI",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.SetStatusBarUI"
      }
    },
    {
      "comment": {
        "brief": "Set Screen Orientation",
        "full": "Set Screen Orientation\n\n## Example\n\n    <Page>\n        <Activated>\n            <SetWindowOrientation To=\"LandscapeLeft\" />\n        </Activated>\n    </Page>"
      },
      "id": {
        "id": "fuse/triggers/actions/setwindoworientation",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/setwindoworientation",
        "href": "fuse/triggers/actions/setwindoworientation"
      },
      "titles": {
        "indexTitle": "SetWindowOrientation",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.SetWindowOrientation"
      }
    },
    {
      "comment": {
        "brief": "Makes an @Element visible by setting `Visibility` to `Visible`.",
        "full": "Makes an @Element visible by setting `Visibility` to `Visible`.\n\n## Basic syntax\n\n    <Show TargetNode=\"myElement\" />\n\n## Example\n\n    <Grid RowCount=\"3\" ColumnCount=\"1\">\n        <Button Text=\"Show the elements\">\n            <Clicked>\n                <Show TargetNode=\"hiddenElement\" />\n                <Show TargetNode=\"collapsedElement\" />\n            </Clicked>\n        </Button>\n\n        <Panel ux:Name=\"hiddenElement\" Visibility=\"Hidden\" Background=\"Blue\" />\n        <Panel ux:Name=\"collapsedElement\" Visibility=\"Collapsed\" Background=\"Red\" />\n    </Grid>"
      },
      "id": {
        "id": "fuse/triggers/actions/show",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/show",
        "href": "fuse/triggers/actions/show"
      },
      "titles": {
        "indexTitle": "Show",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.Show"
      }
    },
    {
      "comment": {
        "brief": "Stop a video or timeline.",
        "full": "Stop a video or timeline.\n\nThe position is set to the beginning, and the playback is stopped.\n\n## Video Example\n\n    <Grid Rows=\"3*,1*\" >\n        <Video ux:Name=\"video\" Url=\"http://download.blender.org/peach/bigbuckbunny_movies/BigBuckBunny_320x180.mp4\" StretchMode=\"Uniform\" />\n        <Grid Columns=\"1*,1*\">\n            <Button Text=\"Start\">\n                <Clicked>\n                    <Resume Target=\"video\" />\n                </Clicked>\n            </Button>\n            <Button Text=\"Stop\">\n                <Clicked>\n                    <Stop Target=\"video\" />\n                </Clicked>\n            </Button>\n        </Grid>\n    </Grid>\n\n## Timeline Example\n\n    <StackPanel>\n        <Rectangle Width=\"150\" Height=\"150\" Margin=\"60\" ux:Name=\"rect\" CornerRadius=\"10\" >\n            <Stroke ux:Name=\"rectStroke\" Offset=\"10\" Width=\"3\" Color=\"#3579e6\" />\n\n            <Timeline  ux:Name=\"timeline\" TimeMultiplier=\"0.4\">\n                <Rotate>\n                    <Keyframe DegreesZ=\"360\" Time=\"1\" />\n                </Rotate>\n                <Change Target=\"rect.Color\">\n                    <Keyframe Value=\"#3579e6\" Time=\"1\" />\n                </Change>\n            </Timeline>\n        </Rectangle>\n\n        <Slider Width=\"250\" ux:Name=\"targetProgress\" Value=\"0.5\" Minimum=\"0\" Maximum=\"1\" />\n        <Button Text=\"Animate to\" Alignment=\"Bottom\">\n            <Clicked>\n                <PlayTo Target=\"timeline\" Progress=\"{ReadProperty targetProgress.Value}\" />\n            </Clicked>\n        </Button>\n\n        <Button ux:Name=\"resume\" Text=\"Resume\" Alignment=\"Bottom\">\n            <Clicked>\n                <Resume Target=\"timeline\" />\n            </Clicked>\n        </Button>\n\n        <Button Text=\"Pause\" Alignment=\"Bottom\">\n            <Clicked>\n                <Pause Target=\"timeline\" />\n            </Clicked>\n        </Button>\n\n        <Button Text=\"Stop\" Alignment=\"Bottom\">\n            <Clicked>\n                <Stop Target=\"timeline\" />\n            </Clicked>\n        </Button>\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/triggers/actions/stop",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/stop",
        "href": "fuse/triggers/actions/stop"
      },
      "titles": {
        "indexTitle": "Stop",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.Stop"
      }
    },
    {
      "comment": {
        "brief": "Stops loading the currently loading URL",
        "full": "Stops loading the currently loading URL"
      },
      "id": {
        "id": "fuse/triggers/actions/stoploading",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/stoploading",
        "href": "fuse/triggers/actions/stoploading"
      },
      "titles": {
        "indexTitle": "StopLoading",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.StopLoading"
      }
    },
    {
      "comment": {
        "brief": "A unified action that controls a @Timeline.",
        "full": "A unified action that controls a @Timeline.\n\nThese actions differ from the `IPlayback` interface, which only supports a plain media view of the Timeline. `TimelineAction` exposes the advanced functionality of @Timeline, and matches the JavaScript interface."
      },
      "id": {
        "id": "fuse/triggers/actions/timelineaction",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/timelineaction",
        "href": "fuse/triggers/actions/timelineaction"
      },
      "titles": {
        "indexTitle": "TimelineAction",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.TimelineAction"
      }
    },
    {
      "comment": {
        "brief": "Toggles the state of a toggleable component.",
        "full": "Toggles the state of a toggleable component.\n\nIt is not recommended to use this trigger action to toggle a logical state in your app. For that, use\nan Observable boolean in JavaScript and manipulate its value in a callback.\n\n## Example\n\n    <StackPanel>\n        <Switch ux:Name=\"switch1\" />\n\n        <Button Text=\"Toggle!\">\n            <Clicked>\n                <Toggle Target=\"switch1\" />\n            </Clicked>\n        </Button>\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/triggers/actions/toggle",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/toggle",
        "href": "fuse/triggers/actions/toggle"
      },
      "titles": {
        "indexTitle": "Toggle",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.Toggle"
      }
    },
    {
      "comment": {
        "brief": "Lets you create a temporary layout change.\nThis can be used to do visual layout transitions without needing actual layout changes.",
        "full": "Lets you create a temporary layout change.\nThis can be used to do visual layout transitions without needing actual layout changes.\n\nIt has no noticeable effect on its own, and needs to be combined with a @(LayoutAnimation).\nThe @(LayoutAnimation) will in turn be triggered by this action.\n\n# Example\nThis example demonstrates `TransitionLayout` in action when a button is clicked.\n\n    <DockPanel>\n        <Panel Dock=\"Top\" Height=\"20\" ux:Name=\"originElement\" />\n        <Button Height=\"100\" Dock=\"Bottom\" Text=\"Transition!\">\n            <LayoutAnimation>\n                <Move X=\"1\" Y=\"1\" RelativeTo=\"WorldPositionChange\" Duration=\"1\" />\n                <Resize X=\"1\" Y=\"1\" RelativeTo=\"SizeChange\" Duration=\"1\" />\n            </LayoutAnimation>\n            <Clicked>\n                <TransitionLayout From=\"originElement\" />\n            </Clicked>\n        </Button>\n    </DockPanel>\n\nWhen clicked, the @(Button) in this example will perform a transition over 1 second from the position and size of `originElement` (top edge of the @(DockPanel)) to its actual position and size (bottom edge of the @(DockPanel))."
      },
      "id": {
        "id": "fuse/triggers/actions/transitionlayout",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/transitionlayout",
        "href": "fuse/triggers/actions/transitionlayout"
      },
      "titles": {
        "indexTitle": "TransitionLayout",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.TransitionLayout"
      }
    },
    {
      "comment": {
        "brief": "An action that controls state of a @StateGroup.",
        "full": "An action that controls state of a @StateGroup.\n\n## Example\nThe following example displays a red panel that will turn its color in green when clicked.\n\n    <Panel ux:Name=\"thePanel\" Width=\"100\" Height=\"100\">\n        <StateGroup ux:Name=\"stateGroup\">\n            <State ux:Name=\"redState\">\n                <Change thePanel.Color=\"#f00\" Duration=\"0.2\"/>\n            </State>\n            <State ux:Name=\"greenState\">\n                <Change thePanel.Color=\"#0f0\" Duration=\"0.2\"/>\n            </State>\n        </StateGroup>\n\n        <Clicked>\n            <TransitionState Value=\"greenState\" Target=\"stateGroup\" />\n        </Clicked>\n    </Panel>"
      },
      "id": {
        "id": "fuse/triggers/actions/transitionstate",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/transitionstate",
        "href": "fuse/triggers/actions/transitionstate"
      },
      "titles": {
        "indexTitle": "TransitionState",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.TransitionState"
      }
    },
    {
      "comment": {
        "brief": "Trigger actions performs an action at a given delay after a trigger is activated.",
        "full": "Trigger actions performs an action at a given delay after a trigger is activated.\n\nActions are similar to @Animators, but are one-off events that fire at a particular point in time. Like animators they are activated by\ntriggers, but their effects are not reversed when their containing trigger is deactivated. Commonly examples of actions include @Set,\n@Callback, @Hide and @Show.\n\n## Available trigger actions\n\n[subclass Fuse.Triggers.Actions.TriggerAction]",
        "attributes": {
          "topic": "Trigger actions"
        }
      },
      "id": {
        "id": "fuse/triggers/actions/triggeraction",
        "parentId": "fuse/triggers/actions",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/triggeraction",
        "href": "fuse/triggers/actions/triggeraction"
      },
      "titles": {
        "indexTitle": "TriggerAction",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.TriggerAction"
      }
    },
    {
      "comment": {
        "brief": "Represents an argument to be passed with @RaiseUserEvent",
        "full": "Represents an argument to be passed with @RaiseUserEvent\n\nA user event may also include a number of arguments that can be\nread from JavaScript.\n\nUserEventArg accepts `IntValue`, `FloatValue`, `StringValue` or\n`BoolValue`.\n\n> *Note:* See [this article](/docs/basics/creating-components#events-userevent)\nfor a more complete explanation of user events.\n\n## Example\n\nThe following example shows a @Button that, when clicked, raises a\nuser event with the argument `message`, which has the value\n`Hello from UX!`.\n\n    <UserEvent ux:Name=\"myEvent\" />\n    <Button Text=\"Raise event with message\">\n        <Clicked>\n            <RaiseUserEvent EventName=\"myEvent\">\n                <UserEventArg Name=\"message\" StringValue=\"Hello from UX!\" />\n            </RaiseUserEvent>\n        </Clicked>\n    </Button>"
      },
      "id": {
        "id": "fuse/triggers/actions/usereventarg",
        "parentId": "fuse/triggers/actions",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/usereventarg",
        "href": "fuse/triggers/actions/usereventarg"
      },
      "titles": {
        "indexTitle": "UserEventArg",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.UserEventArg"
      }
    },
    {
      "id": {
        "id": "fuse/triggers/actions/webviewnavaction",
        "parentId": "fuse/triggers/actions",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/actions/webviewnavaction",
        "href": "fuse/triggers/actions/webviewnavaction"
      },
      "titles": {
        "indexTitle": "WebViewNavAction",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Actions.WebViewNavAction"
      }
    },
    {
      "comment": {
        "brief": "Triggers when the element is added to the visual tree.",
        "full": "Triggers when the element is added to the visual tree.\n\n`AddingAnimation` is by default a backward animation, meaning it will\nanimate from progress 1 back to 0.\n\n## Example\n\nThe following example showcases a list that you can add elements to by\npressing a button. Elements added are animated in using an\n`AddingAnimation`:\n\n    <StackPanel Width=\"100%\">\n        <JavaScript>\n            var Observable = require('FuseJS/Observable');\n            var elements = Observable({value: \"Element\"});\n            function addElement() {\n                elements.add({value: \"Element\"});\n            }\n            module.exports = {elements, addElement};\n        </JavaScript>\n        <Each Items=\"{elements}\">\n            <Panel Width=\"100%\" >\n                <Text Value=\"{value}\" Alignment=\"CenterLeft\"/>\n                <AddingAnimation>\n                    <Move RelativeTo=\"Size\" Duration=\".2\" X=\"2\" />\n                </AddingAnimation>\n            </Panel>\n        </Each>\n        <Button Text=\"Add more\" Clicked=\"{addElement}\"/>\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/triggers/addinganimation",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/addinganimation",
        "href": "fuse/triggers/addinganimation"
      },
      "titles": {
        "indexTitle": "AddingAnimation",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.AddingAnimation"
      }
    },
    {
      "comment": {
        "brief": "Triggers if run on an Android device",
        "full": "Triggers if run on an Android device\n\n## Example\n\nThis example sets a panel's background color to green if the app is\nrunning on Android. If the app is ran on another platform, it will be\nred:\n\n    <Panel ux:Name=\"panel\" Background=\"#F00\" >\n        <Android>\n            <Change panel.Background=\"#0F0\" />\n        </Android>\n    </Panel>"
      },
      "id": {
        "id": "fuse/triggers/android",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/android",
        "href": "fuse/triggers/android"
      },
      "titles": {
        "indexTitle": "Android",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Android"
      }
    },
    {
      "comment": {
        "brief": "Marks a UX node as busy.",
        "full": "Marks a UX node as busy.\n\nThere are several cases where we need to perform some background task, for instance fetching data over the network or performing some expensive computation. `Busy` can be used to coorindate this busy activity between JavaScript and UX.\n\nWe often want to be able to signal to our view (UX) that our data is not yet ready for display. Marking a node as busy will activate any `WhileBusy` triggers on it. This is the same mechanism used to indicate that an image is loading.\n\n## Examples\n\n### Loading data\n\nWe might wish to display a loading indicator while making an HTTP request.\n\n    <Panel>\n        <WhileBusy>\n            <Text Value=\"Loading...\"/>\n        </WhileBusy>\n        <Busy IsActive=\"false\" ux:Name=\"busy\"/>\n        <JavaScript>\n            exports.startLoad = function() {\n                busy.activate()\n                fetch( \"http://example.com/some/data\" ).then( function(response) {\n                    //use the response\n                    busy.deactivate()\n                }).catch(function(err) {\n                    //make sure to disable the busy status here as well\n                    busy.deactivate()\n                })\n            }\n        </JavaScript>\n        <Activated Handler=\"{startLoad}\"/>\n    </Panel>\n\nThis example starts loading data when the page is activated. The `Loading...` text will be shown while it is loading, and removed once it is completed.\n\n### Preparing for navigation\n\nThe @Navigator waits for a busy page to finish preparing before navigating to it. We can use `Busy` to ensure our bindings our done before this happens.\n\n    <Page>\n        <Busy Activity=\"Preparing\" On=\"ParameterChanged\" ux:Name=\"busy\"/>\n        <JavaScript>\n            exports.name = Observable()\n            this.Parameter.onValueChanged( module, function(v) {\n                exports.name.value = v.name\n                busy.deactivate()\n            })\n        </JavaScript>\n        <Text Value=\"{name}\"/>\n    </Page>"
      },
      "id": {
        "id": "fuse/triggers/busy",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/busy",
        "href": "fuse/triggers/busy"
      },
      "titles": {
        "indexTitle": "Busy",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Busy"
      }
    },
    {
      "id": {
        "id": "fuse/triggers/busytask",
        "parentId": "fuse/triggers",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/busytask",
        "href": "fuse/triggers/busytask"
      },
      "titles": {
        "indexTitle": "BusyTask",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.BusyTask"
      }
    },
    {
      "comment": {
        "attributes": {
          "deprecated": true
        }
      },
      "id": {
        "id": "fuse/triggers/busytaskmodule",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/busytaskmodule",
        "href": "fuse/triggers/busytaskmodule"
      },
      "titles": {
        "indexTitle": "BusyTaskModule",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.BusyTaskModule"
      }
    },
    {
      "comment": {
        "brief": "Pulses when the busy status of a node is cleared.",
        "full": "Pulses when the busy status of a node is cleared.\n\n`Completed` is used to respond to the completion of a preparation, loading, or other busy task.\n\nThis example draws attention to an `Image` when it has completed loading:\n\n    <Image Url=\"some_big_image\">\n        <Completed>\n            <Scale Factor=\"0.8\" Duration=\"0.4\"/>\n        </Completed>\n    </Image>\n\n`Completed` always fires, even if the node wasn't busy before. This makes it suitable for things that should always run. It also makes it useful in combination with other triggers. For example, the below scales the image when the navigation page is both active and completed.\n\n    <Page>\n        <Image Alignment=\"Center\" Url=\"some_image\" ux:Name=\"theImage\"/>\n        <WhileActive>\n            <Completed>\n                <Scale Target=\"theImage\" Factor=\"1.5\" Duration=\"0.3\"/>\n            </Completed>\n        </WhileActive>\n    </Page>"
      },
      "id": {
        "id": "fuse/triggers/completed",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/completed",
        "href": "fuse/triggers/completed"
      },
      "titles": {
        "indexTitle": "Completed",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Completed"
      }
    },
    {
      "id": {
        "id": "fuse/triggers/completedeventargs",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/completedeventargs",
        "href": "fuse/triggers/completedeventargs"
      },
      "titles": {
        "indexTitle": "CompletedEventArgs",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.CompletedEventArgs"
      }
    },
    {
      "comment": {
        "brief": "DEPRECATED: Use @WhileContainsText instead",
        "full": "DEPRECATED: Use @WhileContainsText instead"
      },
      "id": {
        "id": "fuse/triggers/containingtext",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/containingtext",
        "href": "fuse/triggers/containingtext"
      },
      "titles": {
        "indexTitle": "ContainingText",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.ContainingText"
      }
    },
    {
      "comment": {
        "brief": "Triggers when an interaction completes.",
        "full": "Triggers when an interaction completes.\n\n`InteractionCompleted` indicates the user is done interacting with an\nelement, and is a counterpart to @WhileInteracting.\n\n## Example\n\nThe following example shows a blue panel with a slider on it. When\nfinishing a slide of the slider, the panel blinks red.\n\n    <Panel ux:Name=\"panel\" Color=\"Blue\">\n        <Slider >\n            <InteractionCompleted>\n                <Change DurationBack=\"0.5\" panel.Color=\"Red\"/>\n            </InteractionCompleted>\n        </Slider>\n    </Panel>"
      },
      "id": {
        "id": "fuse/triggers/interactioncompleted",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/interactioncompleted",
        "href": "fuse/triggers/interactioncompleted"
      },
      "titles": {
        "indexTitle": "InteractionCompleted",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.InteractionCompleted"
      }
    },
    {
      "comment": {
        "brief": "Triggers if run on an iOS device",
        "full": "Triggers if run on an iOS device\n\n## Example\n\nThis example sets a panel's background color to green if the app is\nrunning on iOS. If the app is ran on another platform, it will be red:\n\n    <Panel ux:Name=\"panel\" Background=\"#F00\" >\n        <iOS>\n            <Change panel.Background=\"#0F0\" />\n        </iOS>\n    </Panel>"
      },
      "id": {
        "id": "fuse/triggers/ios",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/ios",
        "href": "fuse/triggers/ios"
      },
      "titles": {
        "indexTitle": "iOS",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.iOS"
      }
    },
    {
      "comment": {
        "brief": "Triggers when the layout of an element changes",
        "full": "Triggers when the layout of an element changes\n\nWhen an Element has certain properties like Width, Height or Margin\n(collectively reffered to as \"layout properties\") changed or when its\nlocation in the visual tree changes, we can trigger a `LayoutAnimation`.\n\nCalculating layout for a large UX-document can be quite costly. When\nanimating layout properties with Change animators, we run the risk of\nforcing a new layout to be calculated each frame. This can very easily\nlead to frame drops.\n\nThe `LayoutAnimation` trigger can be used to make this more pleasant.\nFor example, instead of animating the Width of an Element using Change,\nwe can use Set and react to this change using a LayoutAnimation. Inside\nLayoutAnimation we specify how our element should move/resize from its\nprevious position to its new position.\n\n## Example\n\nThis example shows three rectangles, a teal, a red and a blue one. If\nthe red or blue rectangle is clucked, the Width and Alignment\nproperties of the teal rectangle gets smoothly animated.\n\n    <StackPanel>\n        <Rectangle ux:Name=\"panel\" Width=\"100\" Height=\"100\" CornerRadius=\"5\" Color=\"Teal\" Alignment=\"Center\">\n            <LayoutAnimation>\n                <Resize X=\"1\" Y=\"1\" RelativeTo=\"SizeChange\" Duration=\"0.25\"/>\n                <Move X=\"1\" Y=\"1\" RelativeTo=\"PositionChange\" Duration=\"0.25\"/>\n            </LayoutAnimation>\n        </Rectangle>\n        <Rectangle Color=\"Red\" CornerRadius=\"5\" Width=\"100\" Height=\"50\">\n            <Clicked>\n                <Set panel.Alignment=\"Left\"/>\n                <Set panel.Width=\"200\"/>\n            </Clicked>\n        </Rectangle>\n        <Rectangle Color=\"Blue\" CornerRadius=\"5\" Width=\"100\" Height=\"50\">\n            <Clicked>\n                <Set panel.Alignment=\"Right\"/>\n                <Set panel.Width=\"50\"/>\n            </Clicked>\n        </Rectangle>\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/triggers/layoutanimation",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/layoutanimation",
        "href": "fuse/triggers/layoutanimation"
      },
      "titles": {
        "indexTitle": "LayoutAnimation",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.LayoutAnimation"
      }
    },
    {
      "id": {
        "id": "fuse/triggers/layouttransitionedargs",
        "parentId": "fuse/triggers",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/layouttransitionedargs",
        "href": "fuse/triggers/layouttransitionedargs"
      },
      "titles": {
        "indexTitle": "LayoutTransitionedArgs",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.LayoutTransitionedArgs"
      }
    },
    {
      "comment": {
        "brief": "Triggers when the back-button is pressed",
        "full": "Triggers when the back-button is pressed\n\nThis trigger fires when the user presses either a physical or emulated\nback button on their device.\n\n> Be aware that @Router also interacts with the back-button. Using both\n> OnBackButton and Router in the same application might lead to\n> undesired behavior.\n\n## Example\n\nThe following code will flash the screen blue when the back button is\npressed:\n\n    <Panel>\n        <Rectangle ux:Name=\"rect\" Layer=\"Background\" Color=\"#F00\" />\n        <OnBackButton>\n            <Change rect.Color=\"#00F\" Duration=\"0.2\" />\n        </OnBackButton>\n    </Panel>"
      },
      "id": {
        "id": "fuse/triggers/onbackbutton",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/onbackbutton",
        "href": "fuse/triggers/onbackbutton"
      },
      "titles": {
        "indexTitle": "OnBackButton",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.OnBackButton"
      }
    },
    {
      "comment": {
        "brief": "Triggers when a specific key is pressed",
        "full": "Triggers when a specific key is pressed\n\nFor a complete list of supported keys, check out the @Key enum list.\n\n> Please note that not all platforms support all settings for Key.\n\n## Example\n\nThe following example will flash the screen blue when the \"menu\" button\n(which is present on some older Android devices) is pressed:\n\n    <Panel>\n        <Rectangle ux:Name=\"rect\" Layer=\"Background\" Color=\"#F00\" />\n        <OnKeyPress Key=\"MenuButton\">\n            <Change rect.Color=\"#00F\" Duration=\"0.2\" />\n        </OnKeyPress>\n    </Panel>"
      },
      "id": {
        "id": "fuse/triggers/onkeypress",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/onkeypress",
        "href": "fuse/triggers/onkeypress"
      },
      "titles": {
        "indexTitle": "OnKeyPress",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.OnKeyPress"
      }
    },
    {
      "comment": {
        "brief": "Triggers when a @UserEvent is raised.",
        "full": "Triggers when a @UserEvent is raised.\n\n> *Note:* See [this article](/docs/basics/creating-components#events-userevent)\n> for a more complete explanation of user events.\n\nBy default, `OnUserEvent` will only listen for events that are\ndeclared in one of its ancestor nodes. If you want to listen for\nevents coming from anywhere, set the `Filter` property to `Global`.\n\n`OnUserEvent` also lets you attach a JavaScript handler to the event.\n\n    <OnUserEvent EventName=\"myEvent\" Handler=\"{myHandler}\" />\n\nThe handler function is called with the arguments that were passed\nwith the event as a plain JavaScript object.\n\n## Example\n\nThis example defines a @UserEvent and triggers it when the panel\nis clicked:\n\n    <Panel ux:Name=\"panel\" Color=\"Blue\">\n        <UserEvent Name=\"myEvent\"/>\n        <OnUserEvent EventName=\"myEvent\">\n            <Change panel.Color=\"Red\" DurationBack=\"0.5\" />\n        </OnUserEvent>\n        <Clicked>\n            <RaiseUserEvent EventName=\"myEvent\" />\n        </Clicked>\n    </Panel>\n\nThis example illustrates how you can read the arguments that were\npassed with the event from a JavaScript handler.\n\n    <UserEvent ux:Name=\"myEvent\" />\n\n    <Panel Color=\"#123\">\n        <Clicked>\n            <RaiseUserEvent EventName=\"myEvent\">\n                <UserEventArg Name=\"myArgument\" StringValue=\"Some value\" />\n            </RaiseUserEvent>\n        </Clicked>\n    </Panel>\n\n    <OnUserEvent EventName=\"myEvent\" Handler=\"{eventHandler}\" />\n\n    <JavaScript>\n        function eventHandler(args) {\n            console.log(\"myEvent raised with argument 'myArgument': \" + args.myArgument);\n        }\n\n        module.exports = { eventHandler: eventHandler };\n    </JavaScript>"
      },
      "id": {
        "id": "fuse/triggers/onuserevent",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/onuserevent",
        "href": "fuse/triggers/onuserevent"
      },
      "titles": {
        "indexTitle": "OnUserEvent",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.OnUserEvent"
      }
    },
    {
      "comment": {
        "brief": "Triggers when a @WebView begins loading a page",
        "full": "Triggers when a @WebView begins loading a page\n\n## Example\n\nThis example will blink the blue background red when the page begins\nloading:\n\n    <Panel ux:Name=\"panel\" Color=\"Blue\">\n        <NativeViewHost Height=\"50%\">\n            <WebView Url=\"http://interwebs.com\">\n                <PageBeginLoading>\n                    <Change DurationBack=\"0.5\" panel.Color=\"Red\" />\n                </PageBeginLoading>\n            </WebView>\n        </NativeViewHost>\n    </Panel>"
      },
      "id": {
        "id": "fuse/triggers/pagebeginloading",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/pagebeginloading",
        "href": "fuse/triggers/pagebeginloading"
      },
      "titles": {
        "indexTitle": "PageBeginLoading",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.PageBeginLoading"
      }
    },
    {
      "comment": {
        "brief": "Triggers when a @WebView finishes loading a page",
        "full": "Triggers when a @WebView finishes loading a page\n\n## Example\n\nThis example will blink the blue background green when the page finishes\nloading:\n\n    <Panel ux:Name=\"panel\" Color=\"Blue\">\n        <NativeViewHost Height=\"50%\">\n            <WebView Url=\"http://interwebs.com\">\n                <PageLoaded>\n                    <Change DurationBack=\"0.5\" panel.Color=\"Green\" />\n                </PageLoaded>\n            </WebView>\n        </NativeViewHost>\n    </Panel>"
      },
      "id": {
        "id": "fuse/triggers/pageloaded",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/pageloaded",
        "href": "fuse/triggers/pageloaded"
      },
      "titles": {
        "indexTitle": "PageLoaded",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.PageLoaded"
      }
    },
    {
      "comment": {
        "brief": "Triggers when a @Slider or other compatible control changes its value.",
        "full": "Triggers when a @Slider or other compatible control changes its value.\n\nProgressAnimation can be used together with a slider to animate\nelements as one slides its thumb. ProgressAnimation always goes from\n0 to 1 as one slides the slider from its minimum value to its maximum\nvalue.\n\n## Example\n\nThis example shows a slider, and blurs the slider itself with the\nblur-radius taken from the slider-value:\n\n    <Panel Color=\"Black\">\n        <Slider>\n            <Blur ux:Name=\"blur\" Radius=\"0\"/>\n            <ProgressAnimation>\n                <Change blur.Radius=\"10\"/>\n            </ProgressAnimation>\n        </Slider>\n    </Panel>\n\n## Compatible controls\n\nProgressAnimation works with classes that implement `Fuse.Triggers.IProgress`.\n\n[subclass Fuse.Triggers.IProgress]"
      },
      "id": {
        "id": "fuse/triggers/progressanimation",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/progressanimation",
        "href": "fuse/triggers/progressanimation"
      },
      "titles": {
        "indexTitle": "ProgressAnimation",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.ProgressAnimation"
      }
    },
    {
      "comment": {
        "brief": "Helps you create a \"pull to reload\" interaction with a `ScrollView`.",
        "full": "Helps you create a \"pull to reload\" interaction with a `ScrollView`.\n\nIt is implemented as a `ScrollingAnimation`, with a set of properties that let you bind different states that should be triggered during different stages of interaction:\n\n* Pulling - Active when the user is actively pulling down beond the top of the content\n* PulledPastThreshold - Active when the user has pulled down enough to activate loading\n* Loading - Active when the \"loading\" has started. Loading starts when the user has pulled past the threshold, and then leaves the threshold area.\n* Rest - Active when the user has pulled down the content, but their last movement was upwards.\nIn addition, you have a callback, `ReloadHandler`, which is called when the `Loading` state activates.\n\n* Note that `PullToReload` inherits from @ScrollingAnimation and therefore can be tweaked further using its properties. Here is an example of how we can tweak it to be pulled from the bottom instead using the `Range` property from `ScrollingAnimation`:\n\n```\n<PullToReload Range=\"SnapMax\">\n    ...\n</PullToReload>\n```\n\nSee the [Pull to reload](/examples/pull-to-reload), for a complete example on how to use it.\n\n# Example\n\nThe following example flashes the app background in different colors as the different states of the `PullToReload` happen:\n\n    <ScrollView>\n        <PullToReload>\n            <Timeline ux:Name=\"redFlash\">\n                <Change color.Color=\"#F00\" Duration=\"1\"/>\n            </Timeline>\n            <Timeline ux:Name=\"pinkFlash\">\n                <Change color.Color=\"#FFC0DB\" Duration=\"1\"/>\n            </Timeline>\n            <Timeline ux:Name=\"greenFlash\">\n                <Change color.Color=\"#0F0\" Duration=\"1\"/>\n            </Timeline>\n            <Timeline ux:Name=\"blueFlash\">\n                <Change color.Color=\"#00F\" Duration=\"1\"/>\n            </Timeline>\n            <State ux:Binding=\"Pulling\">\n                <Cycle Target=\"redFlash.Progress\" Low=\"0\" High=\"1\" Frequency=\"1\" />\n            </State>\n            <State ux:Binding=\"PulledPastThreshold\">\n                <Cycle Target=\"pinkFlash.Progress\" Low=\"0\" High=\"1\" Frequency=\"1\" />\n            </State>\n            <State ux:Binding=\"Loading\">\n                <Cycle Target=\"greenFlash.Progress\" Low=\"0\" High=\"1\" Frequency=\"1\" />\n            </State>\n            <State ux:Binding=\"Rest\">\n                <Cycle Target=\"blueFlash.Progress\" Low=\"0\" High=\"1\" Frequency=\"1\" />\n            </State>\n        </PullToReload>\n        <StackPanel>\n            <Text Margin=\"20\">The quick brown fox</Text>\n            <Text Margin=\"20\">Jumps over the lazy dog</Text>\n        </StackPanel>\n        <SolidColor ux:Name=\"color\" Color=\"#FFF\"/>\n    </ScrollView>"
      },
      "id": {
        "id": "fuse/triggers/pulltoreload",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/pulltoreload",
        "href": "fuse/triggers/pulltoreload"
      },
      "titles": {
        "indexTitle": "PullToReload",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.PullToReload"
      }
    },
    {
      "comment": {
        "brief": "A common base for pulse-like triggers (thus that pulse when an event is triggered).",
        "full": "A common base for pulse-like triggers (thus that pulse when an event is triggered).\n\nNOTE: Not all the pulse-like triggers have been migrated to this base class yet."
      },
      "id": {
        "id": "fuse/triggers/pulsetrigger_1",
        "parentId": "fuse/triggers",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/pulsetrigger_1",
        "href": "fuse/triggers/pulsetrigger_1"
      },
      "titles": {
        "indexTitle": "PulseTrigger<ArgsT>",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.PulseTrigger<ArgsT>"
      }
    },
    {
      "comment": {
        "brief": "Animates using a value clamped between a minimum and a maximum as progress.",
        "full": "Animates using a value clamped between a minimum and a maximum as progress.\n\nThis is useful when you want to animate something between two arbitrary values.\n\n## Example\nIn this example, an @(RangeAnimation) is used to animate a panel 360 degrees as a @(RangeControl2D) goes from 0 to 100.\n\n    <RangeControl2D Width=\"180\" Height=\"180\" Margin=\"2\" ux:Name=\"rangeControl\">\n        <CircularRangeBehavior/>\n        <Panel ux:Name=\"thumb\" Margin=\"4\">\n            <Rectangle Color=\"#fff\" Alignment=\"Right\" Height=\"18\" Width=\"48\" CornerRadius=\"4\" />\n        </Panel>\n        <RangeAnimation Minimum=\"0\" Maximum=\"100\" Value=\"{ReadProperty rangeControl.ValueX}\">\n            <Rotate Target=\"thumb\" Degrees=\"360\" />\n        </RangeAnimation>\n        <Circle Color=\"#aaa\" />\n    </RangeControl2D>"
      },
      "id": {
        "id": "fuse/triggers/rangeanimation",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/rangeanimation",
        "href": "fuse/triggers/rangeanimation"
      },
      "titles": {
        "indexTitle": "RangeAnimation",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.RangeAnimation"
      }
    },
    {
      "comment": {
        "brief": "Animates when the parent element is removed",
        "full": "Animates when the parent element is removed\n\nThis is very commonly used together with lists of items.\n\n#Example\nThe following example contains a list, where every item plays a `RemovingAnimation` as they are removed:\n\n    <JavaScript>\n        var Observable = require('FuseJS/Observable');\n        var list = Observable(\"Dog\", \"Cat\", \"Horse\");\n        function rm(data) {\n            list.remove(data.data);\n        }\n        module.exports = {\n            data: list,\n            rm: rm\n        };\n    </JavaScript>\n    <StackPanel>\n        <Each Items=\"{data}\" >\n            <Panel>\n                <Button Margin=\"10\" Alignment=\"CenterRight\" Text=\"Delete\" Clicked=\"{rm}\"/>\n                <Rectangle Height=\"1\" Alignment=\"Bottom\">\n                    <Stroke Color=\"#DDD\" />\n                </Rectangle>\n                <Text Margin=\"10\" Value=\"data()\" />\n                <RemovingAnimation>\n                    <Move RelativeTo=\"Size\" X=\"-1\" Duration=\"0.4\" Easing=\"CircularOut\" />\n                </RemovingAnimation>\n            </Panel>\n        </Each>\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/triggers/removinganimation",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/removinganimation",
        "href": "fuse/triggers/removinganimation"
      },
      "titles": {
        "indexTitle": "RemovingAnimation",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.RemovingAnimation"
      }
    },
    {
      "comment": {
        "brief": "Triggers when the ScrollView is scrolled to within a specified region.",
        "full": "Triggers when the ScrollView is scrolled to within a specified region.\n\n`Scrolled` triggers only once when the ScrollView enters the region. It will not trigger again until the scrolling leaves and comes back. See the `check` function if you need to force a recheck."
      },
      "id": {
        "id": "fuse/triggers/scrolled",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/scrolled",
        "href": "fuse/triggers/scrolled"
      },
      "titles": {
        "indexTitle": "Scrolled",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Scrolled"
      }
    },
    {
      "id": {
        "id": "fuse/triggers/scrolledargs",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/scrolledargs",
        "href": "fuse/triggers/scrolledargs"
      },
      "titles": {
        "indexTitle": "ScrolledArgs",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.ScrolledArgs"
      }
    },
    {
      "comment": {
        "brief": "Animates over a given scroll range.",
        "full": "Animates over a given scroll range.\n\nThis trigger allows you to animate properties based on the absolute position of a @ScrollView.\n\nIn this example, we remove a top ledge as a ScrollView scrolls down:\n\n    <Panel>\n        <Panel Alignment=\"Top\" Height=\"50\" ux:Name=\"ledge\">\n            <Text Alignment=\"Center\" TextAlignment=\"Center\" Color=\"#fff\" Value=\"TopLedge\" />\n            <Rectangle  Fill=\"#000\" />\n        </Panel>\n        <ScrollView>\n            <ScrollingAnimation From=\"0\" To=\"50\">\n                <Change ledge.Opacity=\"0\" />\n            </ScrollingAnimation>\n            <StackPanel>\n                <!-- Block out the top ledge in the scrollview -->\n                <Panel Height=\"50\" />\n                <!-- ... Content ... -->\n            </StackPanel>\n        </ScrollView>\n    </Panel>"
      },
      "id": {
        "id": "fuse/triggers/scrollinganimation",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/scrollinganimation",
        "href": "fuse/triggers/scrollinganimation"
      },
      "titles": {
        "indexTitle": "ScrollingAnimation",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.ScrollingAnimation"
      }
    },
    {
      "comment": {
        "brief": "A @Trigger that is managed by a @StateGroup.",
        "full": "A @Trigger that is managed by a @StateGroup.\n\nSee @StateGroup for more information."
      },
      "id": {
        "id": "fuse/triggers/state",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/state",
        "href": "fuse/triggers/state"
      },
      "titles": {
        "indexTitle": "State",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.State"
      }
    },
    {
      "comment": {
        "brief": "StateGroup manages a set of @State triggers, making sure only a single @State is active at once.\nA @State is a regular @Trigger that is controlled by a @StateGroup.\nAnimators inside a @State define what should change while that state is active.",
        "full": "StateGroup manages a set of @State triggers, making sure only a single @State is active at once.\nA @State is a regular @Trigger that is controlled by a @StateGroup.\nAnimators inside a @State define what should change while that state is active.\n\nThe basic structure of a StateGroup looks like this:\n\n```xml\n<StateGroup>\n\t<State ux:Name=\"firstState\" />\n\t<State ux:Name=\"secondState\" />\n</StateGroup>\n```\n\nNow, this setup does nothing at all. We need to add some animators to our @States, so that they actually do something.\nWe'll add a @Panel as well, so we have something to animate.\n\n```xml\n<Panel ux:Name=\"thePanel\" Width=\"100\" Height=\"100\" />\n\t<StateGroup>\n\t\t<State ux:Name=\"firstState\">\n\t\t\t<Change thePanel.Color=\"#f00\" />\n\t\t</State>\n\t\t<State ux:Name=\"secondState\">\n\t\t\t<Change thePanel.Color=\"#00f\" />\n\t\t</State>\t\n\t</StateGroup>\n</Panel>\n```\n\nSince the first @State in a StateGroup will be activated by default, the above example will display a red @Panel.\n\nAt this point, we'd like to switch to a different state somehow. This can be achieved in several ways, as seen below.\n\n## The `Active` property\n\nThe `Active` property can be used to activate a particular @State.\nThe below example displays a colored @Panel, along with three buttons that change its color.\n\n```xml\n<StackPanel>\n\t<Panel ux:Name=\"thePanel\" Width=\"100\" Height=\"100\" />\n\n\t<StateGroup ux:Name=\"stateGroup\">\n\t\t<State ux:Name=\"redState\">\n\t\t\t<Change thePanel.Color=\"#f00\" Duration=\"0.2\"/>\n\t\t</State>\n\t\t<State ux:Name=\"greenState\">\n\t\t\t<Change thePanel.Color=\"#0f0\" Duration=\"0.2\"/>\n\t\t</State>\n\t\t<State ux:Name=\"blueState\">\n\t\t\t<Change thePanel.Color=\"#00f\" Duration=\"0.2\"/>\n\t\t</State>\n\t</StateGroup>\n\n\t<Grid ColumnCount=\"3\">\n\t\t<Button Text=\"Red\">\n\t\t\t<Clicked>\n\t\t\t\t<Set stateGroup.Active=\"redState\"/>\n\t\t\t</Clicked>\n\t\t</Button>\n\t\t<Button Text=\"Green\">\n\t\t\t<Clicked>\n\t\t\t\t<Set stateGroup.Active=\"greenState\"/>\n\t\t\t</Clicked>\n\t\t</Button>\n\t\t<Button Text=\"Blue\">\n\t\t\t<Clicked>\n\t\t\t\t<Set stateGroup.Active=\"blueState\"/>\n\t\t\t</Clicked>\n\t\t</Button>\n\t</Grid>\n</StackPanel>\n```\n\n## TransitionState\n\nInstead of directly jumping to a particular state, the @TransitionState action can be used to advance to the next @State in a StateGroup, following the order in which they are declared.\nIf a @TransitionState is triggered while the last @State is active, it wraps around to activate the first @State.\n\nThe following example displays a panel that will cycle its color between red, green and blue when clicked.\n\n```xml\n<Panel ux:Name=\"thePanel\" Width=\"100\" Height=\"100\">\n\t<StateGroup ux:Name=\"stateGroup\">\n\t\t<State ux:Name=\"redState\">\n\t\t\t<Change thePanel.Color=\"#f00\" Duration=\"0.2\"/>\n\t\t</State>\n\t\t<State ux:Name=\"greenState\">\n\t\t\t<Change thePanel.Color=\"#0f0\" Duration=\"0.2\"/>\n\t\t</State>\n\t\t<State ux:Name=\"blueState\">\n\t\t\t<Change thePanel.Color=\"#00f\" Duration=\"0.2\"/>\n\t\t</State>\n\t</StateGroup>\n\n\t<Clicked>\n\t\t<TransitionState Type=\"Next\" Target=\"stateGroup\" />\n\t</Clicked>\n</Panel>\n```\n\n## Controlling StateGroup using JavaScript\n\nA `StateGroup` may be controlled via its JavaScript interface.\nThis is done either by calling the `goto(state)` or `gotoNext()` methods on the @StateGroup itself, or by calling the `goto()` method on a particular @State.\n\n```xml\n<JavaScript>\n\texports.gotoNextState = function()\n\t{\n\t\tstateGroup.gotoNext();\n\t}\n\n\texports.gotoSecondState = function()\n\t{\n\t\tstateGroup.goto(secondState);\n\t}\n\n\texports.gotoThirdState = function()\n\t{\n\t\tthirdState.goto();\n\t}\n</JavaScript>\n\n<StateGroup ux:Name=\"stateGroup\">\n\t<State ux:Name=\"firstState\">\n\t\t<!-- ... -->\t\n\t</State>\n\t<State ux:Name=\"secondState\">\n\t\t<!-- ... -->\n\t</State>\n\t<State ux:Name=\"thirdState\">\n\t\t<!-- ... -->\n\t</State>\n</StateGroup>\n\n<StackPanel>\n\t<Button Clicked=\"{gotoNextState}\" Text=\"Next state\" />\n\t<Button Clicked=\"{gotoSecondState}\" Text=\"Second state\" />\n\t<Button Clicked=\"{gotoThirdState}\" Text=\"Third state\" />\n</StackPanel>\n```\n\n## Transition\n\nWe can also specify the `Transition` property, which can be either `Exclusive` or `Parallel`.\n`Exclusive` means that each state will have to be fully deactivated before the next state becomes active.\n`Parallel` means that as one state deactivates, the next one will become active and whatever properties they animate will be interpolated between them."
      },
      "id": {
        "id": "fuse/triggers/stategroup",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/stategroup",
        "href": "fuse/triggers/stategroup"
      },
      "titles": {
        "indexTitle": "StateGroup",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.StateGroup"
      }
    },
    {
      "comment": {
        "brief": "Trigger for input action",
        "full": "Trigger for input action\n\nTriggers when the returnkey on the keyboard is clicked.\n\n## Example\n\n    <TextInput PlaceholderText=\"Example\">\n        <TextInputActionTriggered>\n            <DebugAction Message=\"TextInputActionTriggered\" />\n        </TextInputActionTriggered>\n    </TextInput>"
      },
      "id": {
        "id": "fuse/triggers/textinputactiontriggered",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/textinputactiontriggered",
        "href": "fuse/triggers/textinputactiontriggered"
      },
      "titles": {
        "indexTitle": "TextInputActionTriggered",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.TextInputActionTriggered"
      }
    },
    {
      "comment": {
        "brief": "Groups several animations together",
        "full": "Groups several animations together\n\nThis allows for a nice way of grouping several animations together and separating them from the interaction logic.\n\nA `Timeline` can be played by animating its `TargetProgress` property between 0 and 1.\n\n> **Note:** `Timeline` itself is *not* intended for grouping multiple animators to create keyframe animations.\n> To achieve this, you can add @Keyframes to the animators themselves.\n>\n> *Incorrect:*\n>\n> ```\n> <Timeline>\n>     <Change rect.Opacity=\"1\" Delay=\"0.0\" Duration=\"0.5\" />\n>     <Change rect.Opacity=\"0\" Delay=\"0.5\" Duration=\"0.5\" />\n> </Timeline>\n> ```\n>\n> *Correct:*\n>\n> ```\n> <Timeline>\n>     <Change Target=\"rect.Opacity\">\n>         <Keyframe Value=\"1\" Time=\"0.5\" />\n>         <Keyframe Value=\"0\" Time=\"1.0\" />\n>     </Change>\n> </Timeline>\n> ```\n\n## Example\n\nHere is an example of how we can use a timeline to animate several properties on a rectangle (its width and color), and then play between the start and end of this `Timeline` by clicking two buttons.\n\n    <StackPanel>\n        <Rectangle ux:Name=\"rect\" Height=\"40\" Width=\"100%\">\n            <SolidColor ux:Name=\"color\" Color=\"#f00\" />\n        </Rectangle>\n        <Grid ColumnCount=\"2\">\n            <Button Text=\"Red\">\n                <Clicked>\n                    <Set timeline.TargetProgress=\"0\" />\n                </Clicked>\n            </Button>\n            <Button Text=\"Green\">\n                <Clicked>\n                    <Set timeline.TargetProgress=\"1\" />\n                </Clicked>\n            </Button>\n        </Grid>\n\n        <Timeline ux:Name=\"timeline\">\n            <Change Target=\"rect.Width\">\n                <Keyframe Value=\"10\" Time=\"0.3\"/>\n                <Keyframe Value=\"100\" Time=\"0.6\"/>\n            </Change>\n            <Change color.Color=\"#0f0\" Duration=\"0.3\" Delay=\"0.3\"/>\n        </Timeline>\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/triggers/timeline",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/timeline",
        "href": "fuse/triggers/timeline"
      },
      "titles": {
        "indexTitle": "Timeline",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Timeline"
      }
    },
    {
      "comment": {
        "brief": "Controls the animations for page-to-page transitions in a `Navigator`.",
        "full": "Controls the animations for page-to-page transitions in a `Navigator`.\n\nUnlike the `EnteringAnimation` and `ExitingAnimation` triggers, `Transition` allows you to make different animations depending on which page is being navigating to, or away from.\n\n# Example\n\n\t<Page ux:Template=\"Main\">\n\t\t<Transition To=\"Contacts\">\n\t\t\t<Move X=\"-1\" RelativeTo=\"ParentSize\" Duration=\"1\"/>\n\t\t</Transition>\n\t\t<Transition>\n\t\t\t<Move Y=\"1\" RelativeTo=\"ParentSize\" Duration=\"1\"/>\n\t\t</Transition>\n\t</Page>\n\t\nThis page has a special transition if navigating to the `Contacts` page. In this case it will slide the page to the left. All other transitions away from this page will slide down.\n\n# To / From\n\nEvery navigation change defines a \"To\" and \"From\" page. In `Transition` these are always defined as the the forward ordering of the pages in the navigation. This ensures that when navigating backward (such as using `goBack`) the same transitions will be used, but done in reverse.\n\nFor example, a `<Transition To=\"Contacts\">` matches a forward transition to the `Contacts` page, as well as a backwards transition from the `Contacts` page to this one.\n\nSimilarly, a `<Transtion From=\"Main\">` matches a forward transition from the `Main` page, as well as a backwards transition from this page to the `Main` page.\n\n# Priority\n\nOnly one `Transition`, the one with the highest priority, will be selected for each page change. The priority ordering is:\n\n- A `Style` match on the operational style\n- `Interaction` match other than `Any`\n- `To` page name match\n- `From` page name match\n- `Direction` of `ToBack`, `FromBack`, `ToFront`, `FromFront`\n- `Direction` of `ToActive`, `ToInactive`\n- `Direction` of `InFront`, `Behind`\n- `Direction` `Any`\n\nIf no matching `Transition` is found then a default one will be created according to the [Navigator.Transition](api:fuse/controls/navigationcontrol/transition) property. If you don't want a default then specify a final fallback transition without properties `<Transition>`.\n\n# Play direction\n\nIf the page is becoming inactive the transition will be played forward. If the page is becoming active the transition will be played backward. This means the transition is always defining the animation towards the inactive state.\n\nWith certain combinations of properties this may at first seem odd, for example:\n\n\t<Transition Direction=\"ToActive\">\n\t\t<Move X=\"100\" Duration=\"1\"/>\n\t</Transition>\n\t\nThis `Transition` is only selected when the page is becoming the active one. The animation will start at `X=100` and move towards `X=0` over a duration of `1`.\n\nThe final state of any active page is always with all transitions deactivated.\n\n\r\n\n## Extended Example\n\nThe [Transition Example](https://github.com/fusetools/fuse-samples/tree/master/Samples/UIStructure/Transition) shows a variety of page transitions using `Transition`."
      },
      "id": {
        "id": "fuse/triggers/transition",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/transition",
        "href": "fuse/triggers/transition"
      },
      "titles": {
        "indexTitle": "Transition",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Transition"
      }
    },
    {
      "comment": {
        "brief": "Triggers are the main tools for interaction response, transitions and animation in Fuse.",
        "full": "Triggers are the main tools for interaction response, transitions and animation in Fuse.\n\nTriggers are objects that can be used in UX markup that detect events, gestures, other user input or\nchanges of state in your app, and performs animations and actions in response.\n\nWhen a trigger is *activated*, it performs a *timeline of actions* based on what objects you put inside\nthe trigger tag.\n\nTriggers can contain the following types of child-nodes in UX Markup:\n\n* @Animators that animate properties, transforms or effects when the trigger is active\n* @Actions that perform actions with permanent effects, or call back to JavaScript when the trigger activates.\n* @Nodes (visuals, behaviors, other triggers) that are added to the parent visual while the trigger is active.\n* @Resources (nodes marked with `ux:Key=\"your_key\"`), which overrides `{Resource your_key}` for the parent scope while the trigger is active.\n\n> See the [remarks section](#section-remarks) at the bottom of this page for more information\n\n## Available triggers in Fuse\n\n[subclass Fuse.Triggers.Trigger]",
        "attributes": {
          "topic": "Triggers and animation"
        }
      },
      "id": {
        "id": "fuse/triggers/trigger",
        "parentId": "fuse/triggers",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/trigger",
        "href": "fuse/triggers/trigger"
      },
      "titles": {
        "indexTitle": "Trigger",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.Trigger"
      }
    },
    {
      "id": {
        "id": "fuse/triggers/whilebool",
        "parentId": "fuse/triggers",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilebool",
        "href": "fuse/triggers/whilebool"
      },
      "titles": {
        "indexTitle": "WhileBool",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileBool"
      }
    },
    {
      "comment": {
        "brief": "A trigger that is active whenever a sibling or parent is marked as busy.",
        "full": "A trigger that is active whenever a sibling or parent is marked as busy.\n\nUX nodes can mark themselves as busy, meaning that they are currently waiting on some background task and are not ready for rendering.\nThis can be anything from making a HTTP request to performing an expensive computation.\nWe can use WhileBusy to react to this, as it will be activated while a sibling or parent node is marked as busy.\n\n> *Note:* You can use the [FuseJS/BusyTask API](/docs/fuse/triggers/busytaskmodule) to mark nodes as busy via JavaScript.\n\n## Example\n\nThe following example displays an @Image from a URL, and a text while it's loading.\n\n    <Image Url=\"SOME_IMAGE_URL\">\n        <WhileBusy>\n            <Text Value=\"Loading...\" />\n        </WhileBusy>\n    </Image>\n\nWhen a node is marked as busy, its ancestors are also considered busy.\nThis lets us react to multiple busy nodes in the same trigger.\nIn the following example we have two @Images loaded via HTTP, and a \"Loading...\" indicator that fades to transparency after both images have downloaded.\n\n    <Panel>\n        <Panel ux:Name=\"loadingPanel\" Opacity=\"0\" Alignment=\"Top\">\n            <Text>Loading...</Text>\n        </Panel>\n        <WhileBusy>\n            <Change loadingPanel.Opacity=\"1\" Duration=\"0.5\" />\n        </WhileBusy>\n        <StackPanel>\n            <Image Url=\"SOME_IMAGE_URL\" />\n            <Image Url=\"SOME_OTHER_IMAGE_URL\" />\n        </StackPanel>\n    </Panel>"
      },
      "id": {
        "id": "fuse/triggers/whilebusy",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilebusy",
        "href": "fuse/triggers/whilebusy"
      },
      "titles": {
        "indexTitle": "WhileBusy",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileBusy"
      }
    },
    {
      "comment": {
        "brief": "Active while the @Video is completed.",
        "full": "Active while the @Video is completed.\n\nThis trigger is for use inside the `Video` element."
      },
      "id": {
        "id": "fuse/triggers/whilecompleted",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilecompleted",
        "href": "fuse/triggers/whilecompleted"
      },
      "titles": {
        "indexTitle": "WhileCompleted",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileCompleted"
      }
    },
    {
      "comment": {
        "brief": "Active while the surrounding context contains text.",
        "full": "Active while the surrounding context contains text.\n\nCan be used, for instance, inside @TextInputs.\n\n## Example\n\nThis example displays a warning text unless the user has entered some text into\na password field:\n\n    <StackPanel>\n        <TextInput IsPassword=\"True\">\n            <WhileContainsText>\n                <Change warningText.Visibility=\"Hidden\" />\n            </WhileContainsText>\n        </TextInput>\n        <Text Color=\"Red\" ux:Name=\"warningText\">You must enter a password!</Text>\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/triggers/whilecontainstext",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilecontainstext",
        "href": "fuse/triggers/whilecontainstext"
      },
      "titles": {
        "indexTitle": "WhileContainsText",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileContainsText"
      }
    },
    {
      "comment": {
        "brief": "Active while the `IsEnabled` property of its containing element is `False`.",
        "full": "Active while the `IsEnabled` property of its containing element is `False`."
      },
      "id": {
        "id": "fuse/triggers/whiledisabled",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whiledisabled",
        "href": "fuse/triggers/whiledisabled"
      },
      "titles": {
        "indexTitle": "WhileDisabled",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileDisabled"
      }
    },
    {
      "comment": {
        "brief": "Active while the `IsEnabled` property of its containing element is `True`.",
        "full": "Active while the `IsEnabled` property of its containing element is `True`.\n\n# Example\nThis example shows a panel that is rotated 45 degrees. It will always be rotated 45 degrees, as `IsEnabled` is `true` by default.\n\n    <Panel  Width=\"50\" Height=\"50\" Background=\"Red\" >\n        <WhileEnabled>\n            <Rotate Degrees=\"45\" Duration=\"0.5\"/>\n        </WhileEnabled>\n    </Panel>"
      },
      "id": {
        "id": "fuse/triggers/whileenabled",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whileenabled",
        "href": "fuse/triggers/whileenabled"
      },
      "titles": {
        "indexTitle": "WhileEnabled",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileEnabled"
      }
    },
    {
      "id": {
        "id": "fuse/triggers/whileenableddisabledtrigger",
        "parentId": "fuse/triggers",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whileenableddisabledtrigger",
        "href": "fuse/triggers/whileenableddisabledtrigger"
      },
      "titles": {
        "indexTitle": "WhileEnabledDisabledTrigger",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileEnabledDisabledTrigger"
      }
    },
    {
      "comment": {
        "brief": "Active while the context has failed.",
        "full": "Active while the context has failed.\n\nThis trigger can be used inside a @Video, an @Image, or an @Each element.\n\n`<WhileFailed>` is equivalent to `<WhileBusy Activity=\"Failed\" IsHandled=\"true\"/>`"
      },
      "id": {
        "id": "fuse/triggers/whilefailed",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilefailed",
        "href": "fuse/triggers/whilefailed"
      },
      "titles": {
        "indexTitle": "WhileFailed",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileFailed"
      }
    },
    {
      "comment": {
        "brief": "A trigger that is active while its `Value` property is `false`.",
        "full": "A trigger that is active while its `Value` property is `false`.\n\n> *Note*\n>\n> This is the exact opposite from @WhileTrue.\n> Head over there for documentation and examples."
      },
      "id": {
        "id": "fuse/triggers/whilefalse",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilefalse",
        "href": "fuse/triggers/whilefalse"
      },
      "titles": {
        "indexTitle": "WhileFalse",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileFalse"
      }
    },
    {
      "comment": {
        "brief": "Active when the `float` `Value` fulfills some criteria.",
        "full": "Active when the `float` `Value` fulfills some criteria."
      },
      "id": {
        "id": "fuse/triggers/whilefloat",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilefloat",
        "href": "fuse/triggers/whilefloat"
      },
      "titles": {
        "indexTitle": "WhileFloat",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileFloat"
      }
    },
    {
      "comment": {
        "brief": "Active whenever its containing element is in focus.",
        "full": "Active whenever its containing element is in focus."
      },
      "id": {
        "id": "fuse/triggers/whilefocused",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilefocused",
        "href": "fuse/triggers/whilefocused"
      },
      "titles": {
        "indexTitle": "WhileFocused",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileFocused"
      }
    },
    {
      "comment": {
        "brief": "Active whenever a child of its containing element is in focus.",
        "full": "Active whenever a child of its containing element is in focus."
      },
      "id": {
        "id": "fuse/triggers/whilefocuswithin",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilefocuswithin",
        "href": "fuse/triggers/whilefocuswithin"
      },
      "titles": {
        "indexTitle": "WhileFocusWithin",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileFocusWithin"
      }
    },
    {
      "comment": {
        "brief": "Active while the user is interacting with the surrounding element.",
        "full": "Active while the user is interacting with the surrounding element.\n\n`WhileInteracting` is active in a @SwipeGesture while the user is swiping, and in a @ScrollView when the user is scrolling.\n\n## Example\n\nThe following example shows a @Panel whose background color changes when the user is interacting with the @ScrollView surrounding it:\n\n    <ScrollView Alignment=\"VerticalCenter\" ClipToBounds=\"False\">\n        <Panel ux:Name=\"coloredPanel\" Background=\"#f00\" HitTestMode=\"LocalBoundsAndChildren\" MinHeight=\"200\">\n            <Text Alignment=\"Center\" TextColor=\"#fff\">Scroll me!</Text>\n        </Panel>\n\n        <WhileInteracting>\n            <Change coloredPanel.Background=\"#00f\" />\n        </WhileInteracting>\n    </ScrollView>"
      },
      "id": {
        "id": "fuse/triggers/whileinteracting",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whileinteracting",
        "href": "fuse/triggers/whileinteracting"
      },
      "titles": {
        "indexTitle": "WhileInteracting",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileInteracting"
      }
    },
    {
      "comment": {
        "brief": "Active when on-screen controls are visible, such as the keyboard. This excludes the fixed controls, such as navigation and home button, on some devices.",
        "full": "Active when on-screen controls are visible, such as the keyboard. This excludes the fixed controls, such as navigation and home button, on some devices."
      },
      "id": {
        "id": "fuse/triggers/whilekeyboardvisible",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilekeyboardvisible",
        "href": "fuse/triggers/whilekeyboardvisible"
      },
      "titles": {
        "indexTitle": "WhileKeyboardVisible",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileKeyboardVisible"
      }
    },
    {
      "comment": {
        "brief": "Active while a resource in the surrounding context is loading.",
        "full": "Active while a resource in the surrounding context is loading.\n\nThis trigger can be used inside a @Video, @Image, or @Text element.\n\n## Example\n\nThe following example will display some text while an image resource is loading via URL:\n\n    <StackPanel>\n        <Image Url=\"https://upload.wikimedia.org/wikipedia/commons/f/f1/Kitten_and_partial_reflection_in_mirror.jpg\">\n            <WhileLoading>\n                <Change showLoadingText.Value=\"True\" />\n            </WhileLoading>\n        </Image>\n\n        <WhileTrue ux:Name=\"showLoadingText\">\n            <Text>Image is loading...</Text>\n        </WhileTrue>\n    </StackPanel>\n\n`<WhileLoading>` is equivalent to `<WhileBusy Activity=\"Loading\">`."
      },
      "id": {
        "id": "fuse/triggers/whileloading",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whileloading",
        "href": "fuse/triggers/whileloading"
      },
      "titles": {
        "indexTitle": "WhileLoading",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileLoading"
      }
    },
    {
      "comment": {
        "brief": "Active whenever its containing element is not in focus.",
        "full": "Active whenever its containing element is not in focus.\n\nThe inverse of @WhileFocused."
      },
      "id": {
        "id": "fuse/triggers/whilenotfocused",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilenotfocused",
        "href": "fuse/triggers/whilenotfocused"
      },
      "titles": {
        "indexTitle": "WhileNotFocused",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileNotFocused"
      }
    },
    {
      "comment": {
        "brief": "A trigger that is active while its parent @WebView is loading.",
        "full": "A trigger that is active while its parent @WebView is loading.\n\n## Example\n\nThe following example displays a loading indicator while the @WebView is loading a page.\n\n    <NativeViewHost>\n        <Panel ux:Name=\"loadingIndicator\" Opacity=\"0\" Alignment=\"Bottom\" Color=\"#0006\">\n            <Text Alignment=\"Center\" Margin=\"10\" Color=\"#fff\">Loading...</Text>\n        </Panel>\n\n        <WebView Url=\"https://example.com/\">\n            <WhilePageLoading>\n                <Change loadingIndicator.Opacity=\"1\" Duration=\"0.2\" />\n            </WhilePageLoading>\n        </WebView>\n    </NativeViewHost>"
      },
      "id": {
        "id": "fuse/triggers/whilepageloading",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilepageloading",
        "href": "fuse/triggers/whilepageloading"
      },
      "titles": {
        "indexTitle": "WhilePageLoading",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhilePageLoading"
      }
    },
    {
      "comment": {
        "brief": "Active while the @Video is paused.",
        "full": "Active while the @Video is paused.\n\nThis trigger is for use inside the `Video` element."
      },
      "id": {
        "id": "fuse/triggers/whilepaused",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilepaused",
        "href": "fuse/triggers/whilepaused"
      },
      "titles": {
        "indexTitle": "WhilePaused",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhilePaused"
      }
    },
    {
      "comment": {
        "brief": "Active while the @Video is playing.",
        "full": "Active while the @Video is playing.\n\nThis trigger is for use inside the `Video` element."
      },
      "id": {
        "id": "fuse/triggers/whileplaying",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whileplaying",
        "href": "fuse/triggers/whileplaying"
      },
      "titles": {
        "indexTitle": "WhilePlaying",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhilePlaying"
      }
    },
    {
      "comment": {
        "brief": "Active when a @ScrollView can be scrolled.",
        "full": "Active when a @ScrollView can be scrolled.\n\nUse the `ScrollDirections` property to filter the activation\nbased on which direction you're interested in.\n\n# Example\n\nIn the following example, our background changes color when we reach the bottom of our @(ScrollView):\n\n    <ScrollViewer>\n        <SolidColor ux:Name=\"color\" Color=\"#000\"/>\n        <StackPanel Margin=\"10\">\n            <Each Count=\"10\">\n                <Panel Height=\"200\" Background=\"Red\" Margin=\"2\"/>\n            </Each>\n        </StackPanel>\n        <WhileScrollable ScrollDirections=\"Down\">\n            <Change color.Color=\"#ddd\" Duration=\"0.4\"/>\n        </WhileScrollable>\n    </ScrollViewer>\n\n@example Docs/WhileScrollable.md"
      },
      "id": {
        "id": "fuse/triggers/whilescrollable",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilescrollable",
        "href": "fuse/triggers/whilescrollable"
      },
      "titles": {
        "indexTitle": "WhileScrollable",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileScrollable"
      }
    },
    {
      "comment": {
        "brief": "Is active while the @ScrollView is scrolled within a given region.",
        "full": "Is active while the @ScrollView is scrolled within a given region.\n\nThis defines the region the same way as @Scrolled"
      },
      "id": {
        "id": "fuse/triggers/whilescrolled",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilescrolled",
        "href": "fuse/triggers/whilescrolled"
      },
      "titles": {
        "indexTitle": "WhileScrolled",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileScrolled"
      }
    },
    {
      "comment": {
        "brief": "Activate when the condition on the string value is true",
        "full": "Activate when the condition on the string value is true"
      },
      "id": {
        "id": "fuse/triggers/whilestring",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilestring",
        "href": "fuse/triggers/whilestring"
      },
      "titles": {
        "indexTitle": "WhileString",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileString"
      }
    },
    {
      "id": {
        "id": "fuse/triggers/whiletrigger",
        "parentId": "fuse/triggers",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whiletrigger",
        "href": "fuse/triggers/whiletrigger"
      },
      "titles": {
        "indexTitle": "WhileTrigger",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileTrigger"
      }
    },
    {
      "comment": {
        "brief": "A trigger that is active while its `Value` property is `true`.",
        "full": "A trigger that is active while its `Value` property is `true`.\n\n## Examples\n\nBy default, the value of a `WhileTrue` is `false`.\n\n    <WhileTrue>\n        <!-- Any actions/animators placed here will never be triggered -->\n    </WhileTrue>\n\nYou can, however, use @Set to change its value.\n\n    <Panel Width=\"200\" Height=\"200\" Background=\"#000\">\n        <Clicked>\n            <Set moveToTheRight.Value=\"true\" />\n        </Clicked>\n\n        <WhileTrue ux:Name=\"moveToTheRight\">\n            <Move X=\"200\" Duration=\"0.4\" />\n        </WhileTrue>\n    </Panel>\n\nIts value can also be toggled on and off using @Toggle.\n\n    <Panel Width=\"200\" Height=\"200\" Background=\"#000\">\n        <WhileTrue ux:Name=\"moveToTheRight\">\n            <Move X=\"200\" Duration=\"0.4\" />\n        </WhileTrue>\n\n        <Clicked>\n            <Toggle Target=\"moveToTheRight\" />\n        </Clicked>\n    </Panel>\n\nIt is also particularly useful to data-bind `Value` to an @Observable.\n\nThe following example consists of a @TextBox, as well as a @Button that fades to full transparency while\nthe user has entered less than 6 characters into the @TextBox.\n\n    <JavaScript>\n        var Observable = require(\"FuseJS/Observable\");\n\n        var password = Observable(\"\");\n        var isPasswordInvalid = password.map(function(value) {\n            return value.length < 6;\n        });\n\n        module.exports = {\n            password: password,\n            isPasswordInvalid: isPasswordInvalid\n        };\n    </JavaScript>\n\n    <StackPanel Alignment=\"VerticalCenter\" ItemSpacing=\"50\" Margin=\"50\">\n        <TextBox Value=\"{password}\" IsPassword=\"true\" />\n        <Button Text=\"Log in\" ux:Name=\"loginButton\" />\n\n        <WhileTrue Value=\"{isPasswordInvalid}\">\n            <Change loginButton.Opacity=\"0\" Duration=\"0.3\" />\n        </WhileTrue>\n    </StackPanel>\n\n## Instance\n\nThe children of `WhileTrue` are created whether the `Value` is true or false; this is the standard behavior of all triggers. If you need to prevent item creation when the value is false, consider using an `Instance` instead and bind to the `IsEnabled` property."
      },
      "id": {
        "id": "fuse/triggers/whiletrue",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whiletrue",
        "href": "fuse/triggers/whiletrue"
      },
      "titles": {
        "indexTitle": "WhileTrue",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileTrue"
      }
    },
    {
      "id": {
        "id": "fuse/triggers/whilevalue_1",
        "parentId": "fuse/triggers",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilevalue_1",
        "href": "fuse/triggers/whilevalue_1"
      },
      "titles": {
        "indexTitle": "WhileValue<T>",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileValue<T>"
      }
    },
    {
      "comment": {
        "brief": "Active when the parent element is visible.",
        "full": "Active when the parent element is visible."
      },
      "id": {
        "id": "fuse/triggers/whilevisible",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilevisible",
        "href": "fuse/triggers/whilevisible"
      },
      "titles": {
        "indexTitle": "WhileVisible",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileVisible"
      }
    },
    {
      "comment": {
        "brief": "Active while an element is positioned within the visible area of the @ScrollView.",
        "full": "Active while an element is positioned within the visible area of the @ScrollView.\n\n    <ScrollView>\n        <StackPanel>\n            <Each Items=\"{images}\">\n                <DockPanel Height=\"100\">\n                    <Image Url=\"{source}\" MemoryPolicy=\"UnloadUnused\" Dock=\"Left\"\n                        Visibility=\"Hidden\" ux:Name=\"theImage\"/>\n                    <Text Value=\"{description}\" TextWrapping=\"Wrap\"/>\n\n                    <WhileVisibleInScrollView>\n                        <Change theImage.Visibility=\"Visible\"/>\n                    </WhileVisibleInScrollView>\n                </DockPanel>\n            </Each>\n        </StackPanel>\n    </ScrollView>\n\nThis example will show the images only when they are actually in the visible area. Combined with the `UnloadUnused` memory policy this will allow the memory to be freed when they aren't visible to the user.\n\nIf the panel has a fixed height, as in this example, you could also collapse the text to save the calculation and rendering time.\n\nYou would also use this trigger if you wish to animate something within a ScrollView. There's no point in animating something the user can't actually see; using the trigger can save resources by not animating things that aren't visible.\n\nNote that the element itself need not necessarily be visible, but just have a layout that positions it in the visible area. `Visibility=\"Hidden\"` on a @Visual does not prevent the activiation of this trigger.\n\nThis trigger responds to changes in scroll position. Layout changes on the element will also update the status but layout changes further up the tree may not update the status (we do not have an efficient way to monitor for global positioning changes)."
      },
      "id": {
        "id": "fuse/triggers/whilevisibleinscrollview",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilevisibleinscrollview",
        "href": "fuse/triggers/whilevisibleinscrollview"
      },
      "titles": {
        "indexTitle": "WhileVisibleInScrollView",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileVisibleInScrollView"
      }
    },
    {
      "id": {
        "id": "fuse/triggers/whilewindowaspect",
        "parentId": "fuse/triggers",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilewindowaspect",
        "href": "fuse/triggers/whilewindowaspect"
      },
      "titles": {
        "indexTitle": "WhileWindowAspect",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileWindowAspect"
      }
    },
    {
      "comment": {
        "brief": "Active when the app's viewport width is larger than its height.",
        "full": "Active when the app's viewport width is larger than its height.\n\n## Example\n\nThe following example changes the color of `myRect` from black to white\nwhile the device is in landscape.\n\n    <Rectangle ux:Name=\"myRect\" Color=\"#000\" />\n    <WhileWindowLandscape>\n        <Change myRect.Color=\"#fff\" Duration=\"0.5\" />\n    </WhileWindowLandscape>"
      },
      "id": {
        "id": "fuse/triggers/whilewindowlandscape",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilewindowlandscape",
        "href": "fuse/triggers/whilewindowlandscape"
      },
      "titles": {
        "indexTitle": "WhileWindowLandscape",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileWindowLandscape"
      }
    },
    {
      "comment": {
        "brief": "Active when the app's viewport height is larger than or equal to its width.",
        "full": "Active when the app's viewport height is larger than or equal to its width.\n\nThe following example changes the color of `myRect` from black to white\nwhile the device is in portrait.\n\n    <Rectangle ux:Name=\"myRect\" Color=\"#000\" />\n    <WhileWindowPortrait>\n        <Change myRect.Color=\"#fff\" Duration=\"0.5\" />\n    </WhileWindowPortrait>"
      },
      "id": {
        "id": "fuse/triggers/whilewindowportrait",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilewindowportrait",
        "href": "fuse/triggers/whilewindowportrait"
      },
      "titles": {
        "indexTitle": "WhileWindowPortrait",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileWindowPortrait"
      }
    },
    {
      "comment": {
        "brief": "Active while the size of the app's viewport fulfills some given constraints.",
        "full": "Active while the size of the app's viewport fulfills some given constraints.\n\nConstraints are specified via the @GreaterThan, @LessThan and @EqualTo\nproperties. Each constraint must be provided as a pair of numbers,\nrepresenting the target width and height (in points) to match against.\n\nNote that both the X and Y axis must satisfy the constraints you provide.\n\n## Examples\n\nThe following example changes the color of `myRect` if the size of the\napp's viewport exceeds 400x400 points.\n\n    <Rectangle ux:Name=\"myRect\" Color=\"#f00\" />\n    <WhileWindowSize GreaterThan=\"400,400\">\n        <Change myRect.Color=\"#00f\" Duration=\".5\"/>\n    </WhileWindowSize>\n\nIf you want to match on a single axis only, you can provide a value for\nthe other axis that is greater than zero, and that you can safely assume\nwill always match.\n\nFor instance, if you want to check if only the width of the viewport is\ngreater than 400 points, you could do the following:\n\n    <WhileWindowSize GreaterThan=\"400,1\">\n\nThis also works for @LessThan by providing a big value.\n\n    <WhileWindowSize LessThan=\"400,99999\">\n\nYou can also specify multiple constraints on the same `WhileWindowSize`\ntrigger. Note that all constraints that you specify must be satisfied in\norder for the trigger to activate.\n\n    <WhileWindowSize GreaterThan=\"200,300\" LessThan=\"700,1000\">"
      },
      "id": {
        "id": "fuse/triggers/whilewindowsize",
        "parentId": "fuse/triggers",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/whilewindowsize",
        "href": "fuse/triggers/whilewindowsize"
      },
      "titles": {
        "indexTitle": "WhileWindowSize",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WhileWindowSize"
      }
    },
    {
      "id": {
        "id": "fuse/triggers/windowsizetrigger",
        "parentId": "fuse/triggers",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/triggers/windowsizetrigger",
        "href": "fuse/triggers/windowsizetrigger"
      },
      "titles": {
        "indexTitle": "WindowSizeTrigger",
        "fullyQualifiedIndexTitle": "Fuse.Triggers.WindowSizeTrigger"
      }
    },
    {
      "comment": {
        "brief": "Holds information about an unhandled exception",
        "full": "Holds information about an unhandled exception"
      },
      "id": {
        "id": "fuse/unhandledexceptionargs",
        "parentId": "fuse",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/unhandledexceptionargs",
        "href": "fuse/unhandledexceptionargs"
      },
      "titles": {
        "indexTitle": "UnhandledExceptionArgs",
        "fullyQualifiedIndexTitle": "Fuse.UnhandledExceptionArgs"
      }
    },
    {
      "comment": {
        "brief": "Defines a custom event that can be raised by a component and responded\nto by a user of that component.",
        "full": "Defines a custom event that can be raised by a component and responded\nto by a user of that component.\n\n> *Note:* See [this article](/docs/basics/creating-components#events-userevent)\n> for a more complete explanation of user events.\n\nUser events are attached to the node they are declared in, and only that\nnode and its children can raise and handle the event.\n\n## Usage\n\nWe put a @UserEvent at the root of our component class to indicate that it can raise a particular event.\nWhere we place our @UserEvent is important, since a node has to be in its subtree to raise or handle it.\n\n    <Panel ux:Class=\"MyComponent\">\n        <UserEvent ux:Name=\"myEvent\" />\n    </Panel>\n\nThis creates an event named `myEvent`.\n\n>**Note:** To make a @UserEvent that can be raised or handled from anywhere in the app, declare it on the root @App node, like this:\n>\n>```\n><App>\n>     <UserEvent ux:Name=\"myGlobalEvent\" />\n>     <!-- The rest of our app goes here -->\n></App>\n>```\n\nWe can now use @RaiseUserEvent to raise the event from UX.\n\n    <Panel ux:Class=\"MyComponent\">\n        <UserEvent ux:Name=\"myEvent\" />\n\n        <Clicked>\n            <RaiseUserEvent EventName=\"myEvent\" />\n        </Clicked>\n    </Panel>\n\nOr we can raise it from JavaScript.\n\n    <Panel ux:Class=\"MyComponent\">\n        <UserEvent ux:Name=\"myEvent\" />\n\n        <JavaScript>\n            setTimeout(function() {\n                myEvent.raise();\n            }, 5000);\n        </JavaScript>\n    </Panel>\n\nWhen we instantiate our component, we can respond to its events using the @OnUserEvent trigger.\n\n    <MyComponent>\n        <OnUserEvent EventName=\"myEvent\">\n            <!-- Actions/animators go here -->\n        </OnUserEvent>\n    </MyComponent>\n\nNote that we are referencing our @UserEvent by name even though it is declared outside of our current scope.\nWe can do this because `EventName` refers to the `Name` of the event. Setting `ux:Name` also sets `Name`, which means that in this example, the `Name` will be `myEvent`.\nThe actual instance of @UserEvent will be resolved at runtime.\n\nWe can also handle events in JavaScript.\n\n    <JavaScript>\n        function eventHandler() {\n            //do something\n        }\n\n        module.exports = { eventHandler: eventHandler };\n    </JavaScript>\n\n    <MyComponent>\n        <OnUserEvent EventName=\"myEvent\" Handler=\"{eventHandler}\"/>\n    </MyComponent>\n\nWe can pass arguments when raising an event.\n\n    myEvent.raise({\n        userName: \"james\",\n        isAdmin: false\n    });\n\nThis is also possible when raising the event from UX.\n\n    <RaiseUserEvent EventName=\"myEvent\">\n        <UserEventArg Name=\"userName\" StringValue=\"james\" />\n        <UserEventArg Name=\"isAdmin\" BoolValue=\"false\" />\n    </RaiseUserEvent>\n\nThe arguments are then passed to the event handler.\n\n    <JavaScript>\n        function eventHandler(args) {\n            console.log(\"Username: \" + args.userName + \", Is admin: \" + args.isAdmin);\n        }\n\n        module.exports = { eventHandler: eventHandler };\n    </JavaScript>\n\n    <OnUserEvent EventName=\"myEvent\" Handler=\"{eventHandler}\" />"
      },
      "id": {
        "id": "fuse/userevent",
        "parentId": "fuse",
        "type": "UxClass",
        "modifiers": [
          "public",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/userevent",
        "href": "fuse/userevent"
      },
      "titles": {
        "indexTitle": "UserEvent",
        "fullyQualifiedIndexTitle": "Fuse.UserEvent"
      }
    },
    {
      "id": {
        "id": "fuse/usereventargs",
        "parentId": "fuse",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/usereventargs",
        "href": "fuse/usereventargs"
      },
      "titles": {
        "indexTitle": "UserEventArgs",
        "fullyQualifiedIndexTitle": "Fuse.UserEventArgs"
      }
    },
    {
      "comment": {
        "brief": "Vibrate the device for a duration or by vibration type (only on iOS)",
        "full": "Vibrate the device for a duration or by vibration type (only on iOS)\n\nYou'll find this trigger action in the Fuse.Vibration package, which have to be referenced from your uno project.\nFor example:\n\n    {\n        \"Packages\": [\n            \"Fuse\",\n            \"FuseJS\",\n            \"Fuse.Vibration\"\n        ]\n      }\n\n## Example\n\n    <StackPanel Margin=\"20\">\n        <Button Margin=\"10\" Text=\"Vibrate\">\n            <Clicked>\n                <Vibrate Duration=\"5\" />\n            </Clicked>\n        </Button>\n    </StackPanel>\n\nOn iOS you can do vibration by leveraging Taptic Engine. There are 9 types of vibration :\n* Soft\n* Rigid\n* Light\n* Medium\n* Heavy\n* Success\n* Warning\n* Error\n* Selection\nTo activate it, just pass those value to `VibrationType` property\n\n##Example\n\n    <StackPanel Margin=\"20\">\n        <!-- Works on iOS using Taptic Engine -->\n        <Button Margin=\"10\" Text=\"Heavy Vibrate\">\n            <Clicked>\n                <Vibrate VibrationType=\"Heavy\" />\n            </Clicked>\n        </Button>\n    </StackPanel>"
      },
      "id": {
        "id": "fuse/vibration/vibrate",
        "parentId": "fuse/vibration",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/vibration/vibrate",
        "href": "fuse/vibration/vibrate"
      },
      "titles": {
        "indexTitle": "Vibrate",
        "fullyQualifiedIndexTitle": "Fuse.Vibration.Vibrate"
      }
    },
    {
      "comment": {
        "brief": "Visuals are nodes with a visual representation.",
        "full": "Visuals are nodes with a visual representation.\n\nThis is the base class of all visual objects within an app, both objects with actual\nvisual appearance and invisible objects that contain other visuals. Examples of visuals\nare @Rectangle, @Panel, @Button and @WebView.\n\nVisuals manage pointer input for an area of the screen and respond accordingly.\nThe area for which the visual receives pointer input is determined by the @HitTest\nmethod. The area does not need to be a rectangular area, it can be any complex shape.\n\nVisuals can have many different types of children, including other visuals, @Behaviors,\nand @Transforms. The @Children has a certain order which is the order in which the children\nare laid out during layout. This order is by default is identical to the Z-order. However,\nthe Z-order can be manipulated separately from the child-order.\n\nVisuals can have input focus if the `Focus.IsFocusable` property is set to `true`.",
        "attributes": {
          "topic": "Visual"
        }
      },
      "id": {
        "id": "fuse/visual",
        "parentId": "fuse",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract",
          "partial"
        ]
      },
      "uri": {
        "idUri": "fuse/visual",
        "href": "fuse/visual"
      },
      "titles": {
        "indexTitle": "Visual",
        "fullyQualifiedIndexTitle": "Fuse.Visual"
      }
    },
    {
      "comment": {
        "brief": "This class will be specialized for speed not accuracy: the effective bounds checked may be larger\nthan the strict bounds defined by the inputs.",
        "full": "This class will be specialized for speed not accuracy: the effective bounds checked may be larger\nthan the strict bounds defined by the inputs.\n\nInstances of this type are immutable."
      },
      "id": {
        "id": "fuse/visualbounds",
        "parentId": "fuse",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/visualbounds",
        "href": "fuse/visualbounds"
      },
      "titles": {
        "indexTitle": "VisualBounds",
        "fullyQualifiedIndexTitle": "Fuse.VisualBounds"
      }
    },
    {
      "id": {
        "id": "fuse/visualevent_2",
        "parentId": "fuse",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/visualevent_2",
        "href": "fuse/visualevent_2"
      },
      "titles": {
        "indexTitle": "VisualEvent<THandler, TArgs>",
        "fullyQualifiedIndexTitle": "Fuse.VisualEvent<THandler, TArgs>"
      }
    },
    {
      "id": {
        "id": "fuse/visualeventargs",
        "parentId": "fuse",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/visualeventargs",
        "href": "fuse/visualeventargs"
      },
      "titles": {
        "indexTitle": "VisualEventArgs",
        "fullyQualifiedIndexTitle": "Fuse.VisualEventArgs"
      }
    },
    {
      "id": {
        "id": "fuse/websocket/nativefunctionmodule",
        "parentId": "fuse/websocket",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "fuse/websocket/nativefunctionmodule",
        "href": "fuse/websocket/nativefunctionmodule"
      },
      "titles": {
        "indexTitle": "NativeFunctionModule",
        "fullyQualifiedIndexTitle": "Fuse.WebSocket.NativeFunctionModule"
      }
    },
    {
      "id": {
        "id": "fuse/websocket/websocketclient",
        "parentId": "fuse/websocket",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/websocket/websocketclient",
        "href": "fuse/websocket/websocketclient"
      },
      "titles": {
        "indexTitle": "WebSocketClient",
        "fullyQualifiedIndexTitle": "Fuse.WebSocket.WebSocketClient"
      }
    },
    {
      "id": {
        "id": "fuse/websocket/websocketclientmodule",
        "parentId": "fuse/websocket",
        "type": "UxClass",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fuse/websocket/websocketclientmodule",
        "href": "fuse/websocket/websocketclientmodule"
      },
      "titles": {
        "indexTitle": "WebSocketClientModule",
        "fullyQualifiedIndexTitle": "Fuse.WebSocket.WebSocketClientModule"
      }
    },
    {
      "comment": {
        "brief": "@hide",
        "full": "@hide"
      },
      "id": {
        "id": "fusejs/filereaderimpl",
        "parentId": "fusejs",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "fusejs/filereaderimpl",
        "href": "fusejs/filereaderimpl"
      },
      "titles": {
        "indexTitle": "FileReaderImpl",
        "fullyQualifiedIndexTitle": "FuseJS.FileReaderImpl"
      }
    },
    {
      "id": {
        "id": "fusejs/globals",
        "parentId": "fusejs",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fusejs/globals",
        "href": "fusejs/globals"
      },
      "titles": {
        "indexTitle": "Globals",
        "fullyQualifiedIndexTitle": "FuseJS.Globals"
      }
    },
    {
      "id": {
        "id": "fusejs/userevents",
        "parentId": "fusejs",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "fusejs/userevents",
        "href": "fusejs/userevents"
      },
      "titles": {
        "indexTitle": "UserEvents",
        "fullyQualifiedIndexTitle": "FuseJS.UserEvents"
      }
    },
    {
      "id": {
        "id": "uno/graphics/sampler2d",
        "parentId": "uno/graphics",
        "type": "Class",
        "modifiers": [
          "public",
          "intrinsic",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/graphics/sampler2d",
        "href": "uno/graphics/sampler2d"
      },
      "titles": {
        "indexTitle": "sampler2D",
        "fullyQualifiedIndexTitle": "sampler2D"
      }
    },
    {
      "id": {
        "id": "uno/graphics/samplercube",
        "parentId": "uno/graphics",
        "type": "Class",
        "modifiers": [
          "public",
          "intrinsic",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/graphics/samplercube",
        "href": "uno/graphics/samplercube"
      },
      "titles": {
        "indexTitle": "samplerCube",
        "fullyQualifiedIndexTitle": "samplerCube"
      }
    },
    {
      "comment": {
        "brief": "Represents text as a sequence of UTF-16 code units.",
        "full": "Represents text as a sequence of UTF-16 code units."
      },
      "id": {
        "id": "uno/string",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public",
          "intrinsic",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/string",
        "href": "uno/string"
      },
      "titles": {
        "indexTitle": "string",
        "fullyQualifiedIndexTitle": "string"
      }
    },
    {
      "id": {
        "id": "uno/graphics/texture2d",
        "parentId": "uno/graphics",
        "type": "Class",
        "modifiers": [
          "public",
          "intrinsic",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/graphics/texture2d",
        "href": "uno/graphics/texture2d"
      },
      "titles": {
        "indexTitle": "texture2D",
        "fullyQualifiedIndexTitle": "texture2D"
      }
    },
    {
      "id": {
        "id": "uno/graphics/texturecube",
        "parentId": "uno/graphics",
        "type": "Class",
        "modifiers": [
          "public",
          "intrinsic",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/graphics/texturecube",
        "href": "uno/graphics/texturecube"
      },
      "titles": {
        "indexTitle": "textureCube",
        "fullyQualifiedIndexTitle": "textureCube"
      }
    },
    {
      "id": {
        "id": "uno/aggregateexception",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/aggregateexception",
        "href": "uno/aggregateexception"
      },
      "titles": {
        "indexTitle": "AggregateException",
        "fullyQualifiedIndexTitle": "Uno.AggregateException"
      }
    },
    {
      "id": {
        "id": "uno/application",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "uno/application",
        "href": "uno/application"
      },
      "titles": {
        "indexTitle": "Application",
        "fullyQualifiedIndexTitle": "Uno.Application"
      }
    },
    {
      "id": {
        "id": "uno/argumentexception",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/argumentexception",
        "href": "uno/argumentexception"
      },
      "titles": {
        "indexTitle": "ArgumentException",
        "fullyQualifiedIndexTitle": "Uno.ArgumentException"
      }
    },
    {
      "id": {
        "id": "uno/argumentnullexception",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/argumentnullexception",
        "href": "uno/argumentnullexception"
      },
      "titles": {
        "indexTitle": "ArgumentNullException",
        "fullyQualifiedIndexTitle": "Uno.ArgumentNullException"
      }
    },
    {
      "id": {
        "id": "uno/argumentoutofrangeexception",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/argumentoutofrangeexception",
        "href": "uno/argumentoutofrangeexception"
      },
      "titles": {
        "indexTitle": "ArgumentOutOfRangeException",
        "fullyQualifiedIndexTitle": "Uno.ArgumentOutOfRangeException"
      }
    },
    {
      "id": {
        "id": "uno/array",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/array",
        "href": "uno/array"
      },
      "titles": {
        "indexTitle": "Array",
        "fullyQualifiedIndexTitle": "Uno.Array"
      }
    },
    {
      "id": {
        "id": "uno/attribute",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "uno/attribute",
        "href": "uno/attribute"
      },
      "titles": {
        "indexTitle": "Attribute",
        "fullyQualifiedIndexTitle": "Uno.Attribute"
      }
    },
    {
      "id": {
        "id": "uno/attributeusageattribute",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/attributeusageattribute",
        "href": "uno/attributeusageattribute"
      },
      "titles": {
        "indexTitle": "AttributeUsageAttribute",
        "fullyQualifiedIndexTitle": "Uno.AttributeUsageAttribute"
      }
    },
    {
      "id": {
        "id": "uno/buffer",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/buffer",
        "href": "uno/buffer"
      },
      "titles": {
        "indexTitle": "Buffer",
        "fullyQualifiedIndexTitle": "Uno.Buffer"
      }
    },
    {
      "id": {
        "id": "uno/collections/dictionary_2",
        "parentId": "uno/collections",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/collections/dictionary_2",
        "href": "uno/collections/dictionary_2"
      },
      "titles": {
        "indexTitle": "Dictionary<TKey, TValue>",
        "fullyQualifiedIndexTitle": "Uno.Collections.Dictionary<TKey, TValue>"
      }
    },
    {
      "id": {
        "id": "uno/collections/emptyenumerable_1",
        "parentId": "uno/collections",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/collections/emptyenumerable_1",
        "href": "uno/collections/emptyenumerable_1"
      },
      "titles": {
        "indexTitle": "EmptyEnumerable<T>",
        "fullyQualifiedIndexTitle": "Uno.Collections.EmptyEnumerable<T>"
      }
    },
    {
      "id": {
        "id": "uno/collections/hashset_1",
        "parentId": "uno/collections",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/collections/hashset_1",
        "href": "uno/collections/hashset_1"
      },
      "titles": {
        "indexTitle": "HashSet<T>",
        "fullyQualifiedIndexTitle": "Uno.Collections.HashSet<T>"
      }
    },
    {
      "id": {
        "id": "uno/collections/dictionary_2/keycollection",
        "parentId": "uno/collections/dictionary_2",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/collections/dictionary_2/keycollection",
        "href": "uno/collections/dictionary_2/keycollection"
      },
      "titles": {
        "indexTitle": "KeyCollection",
        "fullyQualifiedIndexTitle": "Uno.Collections.KeyCollection"
      }
    },
    {
      "id": {
        "id": "uno/collections/linkedlist_1",
        "parentId": "uno/collections",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/collections/linkedlist_1",
        "href": "uno/collections/linkedlist_1"
      },
      "titles": {
        "indexTitle": "LinkedList<T>",
        "fullyQualifiedIndexTitle": "Uno.Collections.LinkedList<T>"
      }
    },
    {
      "id": {
        "id": "uno/collections/linkedlistnode_1",
        "parentId": "uno/collections",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/collections/linkedlistnode_1",
        "href": "uno/collections/linkedlistnode_1"
      },
      "titles": {
        "indexTitle": "LinkedListNode<T>",
        "fullyQualifiedIndexTitle": "Uno.Collections.LinkedListNode<T>"
      }
    },
    {
      "id": {
        "id": "uno/collections/list_1",
        "parentId": "uno/collections",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/collections/list_1",
        "href": "uno/collections/list_1"
      },
      "titles": {
        "indexTitle": "List<T>",
        "fullyQualifiedIndexTitle": "Uno.Collections.List<T>"
      }
    },
    {
      "id": {
        "id": "uno/collections/observablelist_1",
        "parentId": "uno/collections",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/collections/observablelist_1",
        "href": "uno/collections/observablelist_1"
      },
      "titles": {
        "indexTitle": "ObservableList<T>",
        "fullyQualifiedIndexTitle": "Uno.Collections.ObservableList<T>"
      }
    },
    {
      "id": {
        "id": "uno/collections/queue_1",
        "parentId": "uno/collections",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/collections/queue_1",
        "href": "uno/collections/queue_1"
      },
      "titles": {
        "indexTitle": "Queue<T>",
        "fullyQualifiedIndexTitle": "Uno.Collections.Queue<T>"
      }
    },
    {
      "id": {
        "id": "uno/collections/readonlycollection_1",
        "parentId": "uno/collections",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/collections/readonlycollection_1",
        "href": "uno/collections/readonlycollection_1"
      },
      "titles": {
        "indexTitle": "ReadOnlyCollection<T>",
        "fullyQualifiedIndexTitle": "Uno.Collections.ReadOnlyCollection<T>"
      }
    },
    {
      "comment": {
        "brief": "A list that can be subscribed to during rooting to observe for changes.",
        "full": "A list that can be subscribed to during rooting to observe for changes.",
        "attributes": {
          "advanced": true,
          "experimental": true
        }
      },
      "id": {
        "id": "uno/collections/rootablelist_1",
        "parentId": "uno/collections",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/collections/rootablelist_1",
        "href": "uno/collections/rootablelist_1"
      },
      "titles": {
        "indexTitle": "RootableList<T>",
        "fullyQualifiedIndexTitle": "Uno.Collections.RootableList<T>"
      }
    },
    {
      "id": {
        "id": "uno/collections/stack_1",
        "parentId": "uno/collections",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/collections/stack_1",
        "href": "uno/collections/stack_1"
      },
      "titles": {
        "indexTitle": "Stack<T>",
        "fullyQualifiedIndexTitle": "Uno.Collections.Stack<T>"
      }
    },
    {
      "id": {
        "id": "uno/collections/dictionary_2/valuecollection",
        "parentId": "uno/collections/dictionary_2",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/collections/dictionary_2/valuecollection",
        "href": "uno/collections/dictionary_2/valuecollection"
      },
      "titles": {
        "indexTitle": "ValueCollection",
        "fullyQualifiedIndexTitle": "Uno.Collections.ValueCollection"
      }
    },
    {
      "id": {
        "id": "uno/compiler/callerfilepathattribute",
        "parentId": "uno/compiler",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/compiler/callerfilepathattribute",
        "href": "uno/compiler/callerfilepathattribute"
      },
      "titles": {
        "indexTitle": "CallerFilePathAttribute",
        "fullyQualifiedIndexTitle": "Uno.Compiler.CallerFilePathAttribute"
      }
    },
    {
      "id": {
        "id": "uno/compiler/callerlinenumberattribute",
        "parentId": "uno/compiler",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/compiler/callerlinenumberattribute",
        "href": "uno/compiler/callerlinenumberattribute"
      },
      "titles": {
        "indexTitle": "CallerLineNumberAttribute",
        "fullyQualifiedIndexTitle": "Uno.Compiler.CallerLineNumberAttribute"
      }
    },
    {
      "id": {
        "id": "uno/compiler/callermembernameattribute",
        "parentId": "uno/compiler",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/compiler/callermembernameattribute",
        "href": "uno/compiler/callermembernameattribute"
      },
      "titles": {
        "indexTitle": "CallerMemberNameAttribute",
        "fullyQualifiedIndexTitle": "Uno.Compiler.CallerMemberNameAttribute"
      }
    },
    {
      "id": {
        "id": "uno/compiler/callerpackagenameattribute",
        "parentId": "uno/compiler",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/compiler/callerpackagenameattribute",
        "href": "uno/compiler/callerpackagenameattribute"
      },
      "titles": {
        "indexTitle": "CallerPackageNameAttribute",
        "fullyQualifiedIndexTitle": "Uno.Compiler.CallerPackageNameAttribute"
      }
    },
    {
      "id": {
        "id": "uno/compiler/exporttargetinterop/android/foreignfixednameattribute",
        "parentId": "uno/compiler/exporttargetinterop/android",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/compiler/exporttargetinterop/android/foreignfixednameattribute",
        "href": "uno/compiler/exporttargetinterop/android/foreignfixednameattribute"
      },
      "titles": {
        "indexTitle": "ForeignFixedNameAttribute",
        "fullyQualifiedIndexTitle": "Uno.Compiler.ExportTargetInterop.Android.ForeignFixedNameAttribute"
      }
    },
    {
      "id": {
        "id": "uno/compiler/exporttargetinterop/dontexportattribute",
        "parentId": "uno/compiler/exporttargetinterop",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/compiler/exporttargetinterop/dontexportattribute",
        "href": "uno/compiler/exporttargetinterop/dontexportattribute"
      },
      "titles": {
        "indexTitle": "DontExportAttribute",
        "fullyQualifiedIndexTitle": "Uno.Compiler.ExportTargetInterop.DontExportAttribute"
      }
    },
    {
      "id": {
        "id": "uno/compiler/exporttargetinterop/dotnetoverrideattribute",
        "parentId": "uno/compiler/exporttargetinterop",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/compiler/exporttargetinterop/dotnetoverrideattribute",
        "href": "uno/compiler/exporttargetinterop/dotnetoverrideattribute"
      },
      "titles": {
        "indexTitle": "DotNetOverrideAttribute",
        "fullyQualifiedIndexTitle": "Uno.Compiler.ExportTargetInterop.DotNetOverrideAttribute"
      }
    },
    {
      "id": {
        "id": "uno/compiler/exporttargetinterop/dotnettypeattribute",
        "parentId": "uno/compiler/exporttargetinterop",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/compiler/exporttargetinterop/dotnettypeattribute",
        "href": "uno/compiler/exporttargetinterop/dotnettypeattribute"
      },
      "titles": {
        "indexTitle": "DotNetTypeAttribute",
        "fullyQualifiedIndexTitle": "Uno.Compiler.ExportTargetInterop.DotNetTypeAttribute"
      }
    },
    {
      "id": {
        "id": "uno/compiler/exporttargetinterop/foreignannotationattribute",
        "parentId": "uno/compiler/exporttargetinterop",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/compiler/exporttargetinterop/foreignannotationattribute",
        "href": "uno/compiler/exporttargetinterop/foreignannotationattribute"
      },
      "titles": {
        "indexTitle": "ForeignAnnotationAttribute",
        "fullyQualifiedIndexTitle": "Uno.Compiler.ExportTargetInterop.ForeignAnnotationAttribute"
      }
    },
    {
      "id": {
        "id": "uno/compiler/exporttargetinterop/foreignattribute",
        "parentId": "uno/compiler/exporttargetinterop",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/compiler/exporttargetinterop/foreignattribute",
        "href": "uno/compiler/exporttargetinterop/foreignattribute"
      },
      "titles": {
        "indexTitle": "ForeignAttribute",
        "fullyQualifiedIndexTitle": "Uno.Compiler.ExportTargetInterop.ForeignAttribute"
      }
    },
    {
      "id": {
        "id": "uno/compiler/exporttargetinterop/foreignincludeattribute",
        "parentId": "uno/compiler/exporttargetinterop",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/compiler/exporttargetinterop/foreignincludeattribute",
        "href": "uno/compiler/exporttargetinterop/foreignincludeattribute"
      },
      "titles": {
        "indexTitle": "ForeignIncludeAttribute",
        "fullyQualifiedIndexTitle": "Uno.Compiler.ExportTargetInterop.ForeignIncludeAttribute"
      }
    },
    {
      "id": {
        "id": "uno/compiler/exporttargetinterop/foreigntypenameattribute",
        "parentId": "uno/compiler/exporttargetinterop",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/compiler/exporttargetinterop/foreigntypenameattribute",
        "href": "uno/compiler/exporttargetinterop/foreigntypenameattribute"
      },
      "titles": {
        "indexTitle": "ForeignTypeNameAttribute",
        "fullyQualifiedIndexTitle": "Uno.Compiler.ExportTargetInterop.ForeignTypeNameAttribute"
      }
    },
    {
      "id": {
        "id": "uno/compiler/exporttargetinterop/glslintrinsicattribute",
        "parentId": "uno/compiler/exporttargetinterop",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/compiler/exporttargetinterop/glslintrinsicattribute",
        "href": "uno/compiler/exporttargetinterop/glslintrinsicattribute"
      },
      "titles": {
        "indexTitle": "GlslIntrinsicAttribute",
        "fullyQualifiedIndexTitle": "Uno.Compiler.ExportTargetInterop.GlslIntrinsicAttribute"
      }
    },
    {
      "id": {
        "id": "uno/compiler/exporttargetinterop/nativeclassattribute",
        "parentId": "uno/compiler/exporttargetinterop",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/compiler/exporttargetinterop/nativeclassattribute",
        "href": "uno/compiler/exporttargetinterop/nativeclassattribute"
      },
      "titles": {
        "indexTitle": "NativeClassAttribute",
        "fullyQualifiedIndexTitle": "Uno.Compiler.ExportTargetInterop.NativeClassAttribute"
      }
    },
    {
      "id": {
        "id": "uno/compiler/exporttargetinterop/optionalattribute",
        "parentId": "uno/compiler/exporttargetinterop",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/compiler/exporttargetinterop/optionalattribute",
        "href": "uno/compiler/exporttargetinterop/optionalattribute"
      },
      "titles": {
        "indexTitle": "OptionalAttribute",
        "fullyQualifiedIndexTitle": "Uno.Compiler.ExportTargetInterop.OptionalAttribute"
      }
    },
    {
      "id": {
        "id": "uno/compiler/exporttargetinterop/processfileattribute",
        "parentId": "uno/compiler/exporttargetinterop",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/compiler/exporttargetinterop/processfileattribute",
        "href": "uno/compiler/exporttargetinterop/processfileattribute"
      },
      "titles": {
        "indexTitle": "ProcessFileAttribute",
        "fullyQualifiedIndexTitle": "Uno.Compiler.ExportTargetInterop.ProcessFileAttribute"
      }
    },
    {
      "id": {
        "id": "uno/compiler/exporttargetinterop/requireattribute",
        "parentId": "uno/compiler/exporttargetinterop",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/compiler/exporttargetinterop/requireattribute",
        "href": "uno/compiler/exporttargetinterop/requireattribute"
      },
      "titles": {
        "indexTitle": "RequireAttribute",
        "fullyQualifiedIndexTitle": "Uno.Compiler.ExportTargetInterop.RequireAttribute"
      }
    },
    {
      "id": {
        "id": "uno/compiler/exporttargetinterop/setattribute",
        "parentId": "uno/compiler/exporttargetinterop",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/compiler/exporttargetinterop/setattribute",
        "href": "uno/compiler/exporttargetinterop/setattribute"
      },
      "titles": {
        "indexTitle": "SetAttribute",
        "fullyQualifiedIndexTitle": "Uno.Compiler.ExportTargetInterop.SetAttribute"
      }
    },
    {
      "id": {
        "id": "uno/compiler/exporttargetinterop/staticattribute",
        "parentId": "uno/compiler/exporttargetinterop",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/compiler/exporttargetinterop/staticattribute",
        "href": "uno/compiler/exporttargetinterop/staticattribute"
      },
      "titles": {
        "indexTitle": "StaticAttribute",
        "fullyQualifiedIndexTitle": "Uno.Compiler.ExportTargetInterop.StaticAttribute"
      }
    },
    {
      "id": {
        "id": "uno/compiler/exporttargetinterop/targetspecificimplementationattribute",
        "parentId": "uno/compiler/exporttargetinterop",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/compiler/exporttargetinterop/targetspecificimplementationattribute",
        "href": "uno/compiler/exporttargetinterop/targetspecificimplementationattribute"
      },
      "titles": {
        "indexTitle": "TargetSpecificImplementationAttribute",
        "fullyQualifiedIndexTitle": "Uno.Compiler.ExportTargetInterop.TargetSpecificImplementationAttribute"
      }
    },
    {
      "id": {
        "id": "uno/compiler/exporttargetinterop/targetspecifictypeattribute",
        "parentId": "uno/compiler/exporttargetinterop",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/compiler/exporttargetinterop/targetspecifictypeattribute",
        "href": "uno/compiler/exporttargetinterop/targetspecifictypeattribute"
      },
      "titles": {
        "indexTitle": "TargetSpecificTypeAttribute",
        "fullyQualifiedIndexTitle": "Uno.Compiler.ExportTargetInterop.TargetSpecificTypeAttribute"
      }
    },
    {
      "id": {
        "id": "uno/compiler/featurelevelattribute",
        "parentId": "uno/compiler",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/compiler/featurelevelattribute",
        "href": "uno/compiler/featurelevelattribute"
      },
      "titles": {
        "indexTitle": "FeatureLevelAttribute",
        "fullyQualifiedIndexTitle": "Uno.Compiler.FeatureLevelAttribute"
      }
    },
    {
      "id": {
        "id": "uno/compiler/hidefromcodecompleterattribute",
        "parentId": "uno/compiler",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/compiler/hidefromcodecompleterattribute",
        "href": "uno/compiler/hidefromcodecompleterattribute"
      },
      "titles": {
        "indexTitle": "HideFromCodeCompleterAttribute",
        "fullyQualifiedIndexTitle": "Uno.Compiler.HideFromCodeCompleterAttribute"
      }
    },
    {
      "id": {
        "id": "uno/compiler/ignoremainclassattribute",
        "parentId": "uno/compiler",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/compiler/ignoremainclassattribute",
        "href": "uno/compiler/ignoremainclassattribute"
      },
      "titles": {
        "indexTitle": "IgnoreMainClassAttribute",
        "fullyQualifiedIndexTitle": "Uno.Compiler.IgnoreMainClassAttribute"
      }
    },
    {
      "id": {
        "id": "uno/compiler/mainclassattribute",
        "parentId": "uno/compiler",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/compiler/mainclassattribute",
        "href": "uno/compiler/mainclassattribute"
      },
      "titles": {
        "indexTitle": "MainClassAttribute",
        "fullyQualifiedIndexTitle": "Uno.Compiler.MainClassAttribute"
      }
    },
    {
      "id": {
        "id": "uno/compiler/shadergenerator/requireshaderstageattribute",
        "parentId": "uno/compiler/shadergenerator",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/compiler/shadergenerator/requireshaderstageattribute",
        "href": "uno/compiler/shadergenerator/requireshaderstageattribute"
      },
      "titles": {
        "indexTitle": "RequireShaderStageAttribute",
        "fullyQualifiedIndexTitle": "Uno.Compiler.ShaderGenerator.RequireShaderStageAttribute"
      }
    },
    {
      "id": {
        "id": "uno/compiler/shadergenerator/shaderstageinlineattribute",
        "parentId": "uno/compiler/shadergenerator",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/compiler/shadergenerator/shaderstageinlineattribute",
        "href": "uno/compiler/shadergenerator/shaderstageinlineattribute"
      },
      "titles": {
        "indexTitle": "ShaderStageInlineAttribute",
        "fullyQualifiedIndexTitle": "Uno.Compiler.ShaderGenerator.ShaderStageInlineAttribute"
      }
    },
    {
      "id": {
        "id": "uno/compiler/uxgeneratedattribute",
        "parentId": "uno/compiler",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/compiler/uxgeneratedattribute",
        "href": "uno/compiler/uxgeneratedattribute"
      },
      "titles": {
        "indexTitle": "UxGeneratedAttribute",
        "fullyQualifiedIndexTitle": "Uno.Compiler.UxGeneratedAttribute"
      }
    },
    {
      "id": {
        "id": "uno/data/json/jsonexception",
        "parentId": "uno/data/json",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/data/json/jsonexception",
        "href": "uno/data/json/jsonexception"
      },
      "titles": {
        "indexTitle": "JsonException",
        "fullyQualifiedIndexTitle": "Uno.Data.Json.JsonException"
      }
    },
    {
      "id": {
        "id": "uno/data/json/jsonreader",
        "parentId": "uno/data/json",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/data/json/jsonreader",
        "href": "uno/data/json/jsonreader"
      },
      "titles": {
        "indexTitle": "JsonReader",
        "fullyQualifiedIndexTitle": "Uno.Data.Json.JsonReader"
      }
    },
    {
      "id": {
        "id": "uno/delegate",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/delegate",
        "href": "uno/delegate"
      },
      "titles": {
        "indexTitle": "Delegate",
        "fullyQualifiedIndexTitle": "Uno.Delegate"
      }
    },
    {
      "id": {
        "id": "uno/enum",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "uno/enum",
        "href": "uno/enum"
      },
      "titles": {
        "indexTitle": "Enum",
        "fullyQualifiedIndexTitle": "Uno.Enum"
      }
    },
    {
      "id": {
        "id": "uno/eventargs",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/eventargs",
        "href": "uno/eventargs"
      },
      "titles": {
        "indexTitle": "EventArgs",
        "fullyQualifiedIndexTitle": "Uno.EventArgs"
      }
    },
    {
      "id": {
        "id": "uno/exception",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/exception",
        "href": "uno/exception"
      },
      "titles": {
        "indexTitle": "Exception",
        "fullyQualifiedIndexTitle": "Uno.Exception"
      }
    },
    {
      "id": {
        "id": "uno/flagsattribute",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/flagsattribute",
        "href": "uno/flagsattribute"
      },
      "titles": {
        "indexTitle": "FlagsAttribute",
        "fullyQualifiedIndexTitle": "Uno.FlagsAttribute"
      }
    },
    {
      "id": {
        "id": "uno/formatexception",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/formatexception",
        "href": "uno/formatexception"
      },
      "titles": {
        "indexTitle": "FormatException",
        "fullyQualifiedIndexTitle": "Uno.FormatException"
      }
    },
    {
      "id": {
        "id": "uno/graphics/devicebuffer",
        "parentId": "uno/graphics",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "uno/graphics/devicebuffer",
        "href": "uno/graphics/devicebuffer"
      },
      "titles": {
        "indexTitle": "DeviceBuffer",
        "fullyQualifiedIndexTitle": "Uno.Graphics.DeviceBuffer"
      }
    },
    {
      "id": {
        "id": "uno/graphics/graphicscontext",
        "parentId": "uno/graphics",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/graphics/graphicscontext",
        "href": "uno/graphics/graphicscontext"
      },
      "titles": {
        "indexTitle": "GraphicsContext",
        "fullyQualifiedIndexTitle": "Uno.Graphics.GraphicsContext"
      }
    },
    {
      "id": {
        "id": "uno/graphics/graphicscontroller",
        "parentId": "uno/graphics",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/graphics/graphicscontroller",
        "href": "uno/graphics/graphicscontroller"
      },
      "titles": {
        "indexTitle": "GraphicsController",
        "fullyQualifiedIndexTitle": "Uno.Graphics.GraphicsController"
      }
    },
    {
      "id": {
        "id": "uno/graphics/indexbuffer",
        "parentId": "uno/graphics",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/graphics/indexbuffer",
        "href": "uno/graphics/indexbuffer"
      },
      "titles": {
        "indexTitle": "IndexBuffer",
        "fullyQualifiedIndexTitle": "Uno.Graphics.IndexBuffer"
      }
    },
    {
      "id": {
        "id": "uno/graphics/rendertarget",
        "parentId": "uno/graphics",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/graphics/rendertarget",
        "href": "uno/graphics/rendertarget"
      },
      "titles": {
        "indexTitle": "RenderTarget",
        "fullyQualifiedIndexTitle": "Uno.Graphics.RenderTarget"
      }
    },
    {
      "id": {
        "id": "uno/graphics/utils/bitmap",
        "parentId": "uno/graphics/utils",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/graphics/utils/bitmap",
        "href": "uno/graphics/utils/bitmap"
      },
      "titles": {
        "indexTitle": "Bitmap",
        "fullyQualifiedIndexTitle": "Uno.Graphics.Utils.Bitmap"
      }
    },
    {
      "id": {
        "id": "uno/graphics/utils/text/bitmapfont",
        "parentId": "uno/graphics/utils/text",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/graphics/utils/text/bitmapfont",
        "href": "uno/graphics/utils/text/bitmapfont"
      },
      "titles": {
        "indexTitle": "BitmapFont",
        "fullyQualifiedIndexTitle": "Uno.Graphics.Utils.Text.BitmapFont"
      }
    },
    {
      "id": {
        "id": "uno/graphics/utils/text/defaulttexttransform",
        "parentId": "uno/graphics/utils/text",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/graphics/utils/text/defaulttexttransform",
        "href": "uno/graphics/utils/text/defaulttexttransform"
      },
      "titles": {
        "indexTitle": "DefaultTextTransform",
        "fullyQualifiedIndexTitle": "Uno.Graphics.Utils.Text.DefaultTextTransform"
      }
    },
    {
      "id": {
        "id": "uno/graphics/utils/text/fontface",
        "parentId": "uno/graphics/utils/text",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "uno/graphics/utils/text/fontface",
        "href": "uno/graphics/utils/text/fontface"
      },
      "titles": {
        "indexTitle": "FontFace",
        "fullyQualifiedIndexTitle": "Uno.Graphics.Utils.Text.FontFace"
      }
    },
    {
      "id": {
        "id": "uno/graphics/utils/text/spritefontshader",
        "parentId": "uno/graphics/utils/text",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/graphics/utils/text/spritefontshader",
        "href": "uno/graphics/utils/text/spritefontshader"
      },
      "titles": {
        "indexTitle": "SpriteFontShader",
        "fullyQualifiedIndexTitle": "Uno.Graphics.Utils.Text.SpriteFontShader"
      }
    },
    {
      "id": {
        "id": "uno/graphics/utils/text/textrenderer",
        "parentId": "uno/graphics/utils/text",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/graphics/utils/text/textrenderer",
        "href": "uno/graphics/utils/text/textrenderer"
      },
      "titles": {
        "indexTitle": "TextRenderer",
        "fullyQualifiedIndexTitle": "Uno.Graphics.Utils.Text.TextRenderer"
      }
    },
    {
      "id": {
        "id": "uno/graphics/utils/text/textshader",
        "parentId": "uno/graphics/utils/text",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "uno/graphics/utils/text/textshader",
        "href": "uno/graphics/utils/text/textshader"
      },
      "titles": {
        "indexTitle": "TextShader",
        "fullyQualifiedIndexTitle": "Uno.Graphics.Utils.Text.TextShader"
      }
    },
    {
      "id": {
        "id": "uno/graphics/utils/text/textshaderdata",
        "parentId": "uno/graphics/utils/text",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/graphics/utils/text/textshaderdata",
        "href": "uno/graphics/utils/text/textshaderdata"
      },
      "titles": {
        "indexTitle": "TextShaderData",
        "fullyQualifiedIndexTitle": "Uno.Graphics.Utils.Text.TextShaderData"
      }
    },
    {
      "id": {
        "id": "uno/graphics/utils/text/texttransform",
        "parentId": "uno/graphics/utils/text",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "uno/graphics/utils/text/texttransform",
        "href": "uno/graphics/utils/text/texttransform"
      },
      "titles": {
        "indexTitle": "TextTransform",
        "fullyQualifiedIndexTitle": "Uno.Graphics.Utils.Text.TextTransform"
      }
    },
    {
      "id": {
        "id": "uno/graphics/vertexbuffer",
        "parentId": "uno/graphics",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/graphics/vertexbuffer",
        "href": "uno/graphics/vertexbuffer"
      },
      "titles": {
        "indexTitle": "VertexBuffer",
        "fullyQualifiedIndexTitle": "Uno.Graphics.VertexBuffer"
      }
    },
    {
      "id": {
        "id": "uno/graphics/videosampler",
        "parentId": "uno/graphics",
        "type": "Class",
        "modifiers": [
          "public",
          "intrinsic",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/graphics/videosampler",
        "href": "uno/graphics/videosampler"
      },
      "titles": {
        "indexTitle": "VideoSampler",
        "fullyQualifiedIndexTitle": "Uno.Graphics.VideoSampler"
      }
    },
    {
      "id": {
        "id": "uno/graphics/videotexture",
        "parentId": "uno/graphics",
        "type": "Class",
        "modifiers": [
          "public",
          "intrinsic",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/graphics/videotexture",
        "href": "uno/graphics/videotexture"
      },
      "titles": {
        "indexTitle": "VideoTexture",
        "fullyQualifiedIndexTitle": "Uno.Graphics.VideoTexture"
      }
    },
    {
      "id": {
        "id": "uno/indexoutofrangeexception",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/indexoutofrangeexception",
        "href": "uno/indexoutofrangeexception"
      },
      "titles": {
        "indexTitle": "IndexOutOfRangeException",
        "fullyQualifiedIndexTitle": "Uno.IndexOutOfRangeException"
      }
    },
    {
      "id": {
        "id": "uno/internal/arrayenumerable_1",
        "parentId": "uno/internal",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/internal/arrayenumerable_1",
        "href": "uno/internal/arrayenumerable_1"
      },
      "titles": {
        "indexTitle": "ArrayEnumerable<T>",
        "fullyQualifiedIndexTitle": "Uno.Internal.ArrayEnumerable<T>"
      }
    },
    {
      "id": {
        "id": "uno/internal/arrayenumerator_1",
        "parentId": "uno/internal",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/internal/arrayenumerator_1",
        "href": "uno/internal/arrayenumerator_1"
      },
      "titles": {
        "indexTitle": "ArrayEnumerator<T>",
        "fullyQualifiedIndexTitle": "Uno.Internal.ArrayEnumerator<T>"
      }
    },
    {
      "id": {
        "id": "uno/internal/arraylist_1",
        "parentId": "uno/internal",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/internal/arraylist_1",
        "href": "uno/internal/arraylist_1"
      },
      "titles": {
        "indexTitle": "ArrayList<T>",
        "fullyQualifiedIndexTitle": "Uno.Internal.ArrayList<T>"
      }
    },
    {
      "id": {
        "id": "uno/internal/formatstringitem",
        "parentId": "uno/internal",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/internal/formatstringitem",
        "href": "uno/internal/formatstringitem"
      },
      "titles": {
        "indexTitle": "FormatStringItem",
        "fullyQualifiedIndexTitle": "Uno.Internal.FormatStringItem"
      }
    },
    {
      "id": {
        "id": "uno/internal/formatstringliteral",
        "parentId": "uno/internal",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/internal/formatstringliteral",
        "href": "uno/internal/formatstringliteral"
      },
      "titles": {
        "indexTitle": "FormatStringLiteral",
        "fullyQualifiedIndexTitle": "Uno.Internal.FormatStringLiteral"
      }
    },
    {
      "id": {
        "id": "uno/internal/formatstringtoken",
        "parentId": "uno/internal",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "uno/internal/formatstringtoken",
        "href": "uno/internal/formatstringtoken"
      },
      "titles": {
        "indexTitle": "FormatStringToken",
        "fullyQualifiedIndexTitle": "Uno.Internal.FormatStringToken"
      }
    },
    {
      "id": {
        "id": "uno/internal/formatstringtokenizer",
        "parentId": "uno/internal",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/internal/formatstringtokenizer",
        "href": "uno/internal/formatstringtokenizer"
      },
      "titles": {
        "indexTitle": "FormatStringTokenizer",
        "fullyQualifiedIndexTitle": "Uno.Internal.FormatStringTokenizer"
      }
    },
    {
      "id": {
        "id": "uno/invalidcastexception",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/invalidcastexception",
        "href": "uno/invalidcastexception"
      },
      "titles": {
        "indexTitle": "InvalidCastException",
        "fullyQualifiedIndexTitle": "Uno.InvalidCastException"
      }
    },
    {
      "id": {
        "id": "uno/invalidoperationexception",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/invalidoperationexception",
        "href": "uno/invalidoperationexception"
      },
      "titles": {
        "indexTitle": "InvalidOperationException",
        "fullyQualifiedIndexTitle": "Uno.InvalidOperationException"
      }
    },
    {
      "id": {
        "id": "uno/io/binaryreader",
        "parentId": "uno/io",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/io/binaryreader",
        "href": "uno/io/binaryreader"
      },
      "titles": {
        "indexTitle": "BinaryReader",
        "fullyQualifiedIndexTitle": "Uno.IO.BinaryReader"
      }
    },
    {
      "id": {
        "id": "uno/io/binarywriter",
        "parentId": "uno/io",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/io/binarywriter",
        "href": "uno/io/binarywriter"
      },
      "titles": {
        "indexTitle": "BinaryWriter",
        "fullyQualifiedIndexTitle": "Uno.IO.BinaryWriter"
      }
    },
    {
      "id": {
        "id": "uno/io/bundle",
        "parentId": "uno/io",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/io/bundle",
        "href": "uno/io/bundle"
      },
      "titles": {
        "indexTitle": "Bundle",
        "fullyQualifiedIndexTitle": "Uno.IO.Bundle"
      }
    },
    {
      "id": {
        "id": "uno/io/bundlefile",
        "parentId": "uno/io",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/io/bundlefile",
        "href": "uno/io/bundlefile"
      },
      "titles": {
        "indexTitle": "BundleFile",
        "fullyQualifiedIndexTitle": "Uno.IO.BundleFile"
      }
    },
    {
      "id": {
        "id": "uno/io/directoryinfo",
        "parentId": "uno/io",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/io/directoryinfo",
        "href": "uno/io/directoryinfo"
      },
      "titles": {
        "indexTitle": "DirectoryInfo",
        "fullyQualifiedIndexTitle": "Uno.IO.DirectoryInfo"
      }
    },
    {
      "id": {
        "id": "uno/io/endofstreamexception",
        "parentId": "uno/io",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/io/endofstreamexception",
        "href": "uno/io/endofstreamexception"
      },
      "titles": {
        "indexTitle": "EndOfStreamException",
        "fullyQualifiedIndexTitle": "Uno.IO.EndOfStreamException"
      }
    },
    {
      "id": {
        "id": "uno/io/fileinfo",
        "parentId": "uno/io",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/io/fileinfo",
        "href": "uno/io/fileinfo"
      },
      "titles": {
        "indexTitle": "FileInfo",
        "fullyQualifiedIndexTitle": "Uno.IO.FileInfo"
      }
    },
    {
      "id": {
        "id": "uno/io/filenotfoundexception",
        "parentId": "uno/io",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/io/filenotfoundexception",
        "href": "uno/io/filenotfoundexception"
      },
      "titles": {
        "indexTitle": "FileNotFoundException",
        "fullyQualifiedIndexTitle": "Uno.IO.FileNotFoundException"
      }
    },
    {
      "id": {
        "id": "uno/io/filestream",
        "parentId": "uno/io",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/io/filestream",
        "href": "uno/io/filestream"
      },
      "titles": {
        "indexTitle": "FileStream",
        "fullyQualifiedIndexTitle": "Uno.IO.FileStream"
      }
    },
    {
      "id": {
        "id": "uno/io/filesysteminfo",
        "parentId": "uno/io",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "uno/io/filesysteminfo",
        "href": "uno/io/filesysteminfo"
      },
      "titles": {
        "indexTitle": "FileSystemInfo",
        "fullyQualifiedIndexTitle": "Uno.IO.FileSystemInfo"
      }
    },
    {
      "id": {
        "id": "uno/io/ioexception",
        "parentId": "uno/io",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/io/ioexception",
        "href": "uno/io/ioexception"
      },
      "titles": {
        "indexTitle": "IOException",
        "fullyQualifiedIndexTitle": "Uno.IO.IOException"
      }
    },
    {
      "id": {
        "id": "uno/io/memorystream",
        "parentId": "uno/io",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/io/memorystream",
        "href": "uno/io/memorystream"
      },
      "titles": {
        "indexTitle": "MemoryStream",
        "fullyQualifiedIndexTitle": "Uno.IO.MemoryStream"
      }
    },
    {
      "id": {
        "id": "uno/io/stream",
        "parentId": "uno/io",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "uno/io/stream",
        "href": "uno/io/stream"
      },
      "titles": {
        "indexTitle": "Stream",
        "fullyQualifiedIndexTitle": "Uno.IO.Stream"
      }
    },
    {
      "id": {
        "id": "uno/io/streamreader",
        "parentId": "uno/io",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/io/streamreader",
        "href": "uno/io/streamreader"
      },
      "titles": {
        "indexTitle": "StreamReader",
        "fullyQualifiedIndexTitle": "Uno.IO.StreamReader"
      }
    },
    {
      "id": {
        "id": "uno/io/streamwriter",
        "parentId": "uno/io",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/io/streamwriter",
        "href": "uno/io/streamwriter"
      },
      "titles": {
        "indexTitle": "StreamWriter",
        "fullyQualifiedIndexTitle": "Uno.IO.StreamWriter"
      }
    },
    {
      "id": {
        "id": "uno/io/stringreader",
        "parentId": "uno/io",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/io/stringreader",
        "href": "uno/io/stringreader"
      },
      "titles": {
        "indexTitle": "StringReader",
        "fullyQualifiedIndexTitle": "Uno.IO.StringReader"
      }
    },
    {
      "id": {
        "id": "uno/io/stringwriter",
        "parentId": "uno/io",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/io/stringwriter",
        "href": "uno/io/stringwriter"
      },
      "titles": {
        "indexTitle": "StringWriter",
        "fullyQualifiedIndexTitle": "Uno.IO.StringWriter"
      }
    },
    {
      "id": {
        "id": "uno/io/textreader",
        "parentId": "uno/io",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "uno/io/textreader",
        "href": "uno/io/textreader"
      },
      "titles": {
        "indexTitle": "TextReader",
        "fullyQualifiedIndexTitle": "Uno.IO.TextReader"
      }
    },
    {
      "id": {
        "id": "uno/io/textwriter",
        "parentId": "uno/io",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "uno/io/textwriter",
        "href": "uno/io/textwriter"
      },
      "titles": {
        "indexTitle": "TextWriter",
        "fullyQualifiedIndexTitle": "Uno.IO.TextWriter"
      }
    },
    {
      "id": {
        "id": "uno/net/dns",
        "parentId": "uno/net",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/net/dns",
        "href": "uno/net/dns"
      },
      "titles": {
        "indexTitle": "Dns",
        "fullyQualifiedIndexTitle": "Uno.Net.Dns"
      }
    },
    {
      "id": {
        "id": "uno/net/endpoint",
        "parentId": "uno/net",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "uno/net/endpoint",
        "href": "uno/net/endpoint"
      },
      "titles": {
        "indexTitle": "EndPoint",
        "fullyQualifiedIndexTitle": "Uno.Net.EndPoint"
      }
    },
    {
      "id": {
        "id": "uno/net/http/httpmessagehandler",
        "parentId": "uno/net/http",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/net/http/httpmessagehandler",
        "href": "uno/net/http/httpmessagehandler"
      },
      "titles": {
        "indexTitle": "HttpMessageHandler",
        "fullyQualifiedIndexTitle": "Uno.Net.Http.HttpMessageHandler"
      }
    },
    {
      "id": {
        "id": "uno/net/http/httpmessagehandlerrequest",
        "parentId": "uno/net/http",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/net/http/httpmessagehandlerrequest",
        "href": "uno/net/http/httpmessagehandlerrequest"
      },
      "titles": {
        "indexTitle": "HttpMessageHandlerRequest",
        "fullyQualifiedIndexTitle": "Uno.Net.Http.HttpMessageHandlerRequest"
      }
    },
    {
      "id": {
        "id": "uno/net/http/implementation/httpmessagehandlerrequestcallbacks",
        "parentId": "uno/net/http/implementation",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/net/http/implementation/httpmessagehandlerrequestcallbacks",
        "href": "uno/net/http/implementation/httpmessagehandlerrequestcallbacks"
      },
      "titles": {
        "indexTitle": "HttpMessageHandlerRequestCallbacks",
        "fullyQualifiedIndexTitle": "Uno.Net.Http.Implementation.HttpMessageHandlerRequestCallbacks"
      }
    },
    {
      "id": {
        "id": "uno/net/http/invalidresponsetypeexception",
        "parentId": "uno/net/http",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/net/http/invalidresponsetypeexception",
        "href": "uno/net/http/invalidresponsetypeexception"
      },
      "titles": {
        "indexTitle": "InvalidResponseTypeException",
        "fullyQualifiedIndexTitle": "Uno.Net.Http.InvalidResponseTypeException"
      }
    },
    {
      "id": {
        "id": "uno/net/http/invalidstateexception",
        "parentId": "uno/net/http",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/net/http/invalidstateexception",
        "href": "uno/net/http/invalidstateexception"
      },
      "titles": {
        "indexTitle": "InvalidStateException",
        "fullyQualifiedIndexTitle": "Uno.Net.Http.InvalidStateException"
      }
    },
    {
      "id": {
        "id": "uno/net/http/uri",
        "parentId": "uno/net/http",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/net/http/uri",
        "href": "uno/net/http/uri"
      },
      "titles": {
        "indexTitle": "Uri",
        "fullyQualifiedIndexTitle": "Uno.Net.Http.Uri"
      }
    },
    {
      "id": {
        "id": "uno/net/http/uriformatexception",
        "parentId": "uno/net/http",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/net/http/uriformatexception",
        "href": "uno/net/http/uriformatexception"
      },
      "titles": {
        "indexTitle": "UriFormatException",
        "fullyQualifiedIndexTitle": "Uno.Net.Http.UriFormatException"
      }
    },
    {
      "id": {
        "id": "uno/net/ipaddress",
        "parentId": "uno/net",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/net/ipaddress",
        "href": "uno/net/ipaddress"
      },
      "titles": {
        "indexTitle": "IPAddress",
        "fullyQualifiedIndexTitle": "Uno.Net.IPAddress"
      }
    },
    {
      "id": {
        "id": "uno/net/ipendpoint",
        "parentId": "uno/net",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/net/ipendpoint",
        "href": "uno/net/ipendpoint"
      },
      "titles": {
        "indexTitle": "IPEndPoint",
        "fullyQualifiedIndexTitle": "Uno.Net.IPEndPoint"
      }
    },
    {
      "id": {
        "id": "uno/net/sockets/networkstream",
        "parentId": "uno/net/sockets",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/net/sockets/networkstream",
        "href": "uno/net/sockets/networkstream"
      },
      "titles": {
        "indexTitle": "NetworkStream",
        "fullyQualifiedIndexTitle": "Uno.Net.Sockets.NetworkStream"
      }
    },
    {
      "id": {
        "id": "uno/net/sockets/socket",
        "parentId": "uno/net/sockets",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/net/sockets/socket",
        "href": "uno/net/sockets/socket"
      },
      "titles": {
        "indexTitle": "Socket",
        "fullyQualifiedIndexTitle": "Uno.Net.Sockets.Socket"
      }
    },
    {
      "id": {
        "id": "uno/net/sockets/socketexception",
        "parentId": "uno/net/sockets",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/net/sockets/socketexception",
        "href": "uno/net/sockets/socketexception"
      },
      "titles": {
        "indexTitle": "SocketException",
        "fullyQualifiedIndexTitle": "Uno.Net.Sockets.SocketException"
      }
    },
    {
      "id": {
        "id": "uno/net/sockets/tcplistener",
        "parentId": "uno/net/sockets",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/net/sockets/tcplistener",
        "href": "uno/net/sockets/tcplistener"
      },
      "titles": {
        "indexTitle": "TcpListener",
        "fullyQualifiedIndexTitle": "Uno.Net.Sockets.TcpListener"
      }
    },
    {
      "id": {
        "id": "uno/notimplementedexception",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/notimplementedexception",
        "href": "uno/notimplementedexception"
      },
      "titles": {
        "indexTitle": "NotImplementedException",
        "fullyQualifiedIndexTitle": "Uno.NotImplementedException"
      }
    },
    {
      "id": {
        "id": "uno/notsupportedexception",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/notsupportedexception",
        "href": "uno/notsupportedexception"
      },
      "titles": {
        "indexTitle": "NotSupportedException",
        "fullyQualifiedIndexTitle": "Uno.NotSupportedException"
      }
    },
    {
      "id": {
        "id": "uno/nullreferenceexception",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/nullreferenceexception",
        "href": "uno/nullreferenceexception"
      },
      "titles": {
        "indexTitle": "NullReferenceException",
        "fullyQualifiedIndexTitle": "Uno.NullReferenceException"
      }
    },
    {
      "id": {
        "id": "uno/objectdisposedexception",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/objectdisposedexception",
        "href": "uno/objectdisposedexception"
      },
      "titles": {
        "indexTitle": "ObjectDisposedException",
        "fullyQualifiedIndexTitle": "Uno.ObjectDisposedException"
      }
    },
    {
      "id": {
        "id": "uno/obsoleteattribute",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/obsoleteattribute",
        "href": "uno/obsoleteattribute"
      },
      "titles": {
        "indexTitle": "ObsoleteAttribute",
        "fullyQualifiedIndexTitle": "Uno.ObsoleteAttribute"
      }
    },
    {
      "id": {
        "id": "uno/overflowexception",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/overflowexception",
        "href": "uno/overflowexception"
      },
      "titles": {
        "indexTitle": "OverflowException",
        "fullyQualifiedIndexTitle": "Uno.OverflowException"
      }
    },
    {
      "id": {
        "id": "uno/platform/closingeventargs",
        "parentId": "uno/platform",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/platform/closingeventargs",
        "href": "uno/platform/closingeventargs"
      },
      "titles": {
        "indexTitle": "ClosingEventArgs",
        "fullyQualifiedIndexTitle": "Uno.Platform.ClosingEventArgs"
      }
    },
    {
      "id": {
        "id": "uno/platform/coreapp",
        "parentId": "uno/platform",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "uno/platform/coreapp",
        "href": "uno/platform/coreapp"
      },
      "titles": {
        "indexTitle": "CoreApp",
        "fullyQualifiedIndexTitle": "Uno.Platform.CoreApp"
      }
    },
    {
      "id": {
        "id": "uno/platform/desktopdisplay",
        "parentId": "uno/platform",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/platform/desktopdisplay",
        "href": "uno/platform/desktopdisplay"
      },
      "titles": {
        "indexTitle": "DesktopDisplay",
        "fullyQualifiedIndexTitle": "Uno.Platform.DesktopDisplay"
      }
    },
    {
      "id": {
        "id": "uno/platform/display",
        "parentId": "uno/platform",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "uno/platform/display",
        "href": "uno/platform/display"
      },
      "titles": {
        "indexTitle": "Display",
        "fullyQualifiedIndexTitle": "Uno.Platform.Display"
      }
    },
    {
      "id": {
        "id": "uno/platform/framechangedeventargs",
        "parentId": "uno/platform",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/platform/framechangedeventargs",
        "href": "uno/platform/framechangedeventargs"
      },
      "titles": {
        "indexTitle": "FrameChangedEventArgs",
        "fullyQualifiedIndexTitle": "Uno.Platform.FrameChangedEventArgs"
      }
    },
    {
      "id": {
        "id": "uno/platform/graphicscontextbackend",
        "parentId": "uno/platform",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "uno/platform/graphicscontextbackend",
        "href": "uno/platform/graphicscontextbackend"
      },
      "titles": {
        "indexTitle": "GraphicsContextBackend",
        "fullyQualifiedIndexTitle": "Uno.Platform.GraphicsContextBackend"
      }
    },
    {
      "id": {
        "id": "uno/platform/keyeventargs",
        "parentId": "uno/platform",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/platform/keyeventargs",
        "href": "uno/platform/keyeventargs"
      },
      "titles": {
        "indexTitle": "KeyEventArgs",
        "fullyQualifiedIndexTitle": "Uno.Platform.KeyEventArgs"
      }
    },
    {
      "id": {
        "id": "uno/platform/osframe",
        "parentId": "uno/platform",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/platform/osframe",
        "href": "uno/platform/osframe"
      },
      "titles": {
        "indexTitle": "OSFrame",
        "fullyQualifiedIndexTitle": "Uno.Platform.OSFrame"
      }
    },
    {
      "id": {
        "id": "uno/platform/pointereventargs",
        "parentId": "uno/platform",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/platform/pointereventargs",
        "href": "uno/platform/pointereventargs"
      },
      "titles": {
        "indexTitle": "PointerEventArgs",
        "fullyQualifiedIndexTitle": "Uno.Platform.PointerEventArgs"
      }
    },
    {
      "id": {
        "id": "uno/platform/textinputeventargs",
        "parentId": "uno/platform",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/platform/textinputeventargs",
        "href": "uno/platform/textinputeventargs"
      },
      "titles": {
        "indexTitle": "TextInputEventArgs",
        "fullyQualifiedIndexTitle": "Uno.Platform.TextInputEventArgs"
      }
    },
    {
      "id": {
        "id": "uno/platform/timereventargs",
        "parentId": "uno/platform",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/platform/timereventargs",
        "href": "uno/platform/timereventargs"
      },
      "titles": {
        "indexTitle": "TimerEventArgs",
        "fullyQualifiedIndexTitle": "Uno.Platform.TimerEventArgs"
      }
    },
    {
      "id": {
        "id": "uno/platform/window",
        "parentId": "uno/platform",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/platform/window",
        "href": "uno/platform/window"
      },
      "titles": {
        "indexTitle": "Window",
        "fullyQualifiedIndexTitle": "Uno.Platform.Window"
      }
    },
    {
      "id": {
        "id": "uno/platform/windowbackend",
        "parentId": "uno/platform",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "uno/platform/windowbackend",
        "href": "uno/platform/windowbackend"
      },
      "titles": {
        "indexTitle": "WindowBackend",
        "fullyQualifiedIndexTitle": "Uno.Platform.WindowBackend"
      }
    },
    {
      "id": {
        "id": "uno/random",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/random",
        "href": "uno/random"
      },
      "titles": {
        "indexTitle": "Random",
        "fullyQualifiedIndexTitle": "Uno.Random"
      }
    },
    {
      "id": {
        "id": "uno/testing/ignoreattribute",
        "parentId": "uno/testing",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/testing/ignoreattribute",
        "href": "uno/testing/ignoreattribute"
      },
      "titles": {
        "indexTitle": "IgnoreAttribute",
        "fullyQualifiedIndexTitle": "Uno.Testing.IgnoreAttribute"
      }
    },
    {
      "id": {
        "id": "uno/testing/registry",
        "parentId": "uno/testing",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/testing/registry",
        "href": "uno/testing/registry"
      },
      "titles": {
        "indexTitle": "Registry",
        "fullyQualifiedIndexTitle": "Uno.Testing.Registry"
      }
    },
    {
      "id": {
        "id": "uno/testing/testattribute",
        "parentId": "uno/testing",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/testing/testattribute",
        "href": "uno/testing/testattribute"
      },
      "titles": {
        "indexTitle": "TestAttribute",
        "fullyQualifiedIndexTitle": "Uno.Testing.TestAttribute"
      }
    },
    {
      "id": {
        "id": "uno/testing/testsetup",
        "parentId": "uno/testing",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/testing/testsetup",
        "href": "uno/testing/testsetup"
      },
      "titles": {
        "indexTitle": "TestSetup",
        "fullyQualifiedIndexTitle": "Uno.Testing.TestSetup"
      }
    },
    {
      "id": {
        "id": "uno/text/decoder",
        "parentId": "uno/text",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "uno/text/decoder",
        "href": "uno/text/decoder"
      },
      "titles": {
        "indexTitle": "Decoder",
        "fullyQualifiedIndexTitle": "Uno.Text.Decoder"
      }
    },
    {
      "id": {
        "id": "uno/text/encoding",
        "parentId": "uno/text",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "uno/text/encoding",
        "href": "uno/text/encoding"
      },
      "titles": {
        "indexTitle": "Encoding",
        "fullyQualifiedIndexTitle": "Uno.Text.Encoding"
      }
    },
    {
      "id": {
        "id": "uno/text/stringbuilder",
        "parentId": "uno/text",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/text/stringbuilder",
        "href": "uno/text/stringbuilder"
      },
      "titles": {
        "indexTitle": "StringBuilder",
        "fullyQualifiedIndexTitle": "Uno.Text.StringBuilder"
      }
    },
    {
      "id": {
        "id": "uno/text/utf8encoding",
        "parentId": "uno/text",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/text/utf8encoding",
        "href": "uno/text/utf8encoding"
      },
      "titles": {
        "indexTitle": "UTF8Encoding",
        "fullyQualifiedIndexTitle": "Uno.Text.UTF8Encoding"
      }
    },
    {
      "id": {
        "id": "uno/threading/autoresetevent",
        "parentId": "uno/threading",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/threading/autoresetevent",
        "href": "uno/threading/autoresetevent"
      },
      "titles": {
        "indexTitle": "AutoResetEvent",
        "fullyQualifiedIndexTitle": "Uno.Threading.AutoResetEvent"
      }
    },
    {
      "id": {
        "id": "uno/threading/concurrentdictionary_2",
        "parentId": "uno/threading",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/threading/concurrentdictionary_2",
        "href": "uno/threading/concurrentdictionary_2"
      },
      "titles": {
        "indexTitle": "ConcurrentDictionary<TKey, TValue>",
        "fullyQualifiedIndexTitle": "Uno.Threading.ConcurrentDictionary<TKey, TValue>"
      }
    },
    {
      "id": {
        "id": "uno/threading/concurrentqueue_1",
        "parentId": "uno/threading",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/threading/concurrentqueue_1",
        "href": "uno/threading/concurrentqueue_1"
      },
      "titles": {
        "indexTitle": "ConcurrentQueue<T>",
        "fullyQualifiedIndexTitle": "Uno.Threading.ConcurrentQueue<T>"
      }
    },
    {
      "id": {
        "id": "uno/threading/eventwaithandle",
        "parentId": "uno/threading",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/threading/eventwaithandle",
        "href": "uno/threading/eventwaithandle"
      },
      "titles": {
        "indexTitle": "EventWaitHandle",
        "fullyQualifiedIndexTitle": "Uno.Threading.EventWaitHandle"
      }
    },
    {
      "id": {
        "id": "uno/threading/future",
        "parentId": "uno/threading",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "uno/threading/future",
        "href": "uno/threading/future"
      },
      "titles": {
        "indexTitle": "Future",
        "fullyQualifiedIndexTitle": "Uno.Threading.Future"
      }
    },
    {
      "id": {
        "id": "uno/threading/future_1",
        "parentId": "uno/threading",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "uno/threading/future_1",
        "href": "uno/threading/future_1"
      },
      "titles": {
        "indexTitle": "Future<T>",
        "fullyQualifiedIndexTitle": "Uno.Threading.Future<T>"
      }
    },
    {
      "id": {
        "id": "uno/threading/lockguard",
        "parentId": "uno/threading",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/threading/lockguard",
        "href": "uno/threading/lockguard"
      },
      "titles": {
        "indexTitle": "LockGuard",
        "fullyQualifiedIndexTitle": "Uno.Threading.LockGuard"
      }
    },
    {
      "id": {
        "id": "uno/threading/manualresetevent",
        "parentId": "uno/threading",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/threading/manualresetevent",
        "href": "uno/threading/manualresetevent"
      },
      "titles": {
        "indexTitle": "ManualResetEvent",
        "fullyQualifiedIndexTitle": "Uno.Threading.ManualResetEvent"
      }
    },
    {
      "id": {
        "id": "uno/threading/mutex",
        "parentId": "uno/threading",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/threading/mutex",
        "href": "uno/threading/mutex"
      },
      "titles": {
        "indexTitle": "Mutex",
        "fullyQualifiedIndexTitle": "Uno.Threading.Mutex"
      }
    },
    {
      "comment": {
        "brief": "Uno-side Promise based on the [A+ standard](https://promisesaplus.com/).",
        "full": "Uno-side Promise based on the [A+ standard](https://promisesaplus.com/).\n\nThis can be used in multiple ways:\n\n## Statically\n\nYou can use the `Run` function to wrap whatever argument-less function you want as a `Promise`, like this:\n\n    bool doStuff()\n    {\n        //stuff is done\n        success = doOtherStuff();\n        return success;\n    }\n\n    void onSuccess(bool value)\n    {\n        //Success!\n    }\n\n    void onFail(Exception e)\n    {\n        // Oh no!\n    }\n\n    public void DoSomeFancyStuff()\n    {\n        var promise = Promise.Run(doStuff).Then(onSuccess, onFail);\n    }\n\n## Make your own promises\n\nYou can also extend `Promise` and handle it yourself. Simply call `Resolve` or `Reject` once you have a result or a failure. The [Native Facebook login example](https://github.com/fusetools/fuse-samples/blob/feature-NativeFacebookLogin/Samples/NativeFacebookLogin/FacebookLogin/FacebookLoginModule.uno) is a good example of this being done in practice.\n\nNotice that `Resolve` and `Reject` are public, so you can also theoretically both resolve and reject promises from elsewhere.\n\n# Making Promises accessible from JavaScript modules\n\nA Promise can be wrapped in a @(NativePromise) and fed to a @(NativeModule) through `AddMember`. You can read more about creating custom js modules, and how to populate them with functions and promises, [here](articles:native-interop/native-js-modules.md)"
      },
      "id": {
        "id": "uno/threading/promise_1",
        "parentId": "uno/threading",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/threading/promise_1",
        "href": "uno/threading/promise_1"
      },
      "titles": {
        "indexTitle": "Promise<T>",
        "fullyQualifiedIndexTitle": "Uno.Threading.Promise<T>"
      }
    },
    {
      "id": {
        "id": "uno/threading/semaphore",
        "parentId": "uno/threading",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/threading/semaphore",
        "href": "uno/threading/semaphore"
      },
      "titles": {
        "indexTitle": "Semaphore",
        "fullyQualifiedIndexTitle": "Uno.Threading.Semaphore"
      }
    },
    {
      "id": {
        "id": "uno/threading/thread",
        "parentId": "uno/threading",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/threading/thread",
        "href": "uno/threading/thread"
      },
      "titles": {
        "indexTitle": "Thread",
        "fullyQualifiedIndexTitle": "Uno.Threading.Thread"
      }
    },
    {
      "id": {
        "id": "uno/threading/threadpool",
        "parentId": "uno/threading",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/threading/threadpool",
        "href": "uno/threading/threadpool"
      },
      "titles": {
        "indexTitle": "ThreadPool",
        "fullyQualifiedIndexTitle": "Uno.Threading.ThreadPool"
      }
    },
    {
      "id": {
        "id": "uno/threading/threadstateexception",
        "parentId": "uno/threading",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/threading/threadstateexception",
        "href": "uno/threading/threadstateexception"
      },
      "titles": {
        "indexTitle": "ThreadStateException",
        "fullyQualifiedIndexTitle": "Uno.Threading.ThreadStateException"
      }
    },
    {
      "id": {
        "id": "uno/time/calendars/era",
        "parentId": "uno/time/calendars",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/time/calendars/era",
        "href": "uno/time/calendars/era"
      },
      "titles": {
        "indexTitle": "Era",
        "fullyQualifiedIndexTitle": "Uno.Time.Calendars.Era"
      }
    },
    {
      "id": {
        "id": "uno/time/calendarsystem",
        "parentId": "uno/time",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/time/calendarsystem",
        "href": "uno/time/calendarsystem"
      },
      "titles": {
        "indexTitle": "CalendarSystem",
        "fullyQualifiedIndexTitle": "Uno.Time.CalendarSystem"
      }
    },
    {
      "id": {
        "id": "uno/time/datetimezone",
        "parentId": "uno/time",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "uno/time/datetimezone",
        "href": "uno/time/datetimezone"
      },
      "titles": {
        "indexTitle": "DateTimeZone",
        "fullyQualifiedIndexTitle": "Uno.Time.DateTimeZone"
      }
    },
    {
      "id": {
        "id": "uno/time/devicetimezone",
        "parentId": "uno/time",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/time/devicetimezone",
        "href": "uno/time/devicetimezone"
      },
      "titles": {
        "indexTitle": "DeviceTimeZone",
        "fullyQualifiedIndexTitle": "Uno.Time.DeviceTimeZone"
      }
    },
    {
      "id": {
        "id": "uno/time/period",
        "parentId": "uno/time",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/time/period",
        "href": "uno/time/period"
      },
      "titles": {
        "indexTitle": "Period",
        "fullyQualifiedIndexTitle": "Uno.Time.Period"
      }
    },
    {
      "id": {
        "id": "uno/time/text/localdatepattern",
        "parentId": "uno/time/text",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/time/text/localdatepattern",
        "href": "uno/time/text/localdatepattern"
      },
      "titles": {
        "indexTitle": "LocalDatePattern",
        "fullyQualifiedIndexTitle": "Uno.Time.Text.LocalDatePattern"
      }
    },
    {
      "id": {
        "id": "uno/time/text/localdatetimepattern",
        "parentId": "uno/time/text",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/time/text/localdatetimepattern",
        "href": "uno/time/text/localdatetimepattern"
      },
      "titles": {
        "indexTitle": "LocalDateTimePattern",
        "fullyQualifiedIndexTitle": "Uno.Time.Text.LocalDateTimePattern"
      }
    },
    {
      "id": {
        "id": "uno/time/text/localtimepattern",
        "parentId": "uno/time/text",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/time/text/localtimepattern",
        "href": "uno/time/text/localtimepattern"
      },
      "titles": {
        "indexTitle": "LocalTimePattern",
        "fullyQualifiedIndexTitle": "Uno.Time.Text.LocalTimePattern"
      }
    },
    {
      "id": {
        "id": "uno/time/text/offsetdatetimepattern",
        "parentId": "uno/time/text",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/time/text/offsetdatetimepattern",
        "href": "uno/time/text/offsetdatetimepattern"
      },
      "titles": {
        "indexTitle": "OffsetDateTimePattern",
        "fullyQualifiedIndexTitle": "Uno.Time.Text.OffsetDateTimePattern"
      }
    },
    {
      "id": {
        "id": "uno/time/text/offsetpattern",
        "parentId": "uno/time/text",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/time/text/offsetpattern",
        "href": "uno/time/text/offsetpattern"
      },
      "titles": {
        "indexTitle": "OffsetPattern",
        "fullyQualifiedIndexTitle": "Uno.Time.Text.OffsetPattern"
      }
    },
    {
      "id": {
        "id": "uno/time/text/parseresult_1",
        "parentId": "uno/time/text",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/time/text/parseresult_1",
        "href": "uno/time/text/parseresult_1"
      },
      "titles": {
        "indexTitle": "ParseResult<T>",
        "fullyQualifiedIndexTitle": "Uno.Time.Text.ParseResult<T>"
      }
    },
    {
      "id": {
        "id": "uno/time/zoneddatetime",
        "parentId": "uno/time",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/time/zoneddatetime",
        "href": "uno/time/zoneddatetime"
      },
      "titles": {
        "indexTitle": "ZonedDateTime",
        "fullyQualifiedIndexTitle": "Uno.Time.ZonedDateTime"
      }
    },
    {
      "id": {
        "id": "uno/tuple_8",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/tuple_8",
        "href": "uno/tuple_8"
      },
      "titles": {
        "indexTitle": "Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>",
        "fullyQualifiedIndexTitle": "Uno.Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>"
      }
    },
    {
      "id": {
        "id": "uno/tuple_7",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/tuple_7",
        "href": "uno/tuple_7"
      },
      "titles": {
        "indexTitle": "Tuple<T1, T2, T3, T4, T5, T6, T7>",
        "fullyQualifiedIndexTitle": "Uno.Tuple<T1, T2, T3, T4, T5, T6, T7>"
      }
    },
    {
      "id": {
        "id": "uno/tuple_6",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/tuple_6",
        "href": "uno/tuple_6"
      },
      "titles": {
        "indexTitle": "Tuple<T1, T2, T3, T4, T5, T6>",
        "fullyQualifiedIndexTitle": "Uno.Tuple<T1, T2, T3, T4, T5, T6>"
      }
    },
    {
      "id": {
        "id": "uno/tuple_5",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/tuple_5",
        "href": "uno/tuple_5"
      },
      "titles": {
        "indexTitle": "Tuple<T1, T2, T3, T4, T5>",
        "fullyQualifiedIndexTitle": "Uno.Tuple<T1, T2, T3, T4, T5>"
      }
    },
    {
      "id": {
        "id": "uno/tuple_4",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/tuple_4",
        "href": "uno/tuple_4"
      },
      "titles": {
        "indexTitle": "Tuple<T1, T2, T3, T4>",
        "fullyQualifiedIndexTitle": "Uno.Tuple<T1, T2, T3, T4>"
      }
    },
    {
      "id": {
        "id": "uno/tuple_3",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/tuple_3",
        "href": "uno/tuple_3"
      },
      "titles": {
        "indexTitle": "Tuple<T1, T2, T3>",
        "fullyQualifiedIndexTitle": "Uno.Tuple<T1, T2, T3>"
      }
    },
    {
      "id": {
        "id": "uno/tuple_2",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/tuple_2",
        "href": "uno/tuple_2"
      },
      "titles": {
        "indexTitle": "Tuple<T1, T2>",
        "fullyQualifiedIndexTitle": "Uno.Tuple<T1, T2>"
      }
    },
    {
      "id": {
        "id": "uno/tuple_1",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/tuple_1",
        "href": "uno/tuple_1"
      },
      "titles": {
        "indexTitle": "Tuple<T1>",
        "fullyQualifiedIndexTitle": "Uno.Tuple<T1>"
      }
    },
    {
      "id": {
        "id": "uno/type",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/type",
        "href": "uno/type"
      },
      "titles": {
        "indexTitle": "Type",
        "fullyQualifiedIndexTitle": "Uno.Type"
      }
    },
    {
      "id": {
        "id": "uno/typeinitializationexception",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/typeinitializationexception",
        "href": "uno/typeinitializationexception"
      },
      "titles": {
        "indexTitle": "TypeInitializationException",
        "fullyQualifiedIndexTitle": "Uno.TypeInitializationException"
      }
    },
    {
      "id": {
        "id": "uno/ux/bundlefilesource",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/ux/bundlefilesource",
        "href": "uno/ux/bundlefilesource"
      },
      "titles": {
        "indexTitle": "BundleFileSource",
        "fullyQualifiedIndexTitle": "Uno.UX.BundleFileSource"
      }
    },
    {
      "id": {
        "id": "uno/ux/filesource",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "uno/ux/filesource",
        "href": "uno/ux/filesource"
      },
      "titles": {
        "indexTitle": "FileSource",
        "fullyQualifiedIndexTitle": "Uno.UX.FileSource"
      }
    },
    {
      "id": {
        "id": "uno/ux/nametable",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/nametable",
        "href": "uno/ux/nametable"
      },
      "titles": {
        "indexTitle": "NameTable",
        "fullyQualifiedIndexTitle": "Uno.UX.NameTable"
      }
    },
    {
      "id": {
        "id": "uno/ux/property",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "uno/ux/property",
        "href": "uno/ux/property"
      },
      "titles": {
        "indexTitle": "Property",
        "fullyQualifiedIndexTitle": "Uno.UX.Property"
      }
    },
    {
      "id": {
        "id": "uno/ux/property_1",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "uno/ux/property_1",
        "href": "uno/ux/property_1"
      },
      "titles": {
        "indexTitle": "Property<T>",
        "fullyQualifiedIndexTitle": "Uno.UX.Property<T>"
      }
    },
    {
      "id": {
        "id": "uno/ux/propertyaccessor",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "uno/ux/propertyaccessor",
        "href": "uno/ux/propertyaccessor"
      },
      "titles": {
        "indexTitle": "PropertyAccessor",
        "fullyQualifiedIndexTitle": "Uno.UX.PropertyAccessor"
      }
    },
    {
      "id": {
        "id": "uno/ux/propertyobject",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/ux/propertyobject",
        "href": "uno/ux/propertyobject"
      },
      "titles": {
        "indexTitle": "PropertyObject",
        "fullyQualifiedIndexTitle": "Uno.UX.PropertyObject"
      }
    },
    {
      "comment": {
        "brief": "Resources are objects that are identified by a string key, either globally for your app or\nfor certain pages/subtrees.",
        "full": "Resources are objects that are identified by a string key, either globally for your app or\nfor certain pages/subtrees.\n\n## Types of resources\n\nResources can be of any type, but it is most commonly used for fonts, colors, constant values,\nstrings etc.\n\nClasses that inherit from @Node can only be rooted with one parent at a time, and is therefore\nrarely useful as global resources. Consider creating a @ux:Class instead and instantiate multiple\nobjects whenever needed.\n\n## Global resources (`ux:Global`)\n\nThe @ux:Global attribute can be used on an UX node to convert it to a global resource.\n\nFor example, a global Font resource can be defined like this:\n\n    <Font File=\"arial.ttf\" ux:Global=\"MyDefaultFont\" />\n\nAnd then used like this:\n\n    <Text Font=\"MyDefaultFont\" />\n\nWhen the global key is used directly (with no binding syntax), the resource is resolved statically\nat build time, and you get an error message if no appropriate resource is found.\n\n## Dynamic resource bindings\n\nWhen you want resources to resolve at runtime and respect tree-local resources, you can also use the\ndynamic resource binding syntax:\n\n    <Text Font=\"{Resource MyDefaultFont}\" />\n\n## Local resources (`ux:Key`)\n\nThe `ux:Key` attribute is used to convert a node to a tree-local resource.\n\nThis allows you to do local overrides in the tree, using the `ux:Key` attribute:\n\n    <Panel>\n        <Font File=\"verdana.ttf\" ux:Key=\"MyDefaultFont\" />\n        <Panel>\n            <Text Font=\"{Resource MyDefaultFont}\" />\n        </Panel>\n    </Panel>\n\nYou can think of `ux:Global` as a way to set global defaults for dynamic resource keys (`ux:Key`)\n\n## Resource key uniqueness\n\nGlobal resource keys must be unique for the given *type* of the resource. Multiple resources can have\nthe same name as long as they are unrelated types.\n\nFor example, Fuse defines multiple resources with the key `Blue`, and the right resource is determined\nbased on the expected type where it used. It can either be a `float4` color value or a `SolidColor` brush.\n\n    <float4 ux:Global=\"Red\" ux:Value=\"#f00\" />\n    <SolidColor ux:Global=\"Red\" Color=\"Red\" />",
        "attributes": {
          "topic": "Resources"
        }
      },
      "id": {
        "id": "uno/ux/resource",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/resource",
        "href": "uno/ux/resource"
      },
      "titles": {
        "indexTitle": "Resource",
        "fullyQualifiedIndexTitle": "Uno.UX.Resource"
      }
    },
    {
      "comment": {
        "brief": "Base class for objects that can create new objects of a certain kind.",
        "full": "Base class for objects that can create new objects of a certain kind.\n\nThis class is abstract and must be subclassed before it can be instantiated.\n\nSubclasses are typically generated by the UX compiler as factory objects\nthat capture scopes within an UX document, for example within an iterator, or\nby explicitly using the `ux:Template` attribute."
      },
      "id": {
        "id": "uno/ux/template",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "uno/ux/template",
        "href": "uno/ux/template"
      },
      "titles": {
        "indexTitle": "Template",
        "fullyQualifiedIndexTitle": "Uno.UX.Template"
      }
    },
    {
      "id": {
        "id": "uno/ux/uxargattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxargattribute",
        "href": "uno/ux/uxargattribute"
      },
      "titles": {
        "indexTitle": "UXArgAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXArgAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/uxattachedeventadderattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxattachedeventadderattribute",
        "href": "uno/ux/uxattachedeventadderattribute"
      },
      "titles": {
        "indexTitle": "UXAttachedEventAdderAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXAttachedEventAdderAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/uxattachedeventremoverattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxattachedeventremoverattribute",
        "href": "uno/ux/uxattachedeventremoverattribute"
      },
      "titles": {
        "indexTitle": "UXAttachedEventRemoverAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXAttachedEventRemoverAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/uxattachedpropertygetterattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxattachedpropertygetterattribute",
        "href": "uno/ux/uxattachedpropertygetterattribute"
      },
      "titles": {
        "indexTitle": "UXAttachedPropertyGetterAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXAttachedPropertyGetterAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/uxattachedpropertyresetterattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxattachedpropertyresetterattribute",
        "href": "uno/ux/uxattachedpropertyresetterattribute"
      },
      "titles": {
        "indexTitle": "UXAttachedPropertyResetterAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXAttachedPropertyResetterAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/uxattachedpropertysetterattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxattachedpropertysetterattribute",
        "href": "uno/ux/uxattachedpropertysetterattribute"
      },
      "titles": {
        "indexTitle": "UXAttachedPropertySetterAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXAttachedPropertySetterAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/uxattachedpropertystylesetterattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxattachedpropertystylesetterattribute",
        "href": "uno/ux/uxattachedpropertystylesetterattribute"
      },
      "titles": {
        "indexTitle": "UXAttachedPropertyStyleSetterAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXAttachedPropertyStyleSetterAttribute"
      }
    },
    {
      "comment": {
        "brief": "Makes the UX compiler automatically assign the full qualified name of the current `ux:Class` to the decorated property.",
        "full": "Makes the UX compiler automatically assign the full qualified name of the current `ux:Class` to the decorated property."
      },
      "id": {
        "id": "uno/ux/uxautoclassnameattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxautoclassnameattribute",
        "href": "uno/ux/uxautoclassnameattribute"
      },
      "titles": {
        "indexTitle": "UXAutoClassNameAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXAutoClassNameAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/uxautogenericattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxautogenericattribute",
        "href": "uno/ux/uxautogenericattribute"
      },
      "titles": {
        "indexTitle": "UXAutoGenericAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXAutoGenericAttribute"
      }
    },
    {
      "comment": {
        "brief": "Makes the UX compiler automatically assign a valid `NameTable` instance to the decorated property.",
        "full": "Makes the UX compiler automatically assign a valid `NameTable` instance to the decorated property."
      },
      "id": {
        "id": "uno/ux/uxautonametableattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxautonametableattribute",
        "href": "uno/ux/uxautonametableattribute"
      },
      "titles": {
        "indexTitle": "UXAutoNameTableAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXAutoNameTableAttribute"
      }
    },
    {
      "comment": {
        "brief": "When used on an attached property X, this makes the UX compiler automatically assign a valid NameTable instance\nto the `targetProp` if the property X is assigned a value in UX markup.",
        "full": "When used on an attached property X, this makes the UX compiler automatically assign a valid NameTable instance\nto the `targetProp` if the property X is assigned a value in UX markup."
      },
      "id": {
        "id": "uno/ux/uxauxnametableattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxauxnametableattribute",
        "href": "uno/ux/uxauxnametableattribute"
      },
      "titles": {
        "indexTitle": "UXAuxNameTableAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXAuxNameTableAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/uxbinaryoperatorattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxbinaryoperatorattribute",
        "href": "uno/ux/uxbinaryoperatorattribute"
      },
      "titles": {
        "indexTitle": "UXBinaryOperatorAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXBinaryOperatorAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/uxcomponentsattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxcomponentsattribute",
        "href": "uno/ux/uxcomponentsattribute"
      },
      "titles": {
        "indexTitle": "UXComponentsAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXComponentsAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/uxconstructorattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxconstructorattribute",
        "href": "uno/ux/uxconstructorattribute"
      },
      "titles": {
        "indexTitle": "UXConstructorAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXConstructorAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/uxcontentattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxcontentattribute",
        "href": "uno/ux/uxcontentattribute"
      },
      "titles": {
        "indexTitle": "UXContentAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXContentAttribute"
      }
    },
    {
      "comment": {
        "brief": "Specifies how the UX compiler interprets child nodes of the decorated type.",
        "full": "Specifies how the UX compiler interprets child nodes of the decorated type.\n\nPossible values are:\n* `[UXContentMode(\"Default\")]` - Child nodes are interppreted as instances. This is the default.\n* `[UXContentMode(\"Template\")]` - Child nodes are interpreted as `ux:Template`\n* `[UXContentMode(\"TemplateIfClass\")]` - Child nodes are interpreted as `ux:Template`, if the class is marked with `ux:Class` in the current scope, instances otherwise.\n\n`Template` is useful if creating a class for which the content nodes should not be directly instantiated, but instead be provided\nas `Uno.UX.Template`s so the class can instantiate them later at its own discretion.\n\n`TemplateIfClass` is useful if creating a class where you want the content to be templates while defining the class, but if users\nof the class add additional children, these should be interpreted as actual children."
      },
      "id": {
        "id": "uno/ux/uxcontentmodeattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxcontentmodeattribute",
        "href": "uno/ux/uxcontentmodeattribute"
      },
      "titles": {
        "indexTitle": "UXContentModeAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXContentModeAttribute"
      }
    },
    {
      "comment": {
        "brief": "When used to decorate a property of UX expression type, the expression is in data scope.",
        "full": "When used to decorate a property of UX expression type, the expression is in data scope.\n\nThis is intended for parsing of `Key`-paths, of the form <DataBinding Key=\"userName\" Target=\"...\"`"
      },
      "id": {
        "id": "uno/ux/uxdatascopeattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxdatascopeattribute",
        "href": "uno/ux/uxdatascopeattribute"
      },
      "titles": {
        "indexTitle": "UXDataScopeAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXDataScopeAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/uxdefaultvalueattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxdefaultvalueattribute",
        "href": "uno/ux/uxdefaultvalueattribute"
      },
      "titles": {
        "indexTitle": "UXDefaultValueAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXDefaultValueAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/uxexpressionattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxexpressionattribute",
        "href": "uno/ux/uxexpressionattribute"
      },
      "titles": {
        "indexTitle": "UXExpressionAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXExpressionAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/uxfilenameattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxfilenameattribute",
        "href": "uno/ux/uxfilenameattribute"
      },
      "titles": {
        "indexTitle": "UXFileNameAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXFileNameAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/uxfreestandingattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxfreestandingattribute",
        "href": "uno/ux/uxfreestandingattribute"
      },
      "titles": {
        "indexTitle": "UXFreestandingAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXFreestandingAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/uxfunctionattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxfunctionattribute",
        "href": "uno/ux/uxfunctionattribute"
      },
      "titles": {
        "indexTitle": "UXFunctionAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXFunctionAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/uxglobalmoduleattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxglobalmoduleattribute",
        "href": "uno/ux/uxglobalmoduleattribute"
      },
      "titles": {
        "indexTitle": "UXGlobalModuleAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXGlobalModuleAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/uxglobalresourceattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxglobalresourceattribute",
        "href": "uno/ux/uxglobalresourceattribute"
      },
      "titles": {
        "indexTitle": "UXGlobalResourceAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXGlobalResourceAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/uximplicitpropertysetterattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uximplicitpropertysetterattribute",
        "href": "uno/ux/uximplicitpropertysetterattribute"
      },
      "titles": {
        "indexTitle": "UXImplicitPropertySetterAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXImplicitPropertySetterAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/uxlinenumberattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxlinenumberattribute",
        "href": "uno/ux/uxlinenumberattribute"
      },
      "titles": {
        "indexTitle": "UXLineNumberAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXLineNumberAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/uxmissingpropertyhintattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxmissingpropertyhintattribute",
        "href": "uno/ux/uxmissingpropertyhintattribute"
      },
      "titles": {
        "indexTitle": "UXMissingPropertyHintAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXMissingPropertyHintAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/uxnameattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxnameattribute",
        "href": "uno/ux/uxnameattribute"
      },
      "titles": {
        "indexTitle": "UXNameAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXNameAttribute"
      }
    },
    {
      "comment": {
        "brief": "When used to decorate a property of a UX expression type, identifiers are interpreted\nin data scope, while function calls are mapped to NamedFunctionCall. Arguments to the\nNamedFunctionCall are parsed in the global scope.",
        "full": "When used to decorate a property of a UX expression type, identifiers are interpreted\nin data scope, while function calls are mapped to NamedFunctionCall. Arguments to the\nNamedFunctionCall are parsed in the global scope.\n\nThis is intended for parsing of `Model`-paths, of the form `Model=\"Folder/File(arg0, arg1, ...)\"`"
      },
      "id": {
        "id": "uno/ux/uxnamescopeattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxnamescopeattribute",
        "href": "uno/ux/uxnamescopeattribute"
      },
      "titles": {
        "indexTitle": "UXNameScopeAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXNameScopeAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/uxoriginsetterattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxoriginsetterattribute",
        "href": "uno/ux/uxoriginsetterattribute"
      },
      "titles": {
        "indexTitle": "UXOriginSetterAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXOriginSetterAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/uxparameterattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxparameterattribute",
        "href": "uno/ux/uxparameterattribute"
      },
      "titles": {
        "indexTitle": "UXParameterAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXParameterAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/uxprimaryattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxprimaryattribute",
        "href": "uno/ux/uxprimaryattribute"
      },
      "titles": {
        "indexTitle": "UXPrimaryAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXPrimaryAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/uxsourcefilenameattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxsourcefilenameattribute",
        "href": "uno/ux/uxsourcefilenameattribute"
      },
      "titles": {
        "indexTitle": "UXSourceFileNameAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXSourceFileNameAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/uxtestbootstrapperforattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxtestbootstrapperforattribute",
        "href": "uno/ux/uxtestbootstrapperforattribute"
      },
      "titles": {
        "indexTitle": "UXTestBootstrapperForAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXTestBootstrapperForAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/uxunaryoperatorattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxunaryoperatorattribute",
        "href": "uno/ux/uxunaryoperatorattribute"
      },
      "titles": {
        "indexTitle": "UXUnaryOperatorAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXUnaryOperatorAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/uxvaluebindingaliasattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxvaluebindingaliasattribute",
        "href": "uno/ux/uxvaluebindingaliasattribute"
      },
      "titles": {
        "indexTitle": "UXValueBindingAliasAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXValueBindingAliasAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/uxvaluebindingargumentattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxvaluebindingargumentattribute",
        "href": "uno/ux/uxvaluebindingargumentattribute"
      },
      "titles": {
        "indexTitle": "UXValueBindingArgumentAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXValueBindingArgumentAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/uxvaluebindingtargetattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxvaluebindingtargetattribute",
        "href": "uno/ux/uxvaluebindingtargetattribute"
      },
      "titles": {
        "indexTitle": "UXValueBindingTargetAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXValueBindingTargetAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/uxverbatimattribute",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/ux/uxverbatimattribute",
        "href": "uno/ux/uxverbatimattribute"
      },
      "titles": {
        "indexTitle": "UXVerbatimAttribute",
        "fullyQualifiedIndexTitle": "Uno.UX.UXVerbatimAttribute"
      }
    },
    {
      "id": {
        "id": "uno/ux/valuechangedargs_1",
        "parentId": "uno/ux",
        "type": "Class",
        "modifiers": [
          "public"
        ]
      },
      "uri": {
        "idUri": "uno/ux/valuechangedargs_1",
        "href": "uno/ux/valuechangedargs_1"
      },
      "titles": {
        "indexTitle": "ValueChangedArgs<T>",
        "fullyQualifiedIndexTitle": "Uno.UX.ValueChangedArgs<T>"
      }
    },
    {
      "id": {
        "id": "uno/valuetype",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public",
          "abstract"
        ]
      },
      "uri": {
        "idUri": "uno/valuetype",
        "href": "uno/valuetype"
      },
      "titles": {
        "indexTitle": "ValueType",
        "fullyQualifiedIndexTitle": "Uno.ValueType"
      }
    },
    {
      "id": {
        "id": "uno/weakreference_1",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/weakreference_1",
        "href": "uno/weakreference_1"
      },
      "titles": {
        "indexTitle": "WeakReference<T>",
        "fullyQualifiedIndexTitle": "Uno.WeakReference<T>"
      }
    },
    {
      "id": {
        "id": "uno/weakreferenceattribute",
        "parentId": "uno",
        "type": "Class",
        "modifiers": [
          "public",
          "sealed"
        ]
      },
      "uri": {
        "idUri": "uno/weakreferenceattribute",
        "href": "uno/weakreferenceattribute"
      },
      "titles": {
        "indexTitle": "WeakReferenceAttribute",
        "fullyQualifiedIndexTitle": "Uno.WeakReferenceAttribute"
      }
    }
  ]
}